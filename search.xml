<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>3.mysql-SQL语句优化分析</title>
      <link href="/2018/07/06/mysql-3/"/>
      <url>/2018/07/06/mysql-3/</url>
      <content type="html"><![CDATA[<h2 id="开启慢查询日志，捕获慢SQL"><a href="#开启慢查询日志，捕获慢SQL" class="headerlink" title="开启慢查询日志，捕获慢SQL"></a>开启慢查询日志，捕获慢SQL</h2><ul><li>查看慢查询日志是否开启</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'%slow_query_log%'</span>;</span><br></pre></td></tr></table></figure><ul><li>开启慢查询日志</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> GLOBAL <span class="attribute">slow_query_log</span>=1;</span><br></pre></td></tr></table></figure><ul><li>查看慢查询日志阙值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> [<span class="keyword">GLOBAL</span>] <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'%long_query_time%'</span>;</span><br></pre></td></tr></table></figure><ul><li>设置慢查询日志阙值</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">SET</span> GLOBAL <span class="attribute">long_query_time</span>=3;</span><br></pre></td></tr></table></figure><ul><li>查看多少SQL语句超过了阙值</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">STATUS</span> <span class="keyword">LIKE</span> <span class="string">'%Slow_queries%'</span>;</span><br></pre></td></tr></table></figure><ul><li>MySQL提供的日志分析工具mysqldumpslow</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">得到返回记录集最多的<span class="number">10</span>个SQL</span><br><span class="line">mysqldumpslow -s r -t <span class="number">10</span> slow.log</span><br><span class="line">得到访问次数最多的<span class="number">10</span>个SQL</span><br><span class="line">mysqldumpslow -s c -t <span class="number">10</span> slow.log</span><br><span class="line">得到按照时间排序的前<span class="number">10</span>条里面含有左连接的查询语句</span><br><span class="line">mysqldumpslow -s t -t <span class="number">10</span> -g <span class="string">"left join"</span> slow.log</span><br><span class="line">使用这些语句时结合| more使用</span><br></pre></td></tr></table></figure><h2 id="explain-慢SQL分析"><a href="#explain-慢SQL分析" class="headerlink" title="explain+慢SQL分析"></a>explain+慢SQL分析</h2><p>使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是 如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈。</p><h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3><p>SELECT查询的序列号，包含一组数字，表示查询中执行SELECT语句或操作表的顺序<br>包含三种情况：</p><ol><li>id相同，执行顺序由上至下</li><li>id不同，如果是子查询，id序号会递增，id值越大优先级越高，越先被执行</li><li>id既有相同的，又有不同的。id如果相同认为是一组，执行顺序由上至下； 在所有组中，id值越大优先级越高，越先执行。</li></ol><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><ul><li>SIMPLE:简单SELECT查询，查询中不包含子查询或者UNION</li><li>PRIMARY:查询中包含任何复杂的子部分，最外层的查询</li><li>SUBQUERY：SELECT或WHERE中包含的子查询部分</li><li>DERIVED：在FROM中包含的子查询被标记为DERIVER(衍生)， MySQL会递归执行这些子查询，把结果放到临时表中</li><li>UNION：若第二个SELECT出现UNION，则被标记为UNION, 若UNION包含在FROM子句的子查询中，外层子查询将被标记为DERIVED</li><li>UNION RESULT：从UNION表获取结果的SELECT</li></ul><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>显示这一行数据是关于哪张表的</p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>type显示的是访问类型，是较为重要的一个指标，结果值从最好到最坏依次是：<br>system&gt;const&gt;eq_ref&gt;ref&gt;fulltext&gt;ref_or_null&gt;index_merge&gt;unique_subquery&gt;index_subquery&gt;range&gt;index&gt;ALL<br>一般来说，得保证查询至少达到range级别，最好能达到ref。</p><ul><li>system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现</li><li>const：如果通过索引依次就找到了，const用于比较主键索引或者unique索引。 因为只能匹配一行数据，所以很快。如果将主键置于where列表中，MySQL就能将该查询转换为一个常量</li><li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描</li><li>ref：非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，它返回所有匹配 某个单独值的行，然而它可能会找到多个符合条件的行，所以它应该属于查找和扫描的混合体</li><li>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，一般就是在你的where语句中出现between、&lt;、&gt;、in等的查询，这种范围扫描索引比全表扫描要好，因为只需要开始于缩印的某一点，而结束于另一点，不用扫描全部索引</li><li>index：Full Index Scan ，index与ALL的区别为index类型只遍历索引树，这通常比ALL快，因为索引文件通常比数据文件小。 （也就是说虽然ALL和index都是读全表， 但index是从索引中读取的，而ALL是从硬盘读取的）</li><li>all：Full Table Scan，遍历全表获得匹配的行</li></ul><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><p>显示可能应用在这张表中的索引，一个或多个。 查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>实际使用的索引。如果为NULL，则没有使用索引。 查询中若出现了覆盖索引，则该索引仅出现在key列表中。</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精度的情况下，长度越短越好。<br>key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>显示索引的哪一列被使用了，哪些列或常量被用于查找索引列上的值。</p><h3 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h3><p>根据表统计信息及索引选用情况，大致估算出找到所需记录多需要读取的行数。</p><h2 id="show-profile查询SQL语句在服务器中的执行细节和生命周期"><a href="#show-profile查询SQL语句在服务器中的执行细节和生命周期" class="headerlink" title="show profile查询SQL语句在服务器中的执行细节和生命周期"></a>show profile查询SQL语句在服务器中的执行细节和生命周期</h2><p>Show Profile是MySQL提供可以用来分析当前会话中语句执行的资源消耗情况，可以用于SQL的调优测量<br>默认关闭，并保存最近15次的运行结果<br>分析步骤</p><ol><li>查看状态：SHOW VARIABLES LIKE ‘profiling’;</li><li>开启：set profiling=on;</li><li>查看结果：show profiles;</li><li>诊断SQL：show profile cpu,block io for query 上一步SQL数字号码;<br> ALL：显示所有开销信息<br> BLOCK IO：显示IO相关开销<br> CONTEXT SWITCHES：显示上下文切换相关开销<br> CPU：显示CPU相关开销<br> IPC：显示发送接收相关开销<br> MEMORY：显示内存相关开销<br> PAGE FAULTS：显示页面错误相关开销<br> SOURCE：显示和Source_function，Source_file，Source_line相关开销<br> SWAPS：显示交换次数相关开销<br>注意（遇到这几种情况要优化）<br>converting HEAP to MyISAM： 查询结果太大，内存不够用往磁盘上搬<br>Creating tmp table：创建临时表<br>Copying to tmp table on disk：把内存中的临时表复制到磁盘<br>locked</li></ol>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>傲红尘</title>
      <link href="/2018/07/02/poem-3/"/>
      <url>/2018/07/02/poem-3/</url>
      <content type="html"><![CDATA[<p>漫天 无边<br>孤帆在飘<br>独行无依靠<br>心不是一座孤岛<br>转念 变幻<br>只需要一秒<br>天地是怀抱<br>爱才是心之解药</p><p>一双手被你牵着<br>就把人间去了烦恼<br>留下一丝丝情牵梦绕<br>在心里回旋轻挑<br>纵身潜藏红尘一遭<br>总有些劫数难逃<br>一张脸被你看着<br>就把人海去了音潮<br>留下一种种不羁心跳<br>在梦里喧嚣热闹<br>难得心里有了依靠<br>避烦恼<br>共年少<br>乐逍遥</p><p>漫天 无边<br>孤帆在飘<br>独行无依靠<br>心不是一座孤岛<br>转念 变幻<br>只需要一秒<br>天地是怀抱<br>爱才是心之解药</p><p>一张脸被你看着<br>就把人海去了音潮<br>留下一种种不羁心跳<br>在梦里喧嚣热闹<br>难得心里有了依靠<br>避烦恼<br>共年少<br>乐逍遥</p>]]></content>
      
      <categories>
          
          <category> 1房2人3餐4季 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.面试准备-框架</title>
      <link href="/2018/06/20/interview-2/"/>
      <url>/2018/06/20/interview-2/</url>
      <content type="html"><![CDATA[<h2 id="阐述Session加载实体对象的过程。"><a href="#阐述Session加载实体对象的过程。" class="headerlink" title="阐述Session加载实体对象的过程。"></a>阐述Session加载实体对象的过程。</h2><ul><li>Session在调用数据库查询功能之前，首先会在一级缓存中通过实体类型和主键进行查找，如果一级缓存查找命中且数据状态合法，则直接返回； </li><li>如果一级缓存没有命中，接下来Session会在当前NonExists记录（相当于一个查询黑名单，如果出现重复的无效查询可以迅速做出判断，从而提升性能）中进行查找，如果NonExists中存在同样的查询条件，则返回null； </li><li>如果一级缓存查询失败则查询二级缓存，如果二级缓存命中则直接返回； </li><li>如果之前的查询都未命中，则发出SQL语句，如果查询未发现对应记录则将此次查询添加到Session的NonExists中加以记录，并返回null； </li><li>根据映射配置和SQL语句得到ResultSet，并创建对应的实体对象； </li><li>将对象纳入Session（一级缓存）的管理； </li><li>如果有对应的拦截器，则执行拦截器的onLoad方法； </li><li>如果开启并设置了要使用二级缓存，则将数据对象纳入二级缓存； </li><li>返回数据对象。</li></ul><h2 id="锁机制有什么用？简述Hibernate的悲观锁和乐观锁机制。"><a href="#锁机制有什么用？简述Hibernate的悲观锁和乐观锁机制。" class="headerlink" title="锁机制有什么用？简述Hibernate的悲观锁和乐观锁机制。"></a>锁机制有什么用？简述Hibernate的悲观锁和乐观锁机制。</h2><p>有些业务逻辑在执行过程中要求对数据进行排他性的访问，于是需要通过一些机制保证在此过程中数据被锁住不会被外界修改，这就是所谓的锁机制。 Hibernate支持悲观锁和乐观锁两种锁机制</p><ul><li>悲观锁，顾名思义悲观的认为在数据处理过程中极有可能存在修改数据的并发事务（包括本系统的其他事务或来自外部系统的事务），于是将处理的数据设置为锁定状态。悲观锁必须依赖数据库本身的锁机制才能真正保证数据访问的排他性，</li><li>乐观锁，顾名思义，对并发事务持乐观态度（认为对数据的并发操作不会经常性的发生），通过更加宽松的锁机制来解决由于悲观锁排他性的数据访问对系统性能造成的严重影响。最常见的乐观锁是通过数据版本标识来实现的，读取数据时获得数据的版本号，更新数据时将此版本号加1，然后和数据库表对应记录的当前版本号进行比较，如果提交的数据版本号大于数据库中此记录的当前版本号则更新数据，否则认为是过期数据无法更新。Hibernate中通过Session的get()和load()方法从数据库中加载对象时可以通过参数指定使用悲观锁；而乐观锁可以通过给实体类加整型的版本字段再通过XML或@Version注解进行配置。</li></ul><h2 id="如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？"><a href="#如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？" class="headerlink" title="如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？"></a>如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？</h2><p>延迟加载就是并不是在读取的时候就把数据加载进来，而是等到使用时再加载。Hibernate使用了虚拟代理机制实现延迟加载，我们使用Session的load()方法加载数据或者一对多关联映射在使用延迟加载的情况下从一的一方加载多的一方，得到的都是虚拟代理，简单的说返回给用户的并不是实体本身，而是实体对象的代理。代理对象在用户调用getter方法时才会去数据库加载数据。但加载数据就需要数据库连接。而当我们把会话关闭时，数据库连接就同时关闭了。</p><h3 id="延迟加载与session关闭的矛盾一般可以这样处理："><a href="#延迟加载与session关闭的矛盾一般可以这样处理：" class="headerlink" title="延迟加载与session关闭的矛盾一般可以这样处理："></a>延迟加载与session关闭的矛盾一般可以这样处理：</h3><ul><li>关闭延迟加载特性。这种方式操作起来比较简单，因为Hibernate的延迟加载特性是可以通过映射文件或者注解进行配置的，但这种解决方案存在明显的缺陷。首先，出现”no session or session was closed”通常说明系统中已经存在主外键关联，如果去掉延迟加载的话，每次查询的开销都会变得很大。 </li><li>在session关闭之前先获取需要查询的数据，可以使用工具方法Hibernate.isInitialized()判断对象是否被加载，如果没有被加载则可以使用Hibernate.initialize()方法加载对象。 </li><li>使用拦截器或过滤器延长Session的生命周期直到视图获得数据。Spring整合Hibernate提供的OpenSessionInViewFilter和OpenSessionInViewInterceptor就是这种做法。</li></ul><h2 id="谈一下你对继承映射的理解"><a href="#谈一下你对继承映射的理解" class="headerlink" title="谈一下你对继承映射的理解"></a>谈一下你对继承映射的理解</h2><p>继承关系的映射策略有三种： </p><ul><li>每个继承结构一张表（table per class hierarchy），不管多少个子类都用一张表。 </li><li>每个子类一张表（table per subclass），公共信息放一张表，特有信息放单独的表。 </li><li>每个具体类一张表（table per concrete class），有多少个子类就有多少张表。 </li></ul><p>第一种方式属于单表策略，其优点在于查询子类对象的时候无需表连接，查询速度快，适合多态查询；缺点是可能导致表很大。<br>后两种方式属于多表策略，其优点在于数据存储紧凑，其缺点是需要进行连接查询，不适合多态查询。</p><h2 id="常见的hibernate的优化策略"><a href="#常见的hibernate的优化策略" class="headerlink" title="常见的hibernate的优化策略"></a>常见的hibernate的优化策略</h2><ul><li>制定合理的缓存策略（二级缓存、查询缓存）。 </li><li>采用合理的Session管理机制。 </li><li>尽量使用延迟加载特性。 </li><li>设定合理的批处理参数。 </li><li>如果可以，选用UUID作为主键生成器。 </li><li>如果可以，选用基于版本号的乐观锁替代悲观锁。 </li><li>在开发过程中, 开启hibernate.show_sql选项查看生成的SQL，从而了解底层的状况；开发完成后关闭此选项。 </li><li>考虑数据库本身的优化，合理的索引、恰当的数据分区策略等都会对持久层的性能带来可观的提升，但这些需要专业的DBA（数据库管理员）提供支持。</li></ul><h2 id="OneToMany注解的mappedBy属性有什么作用？"><a href="#OneToMany注解的mappedBy属性有什么作用？" class="headerlink" title="@OneToMany注解的mappedBy属性有什么作用？"></a>@OneToMany注解的mappedBy属性有什么作用？</h2><p>@OneToMany用来配置一对多关联映射，但通常情况下，一对多关联映射都由多的一方来维护关联关系，例如学生和班级，应该在学生类中添加班级属性来维持学生和班级的关联关系（在数据库中是由学生表中的外键班级编号来维护学生表和班级表的多对一关系），如果要使用双向关联，在班级类中添加一个容器属性来存放学生，并使用@OneToMany注解进行映射，此时mappedBy属性就非常重要。如果使用XML进行配置，可以用<set>标签的inverse=”true”设置来达到同样的效果。</set></p><h2 id="MyBatis中使用-和-书写占位符有什么区别？"><a href="#MyBatis中使用-和-书写占位符有什么区别？" class="headerlink" title="MyBatis中使用#和$书写占位符有什么区别？"></a>MyBatis中使用#和$书写占位符有什么区别？</h2><ul><li>井号将传入的数据都当成一个字符串，会对传入的数据自动加上引号；</li><li>美元符号将传入的数据直接显示生成在SQL中。</li><li>使用美元符号占位符可能会导致SQL注射攻击，</li><li>能用井号的地方就不要使用美元符号，写order by子句的时候应该用美元符号而不是井号。</li></ul><h2 id="解释一下MyBatis中命名空间（namespace）的作用。"><a href="#解释一下MyBatis中命名空间（namespace）的作用。" class="headerlink" title="解释一下MyBatis中命名空间（namespace）的作用。"></a>解释一下MyBatis中命名空间（namespace）的作用。</h2><p>在大型项目中，可能存在大量的SQL语句，这时候为每个SQL语句起一个唯一的标识（ID）就变得并不容易了。为了解决这个问题，在MyBatis中，可以为每个映射文件起一个唯一的命名空间，这样定义在这个映射文件中的每个SQL语句就成了定义在这个命名空间中的一个ID。只要我们能够保证每个命名空间中这个ID是唯一的，即使在不同映射文件中的语句ID相同，也不会再产生冲突了。</p><h2 id="什么是IoC和DI？DI是如何实现的？"><a href="#什么是IoC和DI？DI是如何实现的？" class="headerlink" title="什么是IoC和DI？DI是如何实现的？"></a>什么是IoC和DI？DI是如何实现的？</h2><p>IoC叫控制反转，是Inversion of Control的缩写，DI（Dependency Injection）叫依赖注入，是对IoC更简单的诠释，控制反转是把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的”控制反转”就是对组件对象控制权的转移，从程序代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。</p><p>IoC体现了好莱坞原则 - “Don’t call me, we will call you”。依赖注入的基本原则是应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由容器负责，查找资源的逻辑应该从应用组件的代码中抽取出来，交给容器来完成。</p><p>DI是对IoC更准确的描述，即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中。</p><p>依赖注入可以通过setter方法注入（设值注入）、构造器注入和接口注入三种方式来实现，Spring支持setter注入和构造器注入，通常使用构造器注入来注入必须的依赖关系，对于可选的依赖关系，则setter注入是更好的选择，setter注入需要类提供无参构造器或者无参的静态工厂方法来创建对象。</p><h2 id="Spring中Bean的作用域有哪些？"><a href="#Spring中Bean的作用域有哪些？" class="headerlink" title="Spring中Bean的作用域有哪些？"></a>Spring中Bean的作用域有哪些？</h2><p>在Spring的早期版本中，仅有两个作用域：singleton和prototype，前者表示Bean以单例的方式存在；后者表示每次从容器中调用Bean时，都会返回一个新的实例，prototype通常翻译为原型。</p><p>Spring 2.x中针对WebApplicationContext新增了3个作用域，分别是：request（每次HTTP请求都会创建一个新的Bean）、session（同一个HttpSession共享同一个Bean，不同的HttpSession使用不同的Bean）和globalSession（同一个全局Session共享一个Bean）。</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>ThreadLocal为解决多线程程序的并发问题提供了一种新的思路。ThreadLocal，顾名思义是线程的一个本地化对象，当工作于多线程中的对象使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程分配一个独立的变量副本，所以每一个线程都可以独立的改变自己的副本，而不影响其他线程所对应的副本。从线程的角度看，这个变量就像是线程的本地变量。</p><p>ThreadLocal类非常简单好用，只有四个方法，能用上的也就是下面三个方法： </p><ul><li>void set(T value)：设置当前线程的线程局部变量的值。 </li><li>T get()：获得当前线程所对应的线程局部变量的值。 </li><li>void remove()：删除当前线程中线程局部变量的值。</li></ul><h2 id="解释一下什么叫AOP（面向切面编程）？"><a href="#解释一下什么叫AOP（面向切面编程）？" class="headerlink" title="解释一下什么叫AOP（面向切面编程）？"></a>解释一下什么叫AOP（面向切面编程）？</h2><p>AOP（Aspect-Oriented Programming）指一种程序设计范型，该范型以一种称为切面（aspect）的语言构造为基础，切面是一种新的模块化机制，用来描述分散在对象、类或方法中的横切关注点（crosscutting concern）。</p><h2 id="你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？"><a href="#你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？" class="headerlink" title="你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？"></a>你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？</h2><ul><li>连接点（Joinpoint）：程序执行的某个特定位置（如：某个方法调用前、调用后，方法抛出异常后）。一个类或一段程序代码拥有一些具有边界性质的特定点，这些代码中的特定点就是连接点。Spring仅支持方法的连接点。</li><li>切点（Pointcut）：如果连接点相当于数据中的记录，那么切点相当于查询条件，一个切点可以匹配多个连接点。Spring AOP的规则解析引擎负责解析切点所设定的查询条件，找到对应的连接点。 </li><li>增强（Advice）：增强是织入到目标类连接点上的一段程序代码。Spring提供的增强接口都是带方位名的，如：BeforeAdvice、AfterReturningAdvice、ThrowsAdvice等。很多资料上将增强译为“通知”，这明显是个词不达意的翻译，让很多程序员困惑了许久。</li><li>引介（Introduction）：引介是一种特殊的增强，它为类添加一些属性和方法。这样，即使一个业务类原本没有实现某个接口，通过引介功能，可以动态的未该业务类添加接口的实现逻辑，让业务类成为这个接口的实现类。 </li><li>织入（Weaving）：织入是将增强添加到目标类具体连接点上的过程，AOP有三种织入方式：①编译期织入：需要特殊的Java编译期（例如AspectJ的ajc）；②装载期织入：要求使用特殊的类加载器，在装载类的时候对类进行增强；③运行时织入：在运行时为目标类生成代理实现增强。Spring采用了动态代理的方式实现了运行时织入，而AspectJ采用了编译期织入和装载期织入的方式。 </li><li>切面（Aspect）：切面是由切点和增强（引介）组成的，它包括了对横切关注功能的定义，也包括了对连接点的定义。</li></ul><h2 id="Spring中自动装配的方式有哪些？"><a href="#Spring中自动装配的方式有哪些？" class="headerlink" title="Spring中自动装配的方式有哪些？"></a>Spring中自动装配的方式有哪些？</h2><ul><li>no：不进行自动装配，手动设置Bean的依赖关系。 </li><li>byName：根据Bean的名字进行自动装配。 </li><li>byType：根据Bean的类型进行自动装配。 </li><li>constructor：类似于byType，不过是应用于构造器的参数，如果正好有一个Bean与构造器的参数类型相同则可以自动装配，否则会导致错误。 </li><li>autodetect：如果有默认的构造器，则通过constructor的方式进行自动装配，否则使用byType的方式进行自动装配。</li></ul><h2 id="Spring支持的事务管理类型有哪些？你在项目中使用哪种方式？"><a href="#Spring支持的事务管理类型有哪些？你在项目中使用哪种方式？" class="headerlink" title="Spring支持的事务管理类型有哪些？你在项目中使用哪种方式？"></a>Spring支持的事务管理类型有哪些？你在项目中使用哪种方式？</h2><p>Spring支持编程式事务管理和声明式事务管理。许多Spring框架的用户选择声明式事务管理，因为这种方式和应用程序的关联较少，因此更加符合轻量级容器的概念。声明式事务管理要优于编程式事务管理，尽管在灵活性方面它弱于编程式事务管理，因为编程式事务允许你通过代码控制业务。</p><p>事务分为全局事务和局部事务。全局事务由应用服务器管理，需要底层服务器JTA支持（如WebLogic、WildFly等）。局部事务和底层采用的持久化方案有关，例如使用JDBC进行持久化时，需要使用Connetion对象来操作事务；而采用Hibernate进行持久化时，需要使用Session对象来操作事务。</p><ul><li>DataSourceTransactionManager</li><li>HibernateTransactionManager</li><li>JdoTransactionManager</li><li>JtaTransactionManager</li><li>PersistenceBrokerTransactionManager</li></ul><p>Spring的事务管理机制是一种典型的策略模式，PlatformTransactionManager代表事务管理接口，该接口定义了三个方法，该接口并不知道底层如何管理事务，但是它的实现类必须提供getTransaction()方法（开启事务）、commit()方法（提交事务）、rollback()方法（回滚事务）的多态实现，这样就可以用不同的实现类代表不同的事务管理策略。</p><p>使用JTA全局事务策略时，需要底层应用服务器支持，而不同的应用服务器所提供的JTA全局事务可能存在细节上的差异，因此实际配置全局事务管理器是可能需要使用JtaTransactionManager的子类，如：WebLogicJtaTransactionManager（Oracle的WebLogic服务器提供）、UowJtaTransactionManager（IBM的WebSphere服务器提供）等。</p><h2 id="Spring-MVC的工作原理是怎样的？"><a href="#Spring-MVC的工作原理是怎样的？" class="headerlink" title="Spring MVC的工作原理是怎样的？"></a>Spring MVC的工作原理是怎样的？</h2><ul><li>客户端的所有请求都交给前端控制器DispatcherServlet来处理，它会负责调用系统的其他模块来真正处理用户的请求。 </li><li>DispatcherServlet收到请求后，将根据请求的信息（包括URL、HTTP协议方法、请求头、请求参数、Cookie等）以及HandlerMapping的配置找到处理该请求的Handler（任何一个对象都可以作为请求的Handler）。 </li><li>在这个地方Spring会通过HandlerAdapter对该处理器进行封装。 </li><li>HandlerAdapter是一个适配器，它用统一的接口对各种Handler中的方法进行调用。 </li><li>Handler完成对用户请求的处理后，会返回一个ModelAndView对象给DispatcherServlet，ModelAndView顾名思义，包含了数据模型以及相应的视图的信息。 </li><li>ModelAndView的视图是逻辑视图，DispatcherServlet还要借助ViewResolver完成从逻辑视图到真实视图对象的解析工作。 </li><li>当得到真正的视图对象后，DispatcherServlet会利用视图对象对模型数据进行渲染。 </li><li>客户端得到响应，可能是一个普通的HTML页面，也可以是XML或JSON字符串，还可以是一张图片或者一个PDF文件。</li></ul><h2 id="阐述Spring框架中Bean的生命周期？"><a href="#阐述Spring框架中Bean的生命周期？" class="headerlink" title="阐述Spring框架中Bean的生命周期？"></a>阐述Spring框架中Bean的生命周期？</h2><p><a href="https://www.cnblogs.com/zrtqsk/p/3735273.html" target="_blank" rel="noopener">很详细的参考链接</a></p><p><img src="https://images0.cnblogs.com/i/580631/201405/181453414212066.png" alt=""></p><p><img src="http://images.51cto.com/files/uploadimg/20110419/0930070.png" alt=""></p><ul><li>Spring IoC容器找到关于Bean的定义并实例化该Bean。 </li><li>Spring IoC容器对Bean进行依赖注入。 </li><li>如果Bean实现了BeanNameAware接口，则将该Bean的id传给setBeanName方法。 </li><li>如果Bean实现了BeanFactoryAware接口，则将BeanFactory对象传给setBeanFactory方法。 </li><li>如果Bean实现了BeanPostProcessor接口，则调用其postProcessBeforeInitialization方法</li><li>如果Bean实现了InitializingBean接口，则调用其afterPropertySet方法。 </li><li>如果有和Bean关联的BeanPostProcessors对象，则这些对象的postProcessAfterInitialization方法被调用。 </li><li>当销毁Bean实例时，如果Bean实现了DisposableBean接口，则调用其destroy方法。</li></ul><p>Bean的完整生命周期经历了各种方法调用，这些方法可以划分为以下几类：</p><ol><li>Bean自身的方法这个包括了Bean本身调用的方法和通过配置文件中<bean>的init-method和destroy-method指定的方法</bean></li><li>Bean级生命周期接口方法：这个包括了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这些接口的方法</li><li>容器级生命周期接口方法：这个包括了InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”。</li><li>工厂后处理器接口方法这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, CustomAutowireConfigurer等等非常有用的工厂后处理器接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。</li></ol><h2 id="什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？"><a href="#什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？" class="headerlink" title="什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？"></a>什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？</h2><ul><li>XSS（Cross Site Script，跨站脚本攻击）是向网页中注入恶意脚本在用户浏览网页时在用户浏览器中执行恶意脚本的攻击方式。跨站脚本攻击分有两种形式：反射型攻击（诱使用户点击一个嵌入恶意脚本的链接以达到攻击的目标，目前有很多攻击者利用论坛、微博发布含有恶意脚本的URL就属于这种方式）和持久型攻击（将恶意脚本提交到被攻击网站的数据库中，用户浏览网页时，恶意脚本从数据库中被加载到页面执行，QQ邮箱的早期版本就曾经被利用作为持久型跨站脚本攻击的平台）。XSS虽然不是什么新鲜玩意，但是攻击的手法却不断翻新，防范XSS主要有两方面：消毒（对危险字符进行转义）和HttpOnly（防范XSS攻击者窃取Cookie数据）。 </li><li>SQL注入攻击是注入攻击最常见的形式（此外还有OS注入攻击（Struts 2的高危漏洞就是通过OGNL实施OS注入攻击导致的）），当服务器使用请求参数构造SQL语句时，恶意的SQL被嵌入到SQL中交给数据库执行。SQL注入攻击需要攻击者对数据库结构有所了解才能进行，攻击者想要获得表结构有多种方式：（1）如果使用开源系统搭建网站，数据库结构也是公开的（目前有很多现成的系统可以直接搭建论坛，电商网站，虽然方便快捷但是风险是必须要认真评估的）；</li><li>CSRF攻击（Cross Site Request Forgery，跨站请求伪造）是攻击者通过跨站请求，以合法的用户身份进行非法操作（如转账或发帖等）。CSRF的原理是利用浏览器的Cookie或服务器的Session，盗取用户身份，其原理如下图所示。防范CSRF的主要手段是识别请求者的身份，主要有以下几种方式：（1）在表单中添加令牌（token）；（2）验证码；</li></ul><h2 id="Spring中的BeanFactory和ApplicationContext有什么联系？"><a href="#Spring中的BeanFactory和ApplicationContext有什么联系？" class="headerlink" title="Spring中的BeanFactory和ApplicationContext有什么联系？"></a>Spring中的BeanFactory和ApplicationContext有什么联系？</h2><ul><li>Spring通过配置文件描述Bean以及Bean之间的依赖关系，利用Java的反射机制实现Bean的实例化，并建立Bean之间的依赖关系，在此基础上，Spring的IoC容器还提供了Bean实例缓存、生命周期管理、Bean实例代理、事件发布、资源装载等高级服务。BeanFactory是Spring框架最核心的接口，它提供了IoC容器的配置机制。</li><li>ApplicationContext建立在BeanFactory之上，提供了更多面向应用的功能，包括对国际化和框架事件体系的支持。通常将BeanFactory称为IoC容器，而ApplicationContext称为应用上下文，前者更倾向于Spring本身，后者更倾向于开发者，因此被使用得更多。</li><li></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.收藏的一些链接</title>
      <link href="/2018/06/17/links/"/>
      <url>/2018/06/17/links/</url>
      <content type="html"><![CDATA[<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ul><li><a href="http://www.oracle.com/technetwork/java/javase/archive-139210.html" target="_blank" rel="noopener">Java所有版本</a></li><li><a href="http://hllvm.group.iteye.com/" target="_blank" rel="noopener">高级语言虚拟机圈子</a></li><li><a href="http://icyfenix.iteye.com/" target="_blank" rel="noopener">深入理解JVM作者博客</a></li><li><a href="https://docs.oracle.com/javase/10/" target="_blank" rel="noopener">JDK各个版本文档</a></li><li><a href="https://docs.oracle.com/javase/7/docs/index.html" target="_blank" rel="noopener">JDK7文档</a></li><li><a href="https://docs.oracle.com/javase/8/docs/index.html" target="_blank" rel="noopener">JDK8文档</a></li><li><a href="https://docs.oracle.com/javase/specs/index.html" target="_blank" rel="noopener">所有版本java语言和虚拟机规范</a></li><li><a href="https://docs.oracle.com/javase/tutorial/tutorialLearningPaths.html" target="_blank" rel="noopener">java官方学习文档</a></li></ul><h2 id="优秀博客"><a href="#优秀博客" class="headerlink" title="优秀博客"></a>优秀博客</h2><ul><li><a href="https://www.jianshu.com/u/581f548ef0ec" target="_blank" rel="noopener">李艳鹏-分布式服务相关</a></li><li><a href="http://ginobefunny.com/" target="_blank" rel="noopener">JVM相关</a></li><li><a href="https://www.jianshu.com/nb/13314305" target="_blank" rel="noopener">Java工程师系列</a></li><li><a href="http://www.cnblogs.com/ysocean/" target="_blank" rel="noopener">Java基础</a></li><li><a href="http://www.coolblog.xyz/" target="_blank" rel="noopener">比较多的源码分析-spring,jdk</a></li><li><a href="https://www.jianshu.com/p/bbd4cb15bc5f" target="_blank" rel="noopener">idea的使用文档</a></li><li><a href="https://www.cnblogs.com/oldtrafford/p/6883796.html" target="_blank" rel="noopener">G1垃圾收集</a></li><li><a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="noopener">Java面试准备相关的</a></li><li><a href="https://blog.csdn.net/jackfrued" target="_blank" rel="noopener">骆昊的技术专栏</a></li></ul><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><ul><li><a href="https://leetcode.com/" target="_blank" rel="noopener">LeetCode</a></li><li><a href="https://www.processon.com/diagrams" target="_blank" rel="noopener">在线画图工具</a></li><li><a href="http://jiantuku.com/#/albums/60563?scope=public" target="_blank" rel="noopener">图片存储</a></li><li><a href="https://smallpdf.com/cn/jpg-to-pdf" target="_blank" rel="noopener">JPG转PDF</a></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> links </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>黑胡椒意面</title>
      <link href="/2018/06/16/life-dinner-noodle/"/>
      <url>/2018/06/16/life-dinner-noodle/</url>
      <content type="html"><![CDATA[<h2 id="意大利面"><a href="#意大利面" class="headerlink" title="意大利面"></a>意大利面</h2><ul><li>烹饪时间：2018年6月16日 午餐</li></ul><h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-18/87605624.jpg" alt=""></p><ul><li>黑胡椒汁</li><li>番茄沙司</li><li>圆头香菇</li><li>胡萝卜半根</li><li>洋葱半个</li><li>红椒半个</li><li>西红柿一个</li><li>秘制酱肉</li><li>意大利面250g</li></ul><h3 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h3><ol><li>将意面煮15min，捞起来晒起</li><li>热油炒酱肉1分钟，在放胡萝卜和红椒，炒2分钟</li><li>放西红柿和洋葱炒1分钟</li><li>倒入意面，放番茄沙司，和胡萝卜汁搅拌均匀</li><li>放盐调味起锅</li></ol><h3 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h3><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-18/84130571.jpg" alt=""></p><ul><li>黑胡椒和番茄沙司才是王道!!!</li><li>当然还有秘制酱肉</li><li>菜还是少了，该用一根胡萝卜，和一个红椒</li></ul>]]></content>
      
      <categories>
          
          <category> 1房2人3餐4季 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.面试准备-Java</title>
      <link href="/2018/06/14/interview-1/"/>
      <url>/2018/06/14/interview-1/</url>
      <content type="html"><![CDATA[<h2 id="面向的对象特征"><a href="#面向的对象特征" class="headerlink" title="面向的对象特征"></a>面向的对象特征</h2><ul><li>抽象：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。 </li><li>继承：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。</li><li>封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口。</li><li>多态性：多态性是指允许不同子类型的对象对同一消息作出不同的响应。简单的说就是用同样的对象引用调用同样的方法但是做了不同的事情。多态性分为编译时的多态性和运行时的多态性。如果将对象的方法视为对象向外界提供的服务，那么运行时的多态性可以解释为：当A系统访问B系统提供的服务时，B系统有多种提供服务的方式，但一切对A系统来说都是透明的。</li><li>方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写（override）实现的是运行时的多态性（也称为后绑定）</li><li>运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：<ul><li>方法重写（子类继承父类并重写父类中已有的或抽象的方法）；</li><li>对象造型（用父类型引用引用子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。</li></ul></li></ul><h2 id="访问修饰符public-private-protected-以及不写（默认）时的区别？"><a href="#访问修饰符public-private-protected-以及不写（默认）时的区别？" class="headerlink" title="访问修饰符public,private,protected,以及不写（默认）时的区别？"></a>访问修饰符public,private,protected,以及不写（默认）时的区别？</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-6/75065795.jpg" alt=""></p><p>类的成员不写访问修饰时默认为default。默认对于同一个包中的其他类相当于公开（public），对于不是同一个包中的其他类相当于私有（private）。受保护（protected）对子类相当于公开，对不是同一包中的没有父子关系的类相当于私有。Java中，外部类的修饰符只能是public或默认，类的成员（包括内部类）的修饰符可以是以上四种。</p><h2 id="String-是最基本的数据类型吗？"><a href="#String-是最基本的数据类型吗？" class="headerlink" title="String 是最基本的数据类型吗？"></a>String 是最基本的数据类型吗？</h2><p>不是。Java中的基本数据类型只有8个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type），Java 5以后引入的枚举类型也算是一种比较特殊的引用类型。</p><h2 id="float-f-3-4-是否正确？"><a href="#float-f-3-4-是否正确？" class="headerlink" title="float f=3.4;是否正确？"></a>float f=3.4;是否正确？</h2><p>不正确。3.4是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换float f =(float)3.4; 或者写成float f =3.4F;。</p><h2 id="short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？"><a href="#short-s1-1-s1-s1-1-有错吗-short-s1-1-s1-1-有错吗？" class="headerlink" title="short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？"></a>short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？</h2><p>对于short s1 = 1; s1 = s1 + 1;由于1是int类型，因此s1+1运算结果也是int 型，需要强制转换类型才能赋值给short型。而short s1 = 1; s1 += 1;可以正确编译，因为s1+= 1;相当于s1 = (short)(s1 + 1);其中有隐含的强制类型转换。</p><h2 id="int和Integer有什么区别？"><a href="#int和Integer有什么区别？" class="headerlink" title="int和Integer有什么区别？"></a>int和Integer有什么区别？</h2><p>Java 为每个原始类型提供了包装类型：</p><ul><li>原始类型: boolean，char，byte，short，int，long，float，double </li><li>包装类型：Boolean，Character，Byte，Short，Integer，Long，Float，Double</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">AutoUnboxingTest</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        Integer a = <span class="keyword">new</span> Integer(<span class="number">3</span>);</span><br><span class="line">        Integer b = <span class="number">3</span>;                  <span class="comment">// 将3自动装箱成Integer类型</span></span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a == b);     <span class="comment">// false 两个引用没有引用同一对象</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a == c);     <span class="comment">// true a自动拆箱成int类型再和c比较</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        Integer f1 = <span class="number">100</span>, f2 = <span class="number">100</span>, f3 = <span class="number">150</span>, f4 = <span class="number">150</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(f1 == f2);<span class="comment">//true</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(f3 == f4);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先需要注意的是f1、f2、f3、f4四个变量都是Integer对象引用，所以下面的==运算比较的不是值而是引用。装箱的本质是什么呢？当我们给一个Integer对象赋一个int值的时候，会调用Integer类的静态方法valueOf，如果看看valueOf的源代码就知道发生了什么。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>IntegerCache是Integer的内部类，其代码如下所示：</li></ul><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cache to support the object identity semantics of autoboxing for values between</span></span><br><span class="line"><span class="comment">     * -128 and 127 (inclusive) as required by JLS.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The cache is initialized on first usage.  The size of the cache</span></span><br><span class="line"><span class="comment">     * may be controlled by the &#123;<span class="doctag">@code</span> -XX:AutoBoxCacheMax=&lt;size&gt;&#125; option.</span></span><br><span class="line"><span class="comment">     * During VM initialization, java.lang.Integer.IntegerCache.high property</span></span><br><span class="line"><span class="comment">     * may be set and saved in the private system properties in the</span></span><br><span class="line"><span class="comment">     * sun.misc.VM class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = <span class="number">-128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">            String integerCacheHighPropValue =</span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) <span class="number">-1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> j = low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            assert IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> IntegerCache() &#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>简单的说，如果整型字面量的值在-128到127之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象，所以上面的面试题中f1==f2的结果是true，而f3==f4的结果是false</li></ul><h2 id="amp-和-amp-amp-的区别？"><a href="#amp-和-amp-amp-的区别？" class="headerlink" title="&amp;和&amp;&amp;的区别？"></a>&amp;和&amp;&amp;的区别？</h2><p>&amp;运算符有两种用法：(1)按位与；(2)逻辑与。&amp;&amp;运算符是短路与运算。&amp;&amp;之所以称为短路运算是因为，如果&amp;&amp;左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&amp;&amp;而不是&amp;。</p><h2 id="解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。"><a href="#解释内存中的栈-stack-、堆-heap-和方法区-method-area-的用法。" class="headerlink" title="解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。"></a>解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法。</h2><ul><li>通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用JVM中的栈空间。</li><li>而通过new关键字和构造器创建的对象则放在堆空间，堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为Eden、Survivor（又可分为From Survivor和To Survivor）、Tenured；</li><li>方法区和堆都是各个线程共享的内存区域，用于存储已经被JVM加载的类信息、常量、静态变量、JIT编译器编译后的代码等数据；</li><li>程序中的字面量（literal）如直接书写的100、”hello”和常量都是放在常量池中，常量池是方法区的一部分</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String <span class="built_in">s1</span> = new StringBuilder(<span class="string">"go"</span>).append(<span class="string">"od"</span>).toString()<span class="comment">;</span></span><br><span class="line">System.out.println(<span class="built_in">s1</span>.intern() == <span class="built_in">s1</span>)<span class="comment">;</span></span><br><span class="line">String <span class="built_in">s2</span> = new StringBuilder(<span class="string">"ja"</span>).append(<span class="string">"va"</span>).toString()<span class="comment">;</span></span><br><span class="line">System.out.println(<span class="built_in">s2</span>.intern() == <span class="built_in">s2</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="Math-round-11-5-等于多少？Math-round-11-5-等于多少？"><a href="#Math-round-11-5-等于多少？Math-round-11-5-等于多少？" class="headerlink" title="Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？"></a>Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？</h2><p>Math.round(11.5)的返回值是12，Math.round(-11.5)的返回值是-11。四舍五入的原理是在参数上加0.5然后进行下取整。</p><h2 id="switch-是否能作用在byte-上，是否能作用在long-上，是否能作用在String上？"><a href="#switch-是否能作用在byte-上，是否能作用在long-上，是否能作用在String上？" class="headerlink" title="switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？"></a>switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上？</h2><ul><li>在Java 5以前，switch(expr)中，expr只能是byte、short、char、int。</li><li>从Java 5开始，Java中引入了枚举类型，expr也可以是enum类型，</li><li>从Java 7开始，expr还可以是字符串（String）。</li></ul><h2 id="用最有效率的方法计算2乘以8？"><a href="#用最有效率的方法计算2乘以8？" class="headerlink" title="用最有效率的方法计算2乘以8？"></a>用最有效率的方法计算2乘以8？</h2><ul><li>2 &lt;&lt; 3（左移3位相当于乘以2的3次方，右移3位相当于除以2的3次方）。</li></ul><h2 id="数组有没有length-方法？String有没有length-方法？"><a href="#数组有没有length-方法？String有没有length-方法？" class="headerlink" title="数组有没有length()方法？String有没有length()方法？"></a>数组有没有length()方法？String有没有length()方法？</h2><p>数组没有length()方法，有length 的属性。String 有length()方法。JavaScript中，获得字符串的长度是通过length属性得到的，这一点容易和Java混淆。</p><h2 id="两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，这句话对不对？"><a href="#两个对象值相同-x-equals-y-true-，但却可有不同的hash-code，这句话对不对？" class="headerlink" title="两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？"></a>两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对？</h2><p>不对，如果两个对象x和y满足x.equals(y) == true，它们的哈希码（hash code）应当相同。Java对于eqauls方法和hashCode方法是这样规定的：</p><ul><li>如果两个对象相同（equals方法返回true），那么它们的hashCode值一定要相同</li><li>如果两个对象的hashCode相同，它们并不一定相同。</li></ul><h3 id="equals方法介绍："><a href="#equals方法介绍：" class="headerlink" title="equals方法介绍："></a>equals方法介绍：</h3><ul><li>自反性（x.equals(x)必须返回true）</li><li>对称性（x.equals(y)返回true时，y.equals(x)也必须返回true）</li><li>传递性（x.equals(y)和y.equals(z)都返回true时，x.equals(z)也必须返回true）</li><li>一致性（当x和y引用的对象信息没有被修改时，多次调用x.equals(y)应该得到同样的返回值），</li><li>而且对于任何非null值的引用x，x.equals(null)必须返回false。</li></ul><h3 id="实现高质量的equals方法的诀窍包括："><a href="#实现高质量的equals方法的诀窍包括：" class="headerlink" title="实现高质量的equals方法的诀窍包括："></a>实现高质量的equals方法的诀窍包括：</h3><ol><li>使用==操作符检查”参数是否为这个对象的引用”；</li><li>使用instanceof操作符检查”参数是否为正确的类型”；</li><li>对于类中的关键属性，检查参数传入对象的属性是否与之相匹配；</li><li>编写完equals方法后，问自己它是否满足对称性、传递性、一致性；</li><li>重写equals时总是要重写hashCode；</li><li>不要将equals方法参数中的Object对象替换为其他的类型，在重写时不要忘掉@Override注解。</li></ol><h2 id="当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？"><a href="#当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？" class="headerlink" title="当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？"></a>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？</h2><p>是值传递。Java语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。</p><h2 id="String和StringBuilder、StringBuffer的区别？"><a href="#String和StringBuilder、StringBuffer的区别？" class="headerlink" title="String和StringBuilder、StringBuffer的区别？"></a>String和StringBuilder、StringBuffer的区别？</h2><p>Java平台提供了两种类型的字符串：String和StringBuffer/StringBuilder，它们可以储存和操作字符串。其中String是只读字符串，也就意味着String引用的字符串内容是不能被改变的。而StringBuffer/StringBuilder类表示的字符串对象可以直接进行修改。StringBuilder是Java 5中引入的，它和StringBuffer的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized修饰，因此它的效率也比StringBuffer要高。</p><ul><li>String对象的intern方法会得到字符串对象在常量池中对应的版本的引用（如果常量池中有一个字符串与String对象的equals结果是true），如果常量池中没有对应的字符串，则该字符串将被添加到常量池中，然后返回常量池中字符串的引用；</li><li>字符串的+操作其本质是创建了StringBuilder对象进行append操作，然后将拼接后的StringBuilder对象用toString方法处理成String对象，这一点可以用javap -c StringEqualTest.class命令获得class文件对应的JVM字节码指令就可以看出来。</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class StringEqualTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">               String <span class="built_in">s1</span> = <span class="string">"Programming"</span><span class="comment">;</span></span><br><span class="line">        String <span class="built_in">s2</span> = new String(<span class="string">"Programming"</span>)<span class="comment">;</span></span><br><span class="line">        String <span class="built_in">s3</span> = <span class="string">"Program"</span><span class="comment">;</span></span><br><span class="line">        String <span class="built_in">s4</span> = <span class="string">"ming"</span><span class="comment">;</span></span><br><span class="line">        String <span class="built_in">s5</span> = <span class="string">"Program"</span> + <span class="string">"ming"</span><span class="comment">;</span></span><br><span class="line">        String <span class="built_in">s6</span> = <span class="built_in">s3</span> + <span class="built_in">s4</span><span class="comment">;</span></span><br><span class="line">        System.out.println(<span class="built_in">s1</span> == <span class="built_in">s2</span>)<span class="comment">;//false</span></span><br><span class="line">        System.out.println(<span class="built_in">s1</span> == <span class="built_in">s5</span>)<span class="comment">;//true</span></span><br><span class="line">        System.out.println(<span class="built_in">s1</span> == <span class="built_in">s6</span>)<span class="comment">;//false</span></span><br><span class="line">        System.out.println(<span class="built_in">s1</span> == <span class="built_in">s6</span>.intern())<span class="comment">;//true</span></span><br><span class="line">        System.out.println(<span class="built_in">s2</span> == <span class="built_in">s2</span>.intern())<span class="comment">;//false,返回的常量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"><a href="#重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？" class="headerlink" title="重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？"></a>重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？</h2><ul><li>重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</li><li>重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求。</li></ul><h2 id="描述一下JVM加载class文件的原理机制？"><a href="#描述一下JVM加载class文件的原理机制？" class="headerlink" title="描述一下JVM加载class文件的原理机制？"></a>描述一下JVM加载class文件的原理机制？</h2><p>JVM中类的装载是由类加载器（ClassLoader）和它的子类来实现的，Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。 </p><p>由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。当Java程序需要使用某个类时，JVM会确保这个类已经被加载、连接（验证、准备和解析）和初始化。</p><ul><li>类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。</li><li>加载完成后，Class对象还不完整，所以此时的类还不可用。当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。</li><li><p>最后JVM对类进行初始化</p><ul><li>如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类</li><li>如果类中存在初始化语句，就依次执行这些初始化语句。 </li></ul></li><li><p>类加载器包括：</p><ul><li>根加载器（BootStrap），一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）；</li><li>扩展加载器（Extension），从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap</li><li>系统加载器（System），应用类加载器，其父类是Extension。它是应用最广泛的类加载器</li><li>用户自定义类加载器（java.lang.ClassLoader的子类） </li></ul></li><li><p>父亲委托机制<br>从Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM）。PDM更好的保证了Java平台的安全性，在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。JVM不会向Java程序提供对Bootstrap的引用。</p></li></ul><h2 id="抽象类（abstract-class）和接口（interface）有什么异同？"><a href="#抽象类（abstract-class）和接口（interface）有什么异同？" class="headerlink" title="抽象类（abstract class）和接口（interface）有什么异同？"></a>抽象类（abstract class）和接口（interface）有什么异同？</h2><p>抽象类和接口都不能够实例化，但可以定义抽象类和接口类型的引用。一个类如果继承了某个抽象类或者实现了某个接口都需要对其中的抽象方法全部进行实现，否则该类仍然需要被声明为抽象类。接口比抽象类更加抽象，因为抽象类中可以定义构造器，可以有抽象方法和具体方法，而接口中不能定义构造器而且其中的方法全部都是抽象方法。抽象类中的成员可以是private、默认、protected、public的，而接口中的成员全都是public的。抽象类中可以定义成员变量，而接口中定义的成员变量实际上都是常量。有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法。</p><h2 id="静态嵌套类-Static-Nested-Class-和内部类（Inner-Class）的不同？"><a href="#静态嵌套类-Static-Nested-Class-和内部类（Inner-Class）的不同？" class="headerlink" title="静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同？"></a>静态嵌套类(Static Nested Class)和内部类（Inner Class）的不同？</h2><p>Static Nested Class是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="keyword">new</span> Inner(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; <span class="keyword">new</span> Inner(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ava中非静态内部类对象的创建要依赖其外部类对象，上面的面试题中foo和main方法都是静态方法，静态方法中没有this，也就是说没有所谓的外部类对象，因此无法创建内部类对象，如果要在静态方法中创建内部类对象，可以这样做   new Outer().new Inner();</p><h2 id="Java-中会存在内存泄漏吗，请简单描述。"><a href="#Java-中会存在内存泄漏吗，请简单描述。" class="headerlink" title="Java 中会存在内存泄漏吗，请简单描述。"></a>Java 中会存在内存泄漏吗，请简单描述。</h2><p>理论上Java因为有垃圾回收机制（GC）不会存在内存泄露问题（这也是Java被广泛使用于服务器端编程的一个重要原因）；然而在实际开发中，可能会存在无用但可达的对象，这些对象不能被GC回收，因此也会导致内存泄露的发生。例如Hibernate的Session（一级缓存）中的对象属于持久态，垃圾回收器是不会回收这些对象的，然而这些对象中可能存在无用的垃圾对象，如果不及时关闭（close）或清空（flush）一级缓存就可能导致内存泄露。</p><h2 id="GC是什么？为什么要有GC？"><a href="#GC是什么？为什么要有GC？" class="headerlink" title="GC是什么？为什么要有GC？"></a>GC是什么？为什么要有GC？</h2><ul><li>Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。Java程序员不用担心内存管理，因为垃圾收集器会自动进行管理。</li><li>在垃圾收集过程中，可能会将对象移动到不同区域： <ul><li>伊甸园（Eden）：这是对象最初诞生的区域，并且对大多数对象来说，这里是它们唯一存在过的区域。</li><li>幸存者乐园（Survivor）：从伊甸园幸存下来的对象会被挪到这里。 </li><li>终身颐养园（Tenured）：这是足够老的幸存对象的归宿。年轻代收集（Minor-GC）过程是不会触及这个地方的。当年轻代收集不能把对象放进终身颐养园时，就会触发一次完全收集（Major-GC），这里可能还会牵扯到压缩，以便为大对象腾出足够的空间。</li></ul></li></ul><h3 id="与垃圾回收相关的JVM参数："><a href="#与垃圾回收相关的JVM参数：" class="headerlink" title="与垃圾回收相关的JVM参数："></a>与垃圾回收相关的JVM参数：</h3><ol><li>-Xms / -Xmx — 堆的初始大小 / 堆的最大大小</li><li>-Xmn — 堆中年轻代的大小</li><li>-XX:-DisableExplicitGC — 让System.gc()不产生任何作用</li><li>-XX:+PrintGCDetails — 打印GC的细节</li><li>-XX:+PrintGCDateStamps — 打印GC操作的时间戳</li><li>-XX:NewSize / XX:MaxNewSize — 设置新生代大小/新生代最大大小</li><li>-XX:NewRatio — 可以设置老生代和新生代的比例</li><li>-XX:PrintTenuringDistribution — 设置每次新生代GC后输出幸存者乐园中对象年龄的分布</li><li>-XX:InitialTenuringThreshold / -XX:MaxTenuringThreshold：设置老年代阀值的初始值和最大值</li><li>-XX:TargetSurvivorRatio：设置幸存区的目标使用率</li></ol><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.print(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.print(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.print(<span class="string">"a"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.print(<span class="string">"b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        A ab = <span class="keyword">new</span> B();</span><br><span class="line">        ab = <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：1a2b2b。创建对象时构造器的调用顺序是：先初始化静态成员，然后调用父类构造器，再初始化非静态成员，最后调用自身构造器。</p><h2 id="Error和Exception有什么区别"><a href="#Error和Exception有什么区别" class="headerlink" title="Error和Exception有什么区别"></a>Error和Exception有什么区别</h2><p>Error表示系统级的错误和程序不必处理的异常，是恢复不是不可能但很困难的情况下的一种严重问题；比如内存溢出，不可能指望程序能处理这样的情况；Exception表示需要捕捉或者需要程序进行处理的异常，是一种设计或实现问题；也就是说，它表示如果程序运行正常，从不会发生的情况。</p><h2 id="Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？"><a href="#Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？" class="headerlink" title="Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？"></a>Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？</h2><ul><li>在Java中，每个异常都是一个对象，它是Throwable类或其子类的实例。</li><li>一般情况下是用try来执行一段程序，如果系统会抛出（throw）一个异常对象，可以通过它的类型来捕获（catch）它，或通过总是执行代码块（finally）来处理；</li><li>throw语句用来明确地抛出一个异常</li><li>throws用来声明一个方法可能抛出的各种异常（当然声明异常时允许无病呻吟）</li></ul><h2 id="运行时异常与受检异常有何异同？"><a href="#运行时异常与受检异常有何异同？" class="headerlink" title="运行时异常与受检异常有何异同？"></a>运行时异常与受检异常有何异同？</h2><p>异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。Java编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。异常和继承一样，是面向对象程序设计中经常被滥用的东西，在Effective Java中对异常的使用给出了以下指导原则： </p><p>不要将异常处理用于正常的控制流（设计良好的API不应该强迫它的调用者为了正常的控制流而使用异常） </p><ul><li>对可以恢复的情况使用受检异常，对编程错误使用运行时异常 </li><li>避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生） </li><li>优先使用标准的异常 </li><li>每个方法抛出的异常都要有文档 </li><li>保持异常的原子性 </li><li>不要在catch中忽略掉捕获到的异常</li></ul><h2 id="常见的运行时异常"><a href="#常见的运行时异常" class="headerlink" title="常见的运行时异常"></a>常见的运行时异常</h2><ul><li>ArithmeticException（算术异常） </li><li>ClassCastException （类转换异常） </li><li>IllegalArgumentException （非法参数异常） </li><li>IndexOutOfBoundsException （下标越界异常） </li><li>NullPointerException （空指针异常） </li><li>SecurityException （安全异常）</li></ul><h2 id="类ExampleA继承Exception，类ExampleB继承ExampleA。"><a href="#类ExampleA继承Exception，类ExampleB继承ExampleA。" class="headerlink" title="类ExampleA继承Exception，类ExampleB继承ExampleA。"></a>类ExampleA继承Exception，类ExampleB继承ExampleA。</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExampleB(<span class="string">"b"</span>)</span><br><span class="line">&#125; <span class="built_in">catch</span>（ExampleA e）&#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"ExampleA"</span>);</span><br><span class="line">&#125; <span class="built_in">catch</span>（Exception e）&#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"Exception"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输出：ExampleA。（根据里氏代换原则[能使用父类型的地方一定能使用子类型]，抓取ExampleA类型异常的catch块能够抓住try块中抛出的ExampleB类型的异常）</li></ul><h2 id="List、Set、Map是否继承自Collection接口？"><a href="#List、Set、Map是否继承自Collection接口？" class="headerlink" title="List、Set、Map是否继承自Collection接口？"></a>List、Set、Map是否继承自Collection接口？</h2><p>List、Set 是，Map 不是。Map是键值对映射容器，与List和Set有明显的区别，而Set存储的零散的元素且不允许有重复元素（数学中的集合也是如此），List是线性结构的容器，适用于按数值索引访问元素的情形。</p><h2 id="阐述ArrayList、Vector、LinkedList的存储性能和特性。"><a href="#阐述ArrayList、Vector、LinkedList的存储性能和特性。" class="headerlink" title="阐述ArrayList、Vector、LinkedList的存储性能和特性。"></a>阐述ArrayList、Vector、LinkedList的存储性能和特性。</h2><ul><li>ArrayList 和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢。</li><li>Vector中的方法由于添加了synchronized修饰，因此Vector是线程安全的容器，但性能上较ArrayList差，因此已经是Java中的遗留容器</li><li>LinkedList使用双向链表实现存储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。</li><li>但是由于ArrayList和LinkedListed都是非线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类Collections中的synchronizedList方法将其转换成线程安全的容器后再使用。</li></ul><h2 id="Collection和Collections的区别？"><a href="#Collection和Collections的区别？" class="headerlink" title="Collection和Collections的区别？"></a>Collection和Collections的区别？</h2><p>Collection是一个接口，它是Set、List等容器的父接口；Collections是个一个工具类，提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、排序、线程安全化等等。</p><h2 id="List、Map、Set三个接口存取元素时，各有什么特点？"><a href="#List、Map、Set三个接口存取元素时，各有什么特点？" class="headerlink" title="List、Map、Set三个接口存取元素时，各有什么特点？"></a>List、Map、Set三个接口存取元素时，各有什么特点？</h2><ul><li>List以特定索引来存取元素，可以有重复元素。</li><li>Set不能存放重复元素（用对象的equals()方法来区分元素是否重复）。</li><li>Map保存键值对（key-value pair）映射，映射关系可以是一对一或多对一</li><li>Set和Map容器都有基于哈希存储和排序树的两种实现版本，基于哈希存储的版本理论存取时间复杂度为O(1)</li></ul><h2 id="TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort-方法如何比较元素"><a href="#TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort-方法如何比较元素" class="headerlink" title="TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素"></a>TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素</h2><ul><li>TreeSet要求存放的对象所属的类必须实现Comparable接口，该接口提供了比较元素的compareTo()方法，当插入元素时会回调该方法比较元素的大小。</li><li>TreeMap要求存放的键值对映射的键必须实现Comparable接口从而根据键对元素进行排序。</li><li>Collections工具类的sort方法有两种重载的形式<ul><li>第一种要求传入的待排序容器中存放的对象比较实现Comparable接口以实现元素的比较</li><li>第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是Comparator接口的子类型（需要重写compare方法实现元素的比较），相当于一个临时定义的排序规则。</li></ul></li></ul><h2 id="Thread类的sleep-方法和对象的wait-方法都可以让线程暂停执行，它们有什么区别"><a href="#Thread类的sleep-方法和对象的wait-方法都可以让线程暂停执行，它们有什么区别" class="headerlink" title="Thread类的sleep()方法和对象的wait()方法都可以让线程暂停执行，它们有什么区别?"></a>Thread类的sleep()方法和对象的wait()方法都可以让线程暂停执行，它们有什么区别?</h2><ul><li>sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复。</li><li>wait()是Object类的方法，调用对象的wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。</li></ul><h2 id="线程的sleep-方法和yield-方法有什么区别？"><a href="#线程的sleep-方法和yield-方法有什么区别？" class="headerlink" title="线程的sleep()方法和yield()方法有什么区别？"></a>线程的sleep()方法和yield()方法有什么区别？</h2><ul><li>sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会</li><li>yield()方法只会给相同优先级或更高优先级的线程以运行的机会； </li><li>线程执行sleep()方法后转入阻塞（blocked）状态，</li><li>而执行yield()方法后转入就绪（ready）状态；</li><li>sleep()方法声明抛出InterruptedException，而yield()方法没有声明任何异常； </li><li>sleep()方法比yield()方法（跟操作系统CPU调度相关）具有更好的可移植性。</li></ul><h2 id="当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？"><a href="#当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？" class="headerlink" title="当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？"></a>当一个线程进入一个对象的synchronized方法A之后，其它线程是否可进入此对象的synchronized方法B？</h2><p>不能。其它线程只能访问该对象的非同步方法，同步方法则不能进入。因为非静态方法上的synchronized修饰符要求执行方法时要获得对象的锁，如果已经进入A方法说明对象锁已经被取走，那么试图进入B方法的线程就只能在等锁池（注意不是等待池哦）中等待对象的锁。</p><h2 id="请说出与线程同步以及线程调度相关的方法。"><a href="#请说出与线程同步以及线程调度相关的方法。" class="headerlink" title="请说出与线程同步以及线程调度相关的方法。"></a>请说出与线程同步以及线程调度相关的方法。</h2><ul><li>wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁； </li><li>sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常； </li><li>notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关； </li><li>notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；</li></ul><h2 id="编写多线程程序有几种实现方式？"><a href="#编写多线程程序有几种实现方式？" class="headerlink" title="编写多线程程序有几种实现方式？"></a>编写多线程程序有几种实现方式？</h2><ul><li>一种是继承Thread类；</li><li>另一种是实现Runnable接口</li><li>实现Callable接口，该接口中的call方法可以在线程执行结束时产生一个返回值</li></ul><h2 id="什么是线程池（thread-pool）"><a href="#什么是线程池（thread-pool）" class="headerlink" title="什么是线程池（thread pool）"></a>什么是线程池（thread pool）</h2><p>在面向对象编程中，创建和销毁对象是很费时间的，因为创建一个对象要获取内存资源或者其它更多资源。在Java中更是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。所以提高服务程序效率的一个手段就是尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这就是”池化资源”技术产生的原因。</p><p>线程池顾名思义就是事先创建若干个可执行的线程放入一个池（容器）中，需要的时候从池中获取线程不用自行创建，使用完毕不需要销毁线程而是放回池中，从而减少创建和销毁线程对象的开销。<br>Java 5+中的Executor接口定义一个执行线程的工具。它的子类型即线程池接口是ExecutorService。要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，因此在工具类Executors面提供了一些静态工厂方法，生成一些常用的线程池，如下所示： </p><ul><li>newSingleThreadExecutor：创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</li><li>newFixedThreadPool：创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。 </li><li>newCachedThreadPool：创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。 </li><li>newScheduledThreadPool：创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。 </li><li>newSingleThreadExecutor：创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。</li></ul><h2 id="线程的基本状态以及状态之间的关系？"><a href="#线程的基本状态以及状态之间的关系？" class="headerlink" title="线程的基本状态以及状态之间的关系？"></a>线程的基本状态以及状态之间的关系？</h2><p><a href="https://img-blog.csdn.net/20150408002007838" target="_blank" rel="noopener"></a></p><ul><li>其中Running表示运行状态，</li><li>Runnable表示就绪状态（万事俱备，只欠CPU），</li><li>Blocked表示阻塞状态，阻塞状态又有多种情况，<ul><li>可能是因为调用wait()方法进入等待池，</li><li>也可能是执行同步方法或同步代码块进入等锁池，</li><li>或者是调用了sleep()方法或join()方法等待休眠或其他线程结束，或是因为发生了I/O中断。</li></ul></li></ul><h2 id="简述synchronized-和java-util-concurrent-locks-Lock的异同？"><a href="#简述synchronized-和java-util-concurrent-locks-Lock的异同？" class="headerlink" title="简述synchronized 和java.util.concurrent.locks.Lock的异同？"></a>简述synchronized 和java.util.concurrent.locks.Lock的异同？</h2><p>Lock是Java 5以后引入的新的API，和关键字synchronized相比主要相同点：</p><ul><li>Lock 能完成synchronized所实现的所有功能；</li><li>Lock有比synchronized更精确的线程语义和更好的性能，而且不强制性的要求一定要获得锁</li><li>synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且最好在finally 块中释放（这是释放外部资源的最好的地方）。</li></ul><h2 id="Java中如何实现序列化，有什么意义？"><a href="#Java中如何实现序列化，有什么意义？" class="headerlink" title="Java中如何实现序列化，有什么意义？"></a>Java中如何实现序列化，有什么意义？</h2><p>序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。 </p><p>要实现序列化，需要让一个类实现Serializable接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过writeObject(Object)方法就可以将实现对象写出（即保存其状态）；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过readObject方法从流中读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆</p><h2 id="阐述JDBC操作数据库的步骤。"><a href="#阐述JDBC操作数据库的步骤。" class="headerlink" title="阐述JDBC操作数据库的步骤。"></a>阐述JDBC操作数据库的步骤。</h2><ul><li>加载驱动</li><li>创建连接</li><li>创建语句</li><li>执行语句</li><li>处理结果</li><li>关闭资源</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line"><span class="built_in"> Connection </span>con = DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>, <span class="string">"scott"</span>, <span class="string">"tiger"</span>);</span><br><span class="line">PreparedStatement ps = con.prepareStatement(<span class="string">"select * from emp where sal between ? and ?"</span>);</span><br><span class="line">ps.setInt(1, 1000);</span><br><span class="line">ps.setInt(2, 3000);</span><br><span class="line">ResultSet rs = ps.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">    System.out.println(rs.getInt(<span class="string">"empno"</span>) + <span class="string">" - "</span> + rs.getString(<span class="string">"ename"</span>));</span><br><span class="line">&#125;</span><br><span class="line">finally &#123;</span><br><span class="line">    <span class="keyword">if</span>(con != <span class="literal">null</span>) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关闭外部资源的顺序应该和打开的顺序相反，也就是说先关闭ResultSet、再关闭Statement、在关闭Connection。</li></ul><h2 id="Statement和PreparedStatement有什么区别？哪个性能更好？"><a href="#Statement和PreparedStatement有什么区别？哪个性能更好？" class="headerlink" title="Statement和PreparedStatement有什么区别？哪个性能更好？"></a>Statement和PreparedStatement有什么区别？哪个性能更好？</h2><ul><li>PreparedStatement接口代表预编译的语句，它主要的优势在于可以减少SQL的编译错误并增加SQL的安全性（减少SQL注射攻击的可能性）；</li><li>PreparedStatement中的SQL语句是可以带参数的，避免了用字符串连接拼接SQL语句的麻烦和不安全；</li><li>当批量处理SQL或频繁执行相同的查询时，PreparedStatement有明显的性能上的优势，由于数据库可以将编译优化后的SQL语句缓存起来，下次执行相同结构的语句时就会很快（不用再次编译和生成执行计划）。</li></ul><h2 id="使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？"><a href="#使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？" class="headerlink" title="使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？"></a>使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？</h2><ul><li>要提升读取数据的性能，可以指定通过结果集（ResultSet）对象的setFetchSize()方法指定每次抓取的记录数（典型的空间换时间策略）</li><li>要提升更新数据的性能可以使用PreparedStatement语句构建批处理，将若干SQL语句置于一个批处理中执行。</li></ul><h2 id="在进行数据库编程时，连接池有什么作用？"><a href="#在进行数据库编程时，连接池有什么作用？" class="headerlink" title="在进行数据库编程时，连接池有什么作用？"></a>在进行数据库编程时，连接池有什么作用？</h2><p>由于创建连接和释放连接都有很大的开销（尤其是数据库服务器不在本地时，每次建立连接都需要进行TCP的三次握手，释放连接需要进行TCP四次握手，造成的开销是不可忽视的），为了提升系统访问数据库的性能，可以事先创建若干连接置于连接池中，需要时直接从连接池获取，使用结束时归还连接池而不必关闭连接，从而避免频繁创建和释放连接所造成的开销。</p><h2 id="事务的ACID是指什么？"><a href="#事务的ACID是指什么？" class="headerlink" title="事务的ACID是指什么？"></a>事务的ACID是指什么？</h2><ul><li>原子性(Atomic)：事务中各项操作，要么全做要么全不做，</li><li>一致性(Consistent)：事务结束后系统状态是一致的；</li><li>隔离性(Isolated)：并发执行的事务彼此无法看到对方的中间状态； </li><li>持久性(Durable)：事务完成后所做的改动都会被持久化，即使发生灾难性的失败。通过日志和同步备份可以在故障发生后重建数据。</li></ul><p>只有存在并发数据访问时才需要事务。当多个事务访问同一数据时，可能会存在5类问题，包括3类数据读取问题（脏读、不可重复读和幻读）和2类数据更新问题（第1类丢失更新和第2类丢失更新）。</p><ul><li>脏读（Dirty Read）：A事务读取B事务尚未提交的数据并在此基础上操作，而B事务执行回滚，那么A读取到的数据就是脏数据。</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-6/87650429.jpg" alt=""></p><ul><li>不可重复读（Unrepeatable Read）：事务A重新读取前面读取过的数据，发现该数据已经被另一个已提交的事务B修改过了。</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-6/95804465.jpg" alt=""></p><ul><li>幻读（Phantom Read）：事务A重新执行一个查询，返回一系列符合查询条件的行，发现其中插入了被事务B提交的行</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-6/62660957.jpg" alt=""></p><ul><li>第1类丢失更新：事务A撤销时，把已经提交的事务B的更新数据覆盖了。</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-6/96595208.jpg" alt=""></p><ul><li>第2类丢失更新：事务A覆盖事务B已经提交的数据，造成事务B所做的操作丢失。</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-6/65275664.jpg" alt=""></p><p>数据并发访问所产生的问题，在有些场景下可能是允许的，但是有些场景下可能就是致命的，数据库通常会通过锁机制来解决数据并发访问问题，按锁定对象不同可以分为表级锁和行级锁；按并发事务锁定关系可以分为共享锁和独占锁：</p><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-6/82828779.jpg" alt=""></p><h2 id="JDBC中如何进行事务处理？"><a href="#JDBC中如何进行事务处理？" class="headerlink" title="JDBC中如何进行事务处理？"></a>JDBC中如何进行事务处理？</h2><ul><li>Connection提供了事务处理的方法，通过调用setAutoCommit(false)可以设置手动提交事务；当事务完成后用commit()显式提交事务；</li><li>如果在事务处理过程中发生异常则通过rollback()进行事务回滚。</li><li>除此之外，从JDBC 3.0中还引入了Savepoint（保存点）的概念，允许通过代码设置保存点并让事务回滚到指定的保存点。 </li></ul><h2 id="JDBC能否处理Blob和Clob？"><a href="#JDBC能否处理Blob和Clob？" class="headerlink" title="JDBC能否处理Blob和Clob？"></a>JDBC能否处理Blob和Clob？</h2><p>Blob是指二进制大对象（Binary Large Object），而Clob是指大字符对象（Character Large Objec），因此其中Blob是为存储大的二进制数据而设计的，而Clob是为存储大的文本数据而设计的。JDBC的PreparedStatement和ResultSet都提供了相应的方法来支持Blob和Clob操作。</p><h2 id="Java中是如何支持正则表达式操作的？"><a href="#Java中是如何支持正则表达式操作的？" class="headerlink" title="Java中是如何支持正则表达式操作的？"></a>Java中是如何支持正则表达式操作的？</h2><p>Java中的String类提供了支持正则表达式操作的方法，包括：matches()、replaceAll()、replaceFirst()、split()。此外，Java中可以用Pattern类表示正则表达式对象，它提供了丰富的API进行各种正则表达式操作。</p><h2 id="简述一下面向对象的”六原则一法则”。"><a href="#简述一下面向对象的”六原则一法则”。" class="headerlink" title="简述一下面向对象的”六原则一法则”。"></a>简述一下面向对象的”六原则一法则”。</h2><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>一个类只做它该做的事情。（单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，就如同葵花宝典或辟邪剑谱的中心思想就八个字”欲练此功必先自宫”，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>软件实体应当对扩展开放，对修改关闭。</p><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p>面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。） </p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>任何时候都可以用子类型替换掉父类型。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>接口要小而专，绝不能大而全</p><h3 id="合成聚合复用原则"><a href="#合成聚合复用原则" class="headerlink" title="合成聚合复用原则"></a>合成聚合复用原则</h3><p>优先使用聚合或合成关系复用代码</p><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>所谓设计模式，就是一套被反复使用的代码设计经验的总结（情境中一个问题经过证实的一个解决方案）。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使人们可以更加简单方便的复用成功的设计和体系结构。将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其设计思路。 </p><ul><li>工厂模式：工厂类可以根据条件生成不同的子类实例，这些子类有一个公共的抽象父类并且实现了相同的方法，但是这些方法针对不同的数据进行了不同的操作（多态方法）。当得到子类的实例后，开发人员可以调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。 </li><li>代理模式：给一个对象提供一个代理对象，并由代理对象控制原对象的引用。实际开发中，按照使用目的的不同，代理可以分为：远程代理、虚拟代理、保护代理、Cache代理、防火墙代理、同步化代理、智能引用代理。 </li><li>适配器模式：把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起使用的类能够一起工作。 </li><li>模板方法模式：提供一个抽象类，将部分逻辑以具体方法或构造器的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法（多态实现），从而实现不同的业务逻辑。 </li></ul><h2 id="什么是UML"><a href="#什么是UML" class="headerlink" title="什么是UML"></a>什么是UML</h2><p>UML是统一建模语言（Unified Modeling Language）的缩写，它发表于1997年，综合了当时已经存在的面向对象的建模语言、方法和过程，是一个支持模型化和软件系统开发的图形化语言，为软件开发的所有阶段提供模型化和可视化支持。使用UML可以帮助沟通与交流，辅助应用设计和文档的生成，还能够阐释系统的结构和行为。</p><h2 id="UML中有哪些常用的图？"><a href="#UML中有哪些常用的图？" class="headerlink" title="UML中有哪些常用的图？"></a>UML中有哪些常用的图？</h2><p>UML定义了多种图形化的符号来描述软件系统部分或全部的静态结构和动态结构，包括：用例图（use case diagram）、类图（class diagram）、时序图（sequence diagram）、协作图（collaboration diagram）、状态图（statechart diagram）、活动图（activity diagram）、构件图（component diagram）、部署图（deployment diagram）等。在这些图形化符号中，有三种图最为重要，分别是：用例图（用来捕获需求，描述系统的功能，通过该图可以迅速的了解系统的功能模块及其关系）、类图（描述类以及类与类之间的关系，通过该图可以快速了解系统）、时序图（描述执行特定任务时对象之间的交互关系以及执行顺序，通过该图可以了解对象能接收的消息也就是说对象能够向外界提供的服务）。</p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.学习笔记-docker基本概念</title>
      <link href="/2018/01/04/docker/"/>
      <url>/2018/01/04/docker/</url>
      <content type="html"><![CDATA[<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>容器就是将软件打包成标准化单元，以用于开发、交付和部署。</p><ul><li>容器镜像是轻量的、可执行的独立软件包 ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。</li><li>容器化软件适用于基于Linux和Windows的应用，在任何环境中都能够始终如一地运行。</li><li>容器赋予了软件独立性　，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。</li></ul><h3 id="容器虚拟化"><a href="#容器虚拟化" class="headerlink" title="容器虚拟化"></a>容器虚拟化</h3><p>是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。</p><h3 id="虚拟机技术"><a href="#虚拟机技术" class="headerlink" title="虚拟机技术"></a>虚拟机技术</h3><p>是虚拟出一套硬件后，在其上运行一个完整操作系统。因此容器的隔离级别会稍低一些。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul><li>Docker 是世界领先的软件容器平台。</li><li>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核 的cgroup，namespace，以及AUFS类的UnionFS等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进 程，因此也称其为容器。</li><li>Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。</li><li>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</li></ul><h3 id="Docker容器的特点"><a href="#Docker容器的特点" class="headerlink" title="Docker容器的特点"></a>Docker容器的特点</h3><ul><li>轻量，在一台机器上运行的多个 Docker 容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。</li><li>标准，Docker 容器基于开放式标准，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。</li><li>安全，Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。</li><li>给软件提供一致的运行环境</li><li>更快速的启动时间</li><li>隔离性</li><li>弹性伸缩，快速扩展</li><li>迁移方便</li><li>持续交付和部署</li></ul><h2 id="容器与虚拟机"><a href="#容器与虚拟机" class="headerlink" title="容器与虚拟机"></a>容器与虚拟机</h2><p> 容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。</p><p> 容器是一个应用层抽象，用于将代码和依赖资源打包在一起。 多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行 。与虚拟机相比， 容器占用的空间较少（容器镜像大小通常只有几十兆），瞬间就能完成启动。</p><p> 虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。 管理程序允许多个 VM 在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此 占用大量空间 。而且 VM 启动也十分缓慢 。</p><h2 id="Docker的基本概念"><a href="#Docker的基本概念" class="headerlink" title="Docker的基本概念"></a>Docker的基本概念</h2><h3 id="镜像Image"><a href="#镜像Image" class="headerlink" title="镜像Image"></a>镜像Image</h3><p> 一个特殊的文件系统，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而Docker 镜像（Image），就相当于是一个 root 文件系统。</p><p> Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p> Docker 设计时，就充分利用 Union FS的技术，将其设计为 分层存储的架构 。 镜像实际是由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</p><h3 id="容器Container"><a href="#容器Container" class="headerlink" title="容器Container"></a>容器Container</h3><p> 镜像运行时的实体</p><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等 。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。</p><h3 id="仓库Repository"><a href="#仓库Repository" class="headerlink" title="仓库Repository"></a>仓库Repository</h3><p>集中存放镜像文件的地方</p><p>镜像仓库是Docker用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。</p><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Registry 公开服务</a>，和本地仓库</p><h2 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h2><h3 id="使用-yum-安装（CentOS-7下）"><a href="#使用-yum-安装（CentOS-7下）" class="headerlink" title="使用 yum 安装（CentOS 7下）"></a>使用 yum 安装（CentOS 7下）</h3><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。<br>通过 uname -r 命令查看你当前的内核版本 </p><ul><li>安装</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> docker-io</span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker <span class="literal">start</span></span><br></pre></td></tr></table></figure><ul><li>测试运行</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> hello world</span></span><br></pre></td></tr></table></figure><ul><li>镜像加速</li></ul><p>新版的 Docker 使用 /etc/docker/daemon.json（Linux）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Build（构建镜像） ： 镜像就像是集装箱包括文件以及运行环境等等资源。</li><li>Ship（运输镜像） ：主机和仓库间运输，这里的仓库就像是超级码头一样。</li><li>Run （运行镜像） ：运行的镜像就是一个容器，容器就是运行程序的地方。- </li></ul><h3 id="使用Tomcat镜像"><a href="#使用Tomcat镜像" class="headerlink" title="使用Tomcat镜像"></a>使用Tomcat镜像</h3><ul><li>下载tomcat镜像</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@192</span> ~]<span class="meta"># docker pull tomcat</span></span><br></pre></td></tr></table></figure><ul><li>启动</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> <span class="comment">--name tomcat -p 8080:8080 -d tomcat</span></span><br></pre></td></tr></table></figure><ul><li>查看容器</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@192</span> ~]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES</span><br><span class="line"><span class="number">4431</span>f5eb99df        tomcat              <span class="string">"catalina.sh run"</span>   <span class="number">3</span> minutes ago       Up <span class="number">3</span> minutes        <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:</span><span class="number">8080</span>-&gt;<span class="number">8080</span>/tcp   tomcat</span><br></pre></td></tr></table></figure><h3 id="关于maven项目的插件"><a href="#关于maven项目的插件" class="headerlink" title="关于maven项目的插件"></a>关于maven项目的插件</h3><p><a href="https://github.com/spotify/docker-maven-plugin" target="_blank" rel="noopener">docker-maven-plugin</a></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>8.sb-原理</title>
      <link href="/2017/12/17/spring-boot-8/"/>
      <url>/2017/12/17/spring-boot-8/</url>
      <content type="html"><![CDATA[<p>见识了SpringBoot为我们做的自动配置，确实方便快捷，但是对于新手来说，如果不大懂SpringBoot内部启动原理，<br>以后难免会吃亏。一起一步步揭开SpringBoot的神秘面纱，让它不在神秘。</p><p>我们开发任何一个Spring Boot项目，都会用到如下的启动类</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.<span class="keyword">class</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码可以看出，Annotation定义（@SpringBootApplication）和类定义（SpringApplication.run）最为耀眼，<br>所以要揭开SpringBoot的神秘面纱，我们要从这两位开始就可以了。</p><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Documented</span></span><br><span class="line"><span class="variable">@Inherited</span></span><br><span class="line"><span class="variable">@SpringBootConfiguration</span></span><br><span class="line"><span class="variable">@EnableAutoConfiguration</span></span><br><span class="line"><span class="variable">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="variable">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line"><span class="variable">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line">public <span class="variable">@interface</span> SpringBootApplication &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>@Configuration(@SpringBootConfiguration点开查看发现里面还是应用了@Configuration)</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>这里的@Configuration对我们来说不陌生，它就是JavaConfig形式的Spring Ioc容器的配置类使用的那个@Configuration，<br>SpringBoot社区推荐使用基于JavaConfig的配置形式，所以，这里的启动类标注了@Configuration之后，本身其实也是一个IoC容器的配置类。</p><p>回顾一下对于一个spring的bean使用xml方式配置的话是如下的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"me.chilam.example.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于Java Config的方式应该是如下的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">me</span><span class="selector-class">.chilam</span><span class="selector-class">.example</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Bean</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Configuration</span>;</span><br><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line"><span class="keyword">public</span> class UserConfig &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Bean</span></span><br><span class="line">    public IUserService userService()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">UserServiceImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何一个标注了@Bean的方法，其返回值将作为一个bean定义注册到Spring的IoC容器，方法名将默认成该bean定义的id。</p><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>@ComponentScan这个注解在Spring中很重要，它对应XML配置中的元素，@ComponentScan的功能其实就是自动扫描并加载符合条件的组件<br>（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。</p><p>我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，<br>则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。</p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>大家是否还记得Spring框架提供的各种名字为@Enable开头的Annotation定义？比如@EnableScheduling、@EnableCaching、<br>@EnableMBeanExport等，@EnableAutoConfiguration的理念和做事方式其实一脉相承，简单概括一下就是，<br>借助@Import的支持，收集和注册特定场景相关的bean定义。</p><ul><li>@EnableScheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器。</li><li>@EnableMBeanExport是通过@Import将JMX相关的bean定义加载到IoC容器。</li></ul><p>而@EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器，仅此而已！</p><p>@EnableAutoConfiguration作为一个复合Annotation,其自身定义关键信息如下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(EnableConfigurationPropertiesImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableConfigurationProperties &#123;</span><br><span class="line">Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>7.sb-jdbcTemplate</title>
      <link href="/2017/12/17/spring-boot-7/"/>
      <url>/2017/12/17/spring-boot-7/</url>
      <content type="html"><![CDATA[<p>本文介绍在Spring Boot基础下配置数据源和通过JdbcTemplate编写数据访问的示例。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a>数据源配置</h2><p>Spring Boot默认数据源配置,spring-boot-starter-jdbc 默认使用tomcat-jdbc数据源，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.driver-class-name</span>=com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.url</span>=jdbc:mysql:<span class="comment">//localhost:3306/boot_db</span></span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.username</span>=root</span><br><span class="line">spring<span class="selector-class">.datasource</span><span class="selector-class">.password</span>=test123456</span><br></pre></td></tr></table></figure><h2 id="初始化库表"><a href="#初始化库表" class="headerlink" title="初始化库表"></a>初始化库表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">id</span>   <span class="built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">  age  <span class="built_in">INT</span>          <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="编写dao类"><a href="#编写dao类" class="headerlink" title="编写dao类"></a>编写dao类</h2><ul><li>IUserDao接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.chilam.vo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDAO</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUsers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserDaoImpl实现类</li></ul><p>Spring的jdbcTemplate是自动配置的，可以直接使用@Autowried自动注入</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.chilam.vo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">IUserDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接注入使用即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; selectUsers() &#123;</span><br><span class="line">       <span class="function"><span class="keyword">return</span> jdbcTemplate.<span class="title">query</span><span class="params">(<span class="string">"SELECT * FROM t_user"</span>, <span class="keyword">new</span> RowMapper&lt;User&gt;()</span> </span>&#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="function">User <span class="title">mapRow</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">               User user = <span class="keyword">new</span> User();</span><br><span class="line">               user.setId(resultSet.getLong(<span class="string">"id"</span>));</span><br><span class="line">               user.setName(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">               user.setAge(resultSet.getInt(<span class="string">"age"</span>));</span><br><span class="line">               <span class="keyword">return</span> user;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"INSERT INTO t_user(name,age) VALUE (?,?)"</span>,user.getName(),user.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> jdbcTemplate.<span class="title">update</span><span class="params">(<span class="string">"DELETE FROM t_user WHERE id=?"</span>,id)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写Service类"><a href="#编写Service类" class="headerlink" title="编写Service类"></a>编写Service类</h2><ul><li>IUserService接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.chilam.vo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeUserById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserServiceImpl实现类</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">me</span><span class="selector-class">.chilam</span><span class="selector-class">.service</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">me</span><span class="selector-class">.chilam</span><span class="selector-class">.dao</span><span class="selector-class">.IUserDAO</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">me</span><span class="selector-class">.chilam</span><span class="selector-class">.vo</span><span class="selector-class">.User</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.beans</span><span class="selector-class">.factory</span><span class="selector-class">.annotation</span><span class="selector-class">.Autowired</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.stereotype</span><span class="selector-class">.Service</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.List</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Service</span></span><br><span class="line"><span class="keyword">public</span> class UserServiceImpl implements IUserService &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Autowired</span></span><br><span class="line">    IUserDAO userDAO;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Override</span></span><br><span class="line">    public List&lt;User&gt; getAllUsers() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">userDAO</span><span class="selector-class">.selectUsers</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Override</span></span><br><span class="line">    public int addUser(User user) &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">userDAO</span><span class="selector-class">.insertUser</span>(<span class="selector-tag">user</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Override</span></span><br><span class="line">    public int removeUserById(Long id) &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">userDAO</span><span class="selector-class">.deleteUserById</span>(<span class="selector-tag">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写控制类"><a href="#编写控制类" class="headerlink" title="编写控制类"></a>编写控制类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> me.chilam.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> me.chilam.vo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"users"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"获取用户列表"</span>, notes=<span class="meta-string">"获取用户列表的数据"</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&#123;<span class="meta-string">""</span>&#125;, method= RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; getUserList() &#123;</span><br><span class="line">        List&lt;User&gt; r = userService.getAllUsers();</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"创建用户"</span>, notes=<span class="meta-string">"根据User对象创建用户"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"user"</span>, value = <span class="meta-string">"用户详细实体user"</span>, required = true, dataType = <span class="meta-string">"User"</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">""</span>, method=RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String postUser(<span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">        userService.addUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"删除用户"</span>, notes=<span class="meta-string">"根据url的id来指定删除对象"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户ID"</span>, required = true, dataType = <span class="meta-string">"Long"</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String deleteUser(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        userService.removeUserById(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义数据源配置"><a href="#自定义数据源配置" class="headerlink" title="自定义数据源配置"></a>自定义数据源配置</h2><ul><li>使用druid数据源，添加依赖如下：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Druid配置类</li></ul><p>如下的配置，Spring boot会智能适配jdbcTemplate</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用Spring自定义环境变量</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(destroyMethod = <span class="meta-string">"close"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource dataSource()&#123;</span><br><span class="line">        DruidDataSource dataSource = new DruidDataSource();</span><br><span class="line">        dataSource.setUrl(environment.getProperty(<span class="string">"spring.datasource.url"</span>));</span><br><span class="line">        dataSource.setUsername(environment.getProperty(<span class="string">"spring.datasource.username"</span>));<span class="comment">//用户名</span></span><br><span class="line">        dataSource.setPassword(environment.getProperty(<span class="string">"spring.datasource.password"</span>));<span class="comment">//密码</span></span><br><span class="line">        dataSource.setDriverClassName(environment.getProperty(<span class="string">"spring.datasource.driver-class-name"</span>));</span><br><span class="line">        dataSource.setInitialSize(<span class="number">2</span>);<span class="comment">//初始化时建立物理连接的个数</span></span><br><span class="line">        dataSource.setMaxActive(<span class="number">20</span>);<span class="comment">//最大连接池数量</span></span><br><span class="line">        dataSource.setMinIdle(<span class="number">0</span>);<span class="comment">//最小连接池数量</span></span><br><span class="line">        dataSource.setMaxWait(<span class="number">60000</span>);<span class="comment">//获取连接时最大等待时间，单位毫秒。</span></span><br><span class="line">        dataSource.setValidationQuery(<span class="string">"SELECT 1"</span>);<span class="comment">//用来检测连接是否有效的sql</span></span><br><span class="line">        dataSource.setTestOnBorrow(<span class="literal">false</span>);<span class="comment">//申请连接时执行validationQuery检测连接是否有效</span></span><br><span class="line">        dataSource.setTestWhileIdle(<span class="literal">true</span>);<span class="comment">//建议配置为true，不影响性能，并且保证安全性。</span></span><br><span class="line">        dataSource.setPoolPreparedStatements(<span class="literal">false</span>);<span class="comment">//是否缓存preparedStatement，也就是PSCache</span></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>6.sb-DevTools</title>
      <link href="/2017/12/17/spring-boot-6/"/>
      <url>/2017/12/17/spring-boot-6/</url>
      <content type="html"><![CDATA[<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot开发插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将依赖关系标记为可选<optional>true</optional>是一种最佳做法，可以防止使用项目将devtools传递性地应用于其他模块。</p><h2 id="默认属性"><a href="#默认属性" class="headerlink" title="默认属性"></a>默认属性</h2><p>在Spring Boot集成Thymeleaf时，spring.thymeleaf.cache属性设置为false可以禁用模板引擎编译的缓存结果。<br>现在，devtools会自动帮你做到这些，禁用所有模板的缓存，包括Thymeleaf, Freemarker, Groovy Templates, Velocity, Mustache等。<br>更多的默认配置可以查看org.springframework.boot.devtools.env.DevToolsPropertyDefaultsPostProcessor</p><h2 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h2><p>自动重启的原理在于spring boot使用两个classloader：不改变的类（如第三方jar）由base类加载器加载，正在开发的类由restart类加载器加载。<br>应用重启时，restart类加载器被扔掉重建，而base类加载器不变，这种方法意味着应用程序重新启动通常比“冷启动”快得多，因为base类加载器已经可用并已填充。</p><p>所以，当我们开启devtools后，classpath中的文件变化会导致应用自动重启。<br>当然不同的IDE效果不一样，Eclipse中保存文件即可引起classpath更新(注：需要打开自动编译)，<br>从而触发重启。而IDEA则需要自己手动CTRL+F9重新编译一下（感觉IDEA这种更好，不然每修改一个地方就重启,会很卡的）</p><h2 id="排除静态资源文件"><a href="#排除静态资源文件" class="headerlink" title="排除静态资源文件"></a>排除静态资源文件</h2><p>静态资源文件在改变之后有时候没必要触发应用程序重启，例如thymeleaf模板文件就可以实时编辑，默认情况下，更改/META-INF/maven, /META-INF/resources ,/resources ,/static ,/public<br>或/templates下的资源不会触发重启，而是触发live reload（devtools内嵌了一个LiveReload server，当资源发生改变时，浏览器刷新,下面会介绍）。</p><p>可以使用spring.devtools.restart.exclude属性配置，例如</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.devtools</span><span class="selector-class">.restart</span><span class="selector-class">.exclude</span>=static<span class="comment">/**,public/**</span></span><br></pre></td></tr></table></figure><p>如果想保留默认配置，同时增加新的配置，则可使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.devtools</span><span class="selector-class">.restart</span><span class="selector-class">.additional-exclude</span>=</span><br></pre></td></tr></table></figure><h2 id="观察额外的路径"><a href="#观察额外的路径" class="headerlink" title="观察额外的路径"></a>观察额外的路径</h2><p>如果你想观察不在classpath中的路径的文件变化并触发重启，则可以配置 spring.devtools.restart.additional-paths 属性。</p><h2 id="关闭自动重启"><a href="#关闭自动重启" class="headerlink" title="关闭自动重启"></a>关闭自动重启</h2><p>设置 spring.devtools.restart.enabled 属性为false，可以关闭该特性。可以在application.properties中设置，也可以通过设置环境变量的方式。</p><h2 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a>LiveReload</h2><p>DevTools内置了一个LiveReload服务,可以在资源变化时用来触发浏览器刷新。当然这个需要你浏览器安装了LiveReload插件，并且启动这个插件才行。</p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5.sb-Swagger</title>
      <link href="/2017/12/17/spring-boot-5/"/>
      <url>/2017/12/17/spring-boot-5/</url>
      <content type="html"><![CDATA[<h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> org.springframework.context.annotation.Bean;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> org.springframework.context.annotation.Configuration;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> springfox.documentation.builders.PathSelectors;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> springfox.documentation.service.ApiInfo;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> springfox.documentation.spi.DocumentationType;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    <span class="keyword">public</span> Docket createRestApi() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"me.chilam.web"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo apiInfo() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</span><br><span class="line">                .description(<span class="string">"测试描述信息"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://localhost:8080/"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;<span class="meta-string">"me.chilam.**"</span>&#125;)</span></span><br><span class="line"><span class="comment">//引入Swagger的配置</span></span><br><span class="line"><span class="meta">@Import(SwaggerConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.<span class="keyword">class</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Restful控制器"><a href="#Restful控制器" class="headerlink" title="Restful控制器"></a>Restful控制器</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParams;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> me.chilam.vo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"users"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    static Map&lt;<span class="built_in">Long</span>, User&gt; users = Collections.synchronizedMap(new HashMap&lt;<span class="built_in">Long</span>, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"获取用户列表"</span>, notes=<span class="meta-string">""</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=&#123;<span class="meta-string">""</span>&#125;, method= RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; getUserList() &#123;</span><br><span class="line">        List&lt;User&gt; r = new ArrayList&lt;&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"创建用户"</span>, notes=<span class="meta-string">"根据User对象创建用户"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"user"</span>, value = <span class="meta-string">"用户详细实体user"</span>, required = true, dataType = <span class="meta-string">"User"</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">""</span>, method=RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String postUser(<span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"获取用户详细信息"</span>, notes=<span class="meta-string">"根据url的id来获取用户详细信息"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户ID"</span>, required = true, dataType = <span class="meta-string">"Long"</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> User getUser(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        <span class="keyword">return</span> users.<span class="keyword">get</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"更新用户详细信息"</span>, notes=<span class="meta-string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户ID"</span>, required = true, dataType = <span class="meta-string">"Long"</span>)</span>,</span><br><span class="line">            <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"user"</span>, value = <span class="meta-string">"用户详细实体user"</span>, required = true, dataType = <span class="meta-string">"User"</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> String putUser(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id, <span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">        User u = users.<span class="keyword">get</span>(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value=<span class="meta-string">"删除用户"</span>, notes=<span class="meta-string">"根据url的id来指定删除对象"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"用户ID"</span>, required = true, dataType = <span class="meta-string">"Long"</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span></span><br><span class="line">    <span class="keyword">public</span> String deleteUser(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="观察启动日志中Swagger"><a href="#观察启动日志中Swagger" class="headerlink" title="观察启动日志中Swagger"></a>观察启动日志中Swagger</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span>-<span class="number">12</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">13</span>:<span class="number">16.606</span>  INFO <span class="number">952</span> --- [           main] s<span class="selector-class">.w</span><span class="selector-class">.s</span><span class="selector-class">.m</span><span class="selector-class">.m</span><span class="selector-class">.a</span><span class="selector-class">.RequestMappingHandlerMapping</span> : Mapped <span class="string">"&#123;[/swagger-resources/configuration/ui]&#125;"</span> onto public org<span class="selector-class">.springframework</span><span class="selector-class">.http</span><span class="selector-class">.ResponseEntity</span>&lt;springfox<span class="selector-class">.documentation</span><span class="selector-class">.swagger</span><span class="selector-class">.web</span><span class="selector-class">.UiConfiguration</span>&gt; springfox<span class="selector-class">.documentation</span><span class="selector-class">.swagger</span><span class="selector-class">.web</span><span class="selector-class">.ApiResourceController</span><span class="selector-class">.uiConfiguration</span>()</span><br><span class="line"><span class="number">2017</span>-<span class="number">12</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">13</span>:<span class="number">16.607</span>  INFO <span class="number">952</span> --- [           main] s<span class="selector-class">.w</span><span class="selector-class">.s</span><span class="selector-class">.m</span><span class="selector-class">.m</span><span class="selector-class">.a</span><span class="selector-class">.RequestMappingHandlerMapping</span> : Mapped <span class="string">"&#123;[/swagger-resources]&#125;"</span> onto public org<span class="selector-class">.springframework</span><span class="selector-class">.http</span><span class="selector-class">.ResponseEntity</span>&lt;java<span class="selector-class">.util</span><span class="selector-class">.List</span>&lt;springfox<span class="selector-class">.documentation</span><span class="selector-class">.swagger</span><span class="selector-class">.web</span><span class="selector-class">.SwaggerResource</span>&gt;&gt; springfox<span class="selector-class">.documentation</span><span class="selector-class">.swagger</span><span class="selector-class">.web</span><span class="selector-class">.ApiResourceController</span><span class="selector-class">.swaggerResources</span>()</span><br><span class="line"><span class="number">2017</span>-<span class="number">12</span>-<span class="number">25</span> <span class="number">09</span>:<span class="number">13</span>:<span class="number">16.607</span>  INFO <span class="number">952</span> --- [           main] s<span class="selector-class">.w</span><span class="selector-class">.s</span><span class="selector-class">.m</span><span class="selector-class">.m</span><span class="selector-class">.a</span><span class="selector-class">.RequestMappingHandlerMapping</span> : Mapped <span class="string">"&#123;[/swagger-resources/configuration/security]&#125;"</span> onto public org<span class="selector-class">.springframework</span><span class="selector-class">.http</span><span class="selector-class">.ResponseEntity</span>&lt;springfox<span class="selector-class">.documentation</span><span class="selector-class">.swagger</span><span class="selector-class">.web</span><span class="selector-class">.SecurityConfiguration</span>&gt; springfox<span class="selector-class">.documentation</span><span class="selector-class">.swagger</span><span class="selector-class">.web</span><span class="selector-class">.ApiResourceController</span><span class="selector-class">.securityConfiguration</span>()</span><br></pre></td></tr></table></figure><h2 id="访问Swagger-UI"><a href="#访问Swagger-UI" class="headerlink" title="访问Swagger UI"></a>访问Swagger UI</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//localhost:8080/swagger-ui.html</span></span><br></pre></td></tr></table></figure><p><img src="http://orkt468tj.bkt.clouddn.com/17-12-25/95941782.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4.sb-日志</title>
      <link href="/2017/12/17/spring-boot-4/"/>
      <url>/2017/12/17/spring-boot-4/</url>
      <content type="html"><![CDATA[<h2 id="默认日志"><a href="#默认日志" class="headerlink" title="默认日志"></a>默认日志</h2><p>Spring Boot在所有内部日志中使用Commons Logging，但是默认配置也提供了对常用日志的支持，<br>如：Java Util Logging，Log4J, Log4J2和Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。</p><p>SLF4J——Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。<br>Java日志框架众多——常用的有java.util.logging, log4j, logback，commons-logging,<br>Spring框架使用的是Jakarta Commons Logging API (JCL)。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的<br>——它提供了各类日志框架的binding。</p><p>Logback是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。</p><p>默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。在运行应用程序和其他例子时，<br>你应该已经看到很多INFO级别的日志了。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">"C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\b</span>in<span class="symbol">\j</span>ava" "-javaagent:E:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>etBrains<span class="symbol">\I</span>ntelliJ IDEA 2017.3.1<span class="symbol">\l</span>ib<span class="symbol">\i</span>dea_rt.jar=56049:E:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>etBrains<span class="symbol">\I</span>ntelliJ IDEA 2017.3.1<span class="symbol">\b</span>in" -Dfile.encoding=UTF-8 -classpath "C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\c</span>harsets.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\d</span>eploy.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\a</span>ccess-bridge-64.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\c</span>ldrdata.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\d</span>nsns.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\j</span>access.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\j</span>fxrt.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\l</span>ocaledata.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\n</span>ashorn.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\s</span>unec.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\s</span>unjce_provider.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\s</span>unmscapi.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\s</span>unpkcs11.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\e</span>xt<span class="symbol">\z</span>ipfs.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\j</span>avaws.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\j</span>ce.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\j</span>fr.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\j</span>fxswt.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\j</span>sse.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\m</span>anagement-agent.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\p</span>lugin.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\r</span>esources.jar;C:<span class="symbol">\P</span>rogram Files<span class="symbol">\J</span>ava<span class="symbol">\j</span>dk1.8.0_151<span class="symbol">\j</span>re<span class="symbol">\l</span>ib<span class="symbol">\r</span>t.jar;E:<span class="symbol">\c</span>odes<span class="symbol">\j</span>ava<span class="symbol">\s</span>pring-boot-demo<span class="symbol">\t</span>arget<span class="symbol">\c</span>lasses;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\b</span>oot<span class="symbol">\s</span>pring-boot-starter-web<span class="symbol">\1</span>.5.9.RELEASE<span class="symbol">\s</span>pring-boot-starter-web-1.5.9.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\b</span>oot<span class="symbol">\s</span>pring-boot-starter<span class="symbol">\1</span>.5.9.RELEASE<span class="symbol">\s</span>pring-boot-starter-1.5.9.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\b</span>oot<span class="symbol">\s</span>pring-boot<span class="symbol">\1</span>.5.9.RELEASE<span class="symbol">\s</span>pring-boot-1.5.9.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\b</span>oot<span class="symbol">\s</span>pring-boot-autoconfigure<span class="symbol">\1</span>.5.9.RELEASE<span class="symbol">\s</span>pring-boot-autoconfigure-1.5.9.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\b</span>oot<span class="symbol">\s</span>pring-boot-starter-logging<span class="symbol">\1</span>.5.9.RELEASE<span class="symbol">\s</span>pring-boot-starter-logging-1.5.9.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\c</span>h<span class="symbol">\q</span>os<span class="symbol">\l</span>ogback<span class="symbol">\l</span>ogback-classic<span class="symbol">\1</span>.1.11<span class="symbol">\l</span>ogback-classic-1.1.11.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\c</span>h<span class="symbol">\q</span>os<span class="symbol">\l</span>ogback<span class="symbol">\l</span>ogback-core<span class="symbol">\1</span>.1.11<span class="symbol">\l</span>ogback-core-1.1.11.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>lf4j<span class="symbol">\s</span>lf4j-api<span class="symbol">\1</span>.7.25<span class="symbol">\s</span>lf4j-api-1.7.25.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>lf4j<span class="symbol">\j</span>cl-over-slf4j<span class="symbol">\1</span>.7.25<span class="symbol">\j</span>cl-over-slf4j-1.7.25.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>lf4j<span class="symbol">\j</span>ul-to-slf4j<span class="symbol">\1</span>.7.25<span class="symbol">\j</span>ul-to-slf4j-1.7.25.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>lf4j<span class="symbol">\l</span>og4j-over-slf4j<span class="symbol">\1</span>.7.25<span class="symbol">\l</span>og4j-over-slf4j-1.7.25.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-core<span class="symbol">\4</span>.3.13.RELEASE<span class="symbol">\s</span>pring-core-4.3.13.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\y</span>aml<span class="symbol">\s</span>nakeyaml<span class="symbol">\1</span>.17<span class="symbol">\s</span>nakeyaml-1.17.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\b</span>oot<span class="symbol">\s</span>pring-boot-starter-tomcat<span class="symbol">\1</span>.5.9.RELEASE<span class="symbol">\s</span>pring-boot-starter-tomcat-1.5.9.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\a</span>pache<span class="symbol">\t</span>omcat<span class="symbol">\e</span>mbed<span class="symbol">\t</span>omcat-embed-websocket<span class="symbol">\8</span>.5.23<span class="symbol">\t</span>omcat-embed-websocket-8.5.23.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\h</span>ibernate<span class="symbol">\h</span>ibernate-validator<span class="symbol">\5</span>.3.6.Final<span class="symbol">\h</span>ibernate-validator-5.3.6.Final.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\j</span>avax<span class="symbol">\v</span>alidation<span class="symbol">\v</span>alidation-api<span class="symbol">\1</span>.1.0.Final<span class="symbol">\v</span>alidation-api-1.1.0.Final.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\j</span>boss<span class="symbol">\l</span>ogging<span class="symbol">\j</span>boss-logging<span class="symbol">\3</span>.3.1.Final<span class="symbol">\j</span>boss-logging-3.3.1.Final.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\c</span>om<span class="symbol">\f</span>asterxml<span class="symbol">\c</span>lassmate<span class="symbol">\1</span>.3.4<span class="symbol">\c</span>lassmate-1.3.4.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\c</span>om<span class="symbol">\f</span>asterxml<span class="symbol">\j</span>ackson<span class="symbol">\c</span>ore<span class="symbol">\j</span>ackson-databind<span class="symbol">\2</span>.8.10<span class="symbol">\j</span>ackson-databind-2.8.10.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\c</span>om<span class="symbol">\f</span>asterxml<span class="symbol">\j</span>ackson<span class="symbol">\c</span>ore<span class="symbol">\j</span>ackson-annotations<span class="symbol">\2</span>.8.0<span class="symbol">\j</span>ackson-annotations-2.8.0.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\c</span>om<span class="symbol">\f</span>asterxml<span class="symbol">\j</span>ackson<span class="symbol">\c</span>ore<span class="symbol">\j</span>ackson-core<span class="symbol">\2</span>.8.10<span class="symbol">\j</span>ackson-core-2.8.10.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-web<span class="symbol">\4</span>.3.13.RELEASE<span class="symbol">\s</span>pring-web-4.3.13.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-aop<span class="symbol">\4</span>.3.13.RELEASE<span class="symbol">\s</span>pring-aop-4.3.13.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-beans<span class="symbol">\4</span>.3.13.RELEASE<span class="symbol">\s</span>pring-beans-4.3.13.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-context<span class="symbol">\4</span>.3.13.RELEASE<span class="symbol">\s</span>pring-context-4.3.13.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-webmvc<span class="symbol">\4</span>.3.13.RELEASE<span class="symbol">\s</span>pring-webmvc-4.3.13.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\s</span>pringframework<span class="symbol">\s</span>pring-expression<span class="symbol">\4</span>.3.13.RELEASE<span class="symbol">\s</span>pring-expression-4.3.13.RELEASE.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\j</span>avax<span class="symbol">\s</span>ervlet<span class="symbol">\j</span>stl<span class="symbol">\1</span>.2<span class="symbol">\j</span>stl-1.2.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\a</span>pache<span class="symbol">\t</span>omcat<span class="symbol">\e</span>mbed<span class="symbol">\t</span>omcat-embed-core<span class="symbol">\8</span>.5.23<span class="symbol">\t</span>omcat-embed-core-8.5.23.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\a</span>pache<span class="symbol">\t</span>omcat<span class="symbol">\t</span>omcat-annotations-api<span class="symbol">\8</span>.5.23<span class="symbol">\t</span>omcat-annotations-api-8.5.23.jar;E:<span class="symbol">\m</span>aven_repos<span class="symbol">\o</span>rg<span class="symbol">\a</span>pache<span class="symbol">\t</span>omcat<span class="symbol">\e</span>mbed<span class="symbol">\t</span>omcat-embed-el<span class="symbol">\8</span>.5.23<span class="symbol">\t</span>omcat-embed-el-8.5.23.jar" Application</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /<span class="symbol">\\</span> / ___'_ __ _ _(_)_ __  __ _ <span class="symbol">\ </span><span class="symbol">\ </span><span class="symbol">\ </span>\</span><br><span class="line">( ( )<span class="symbol">\_</span>__ | '_ | '_| | '_ <span class="symbol">\/</span> _` | <span class="symbol">\ </span><span class="symbol">\ </span><span class="symbol">\ </span>\</span><br><span class="line"> <span class="symbol">\\</span>/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  '  |____| .__|_| |_|_| |_<span class="symbol">\_</span>_, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::        (v1.5.9.RELEASE)</span><br><span class="line"></span><br><span class="line">2017-12-18 11:49:38.689  INFO 11064 --- [           main] Application                              : Starting Application on USER-20170427SG with PID 11064 (E:<span class="symbol">\c</span>odes<span class="symbol">\j</span>ava<span class="symbol">\s</span>pring-boot-demo<span class="symbol">\t</span>arget<span class="symbol">\c</span>lasses started by Administrator in E:<span class="symbol">\c</span>odes<span class="symbol">\j</span>ava<span class="symbol">\s</span>pring-boot-demo)</span><br><span class="line">2017-12-18 11:49:38.692  INFO 11064 --- [           main] Application                              : No active profile set, falling back to default profiles: default</span><br><span class="line">2017-12-18 11:49:38.753  INFO 11064 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@3bd94634: startup date [Mon Dec 18 11:49:38 CST 2017]; root of context hierarchy</span><br><span class="line">2017-12-18 11:49:40.329  INFO 11064 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2017-12-18 11:49:40.339  INFO 11064 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</span><br><span class="line">2017-12-18 11:49:40.340  INFO 11064 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.23</span><br><span class="line">2017-12-18 11:49:40.435  INFO 11064 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</span><br><span class="line">2017-12-18 11:49:40.435  INFO 11064 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1685 ms</span><br><span class="line">2017-12-18 11:49:40.550  INFO 11064 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: 'dispatcherServlet' to [/]</span><br><span class="line">2017-12-18 11:49:40.554  INFO 11064 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'characterEncodingFilter' to: [/*]</span><br><span class="line">2017-12-18 11:49:40.554  INFO 11064 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]</span><br><span class="line">2017-12-18 11:49:40.554  INFO 11064 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'httpPutFormContentFilter' to: [/*]</span><br><span class="line">2017-12-18 11:49:40.554  INFO 11064 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: 'requestContextFilter' to: [/*]</span><br><span class="line">2017-12-18 11:49:40.833  INFO 11064 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@3bd94634: startup date [Mon Dec 18 11:49:38 CST 2017]; root of context hierarchy</span><br><span class="line">2017-12-18 11:49:40.901  INFO 11064 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "&#123;[/jsp/index.do]&#125;" onto public java.lang.String me.chilam.web.JspController.execute()</span><br><span class="line">2017-12-18 11:49:40.903  INFO 11064 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "&#123;[/error]&#125;" onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</span><br><span class="line">2017-12-18 11:49:40.904  INFO 11064 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped "&#123;[/error],produces=[text/html]&#125;" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</span><br><span class="line">2017-12-18 11:49:40.930  INFO 11064 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/hello/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2017-12-18 11:49:40.930  INFO 11064 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2017-12-18 11:49:40.930  INFO 11064 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2017-12-18 11:49:40.975  INFO 11064 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2017-12-18 11:49:41.086  INFO 11064 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line">2017-12-18 11:49:41.136  INFO 11064 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</span><br><span class="line">2017-12-18 11:49:41.140  INFO 11064 --- [           main] Application                              : Started Application in 2.737 seconds (JVM running for 3.146)</span><br></pre></td></tr></table></figure><p>从上图可以看到，日志输出内容元素具体如下：</p><ul><li>时间日期：精确到毫秒</li><li>日志级别：ERROR, WARN, INFO, DEBUG or TRACE</li><li>进程ID</li><li>分隔符：— 标识实际日志的开始</li><li>线程名：方括号括起来（可能会截断控制台输出）</li><li>Logger名：通常使用源代码的类名</li><li>日志内容</li></ul><h3 id="控制台输出日志"><a href="#控制台输出日志" class="headerlink" title="控制台输出日志"></a>控制台输出日志</h3><p>日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。</p><p>在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）<br>会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。</p><h3 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h3><p>默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，<br>则需在application.properties中设置logging.file或logging.path属性。</p><ul><li>logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log</li><li>logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log</li></ul><p>如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。<br>如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log</p><p><strong>注：二者不能同时使用，如若同时使用，则只有logging.file生效</strong></p><p>默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO</p><h3 id="级别控制"><a href="#级别控制" class="headerlink" title="级别控制"></a>级别控制</h3><p>所有支持的日志记录系统都可以在Spring Boot环境中设置记录级别（例如在application.properties中）<br>格式为：’logging.level.* = LEVEL’</p><ul><li>logging.level：日志级别控制前缀，*为包名或Logger名</li><li>LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置org.springframework的日志级别为WARN</span></span><br><span class="line">logging.level.org.<span class="attribute">springframework</span>=WARN</span><br></pre></td></tr></table></figure><h3 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h3><p>常见的日志有很多种方式，根据不同的日志系统，可以按照规则组织配置文件名，就能被正确加载：</p><ul><li>Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</li><li>Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml</li><li>Log4j2：log4j2-spring.xml, log4j2.xml</li><li>JDK (Java Util Logging)：logging.properties</li></ul><p>Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），<br>命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项（下面会提到）。</p><p>上面是默认的命名规则，并且放在src/main/resources下面即可。</p><p>如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，<br>可以在application.properties配置文件里面通过logging.config属性指定自定义的名字：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.<span class="built_in">config</span>=classpath:logging-<span class="built_in">config</span>.xml</span><br></pre></td></tr></table></figure><p>关于logback的配置的介绍，这里就不再做多余的介绍，请参考的logback的官网的文档</p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.sb-web开发</title>
      <link href="/2017/12/17/spring-boot-3/"/>
      <url>/2017/12/17/spring-boot-3/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Boot提供了spring-boot-starter-web为Web开发予以支持，<br>spring-boot-starter-web为我们提供了嵌入的Tomcat以及Spring MVC的依赖。</p><h2 id="Spring-MVC的自动配置"><a href="#Spring-MVC的自动配置" class="headerlink" title="Spring MVC的自动配置"></a>Spring MVC的自动配置</h2><p>Spring Boot为Spring MVC提供适用于多数应用的自动配置功能。在Spring默认基础上，自动配置添加了以下特性：</p><ul><li>引入ContentNegotiatingViewResolver和BeanNameViewResolver beans。</li><li>对静态资源的支持，包括对WebJars的支持。</li><li>自动注册Converter，GenericConverter，Formatter beans。</li><li>对HttpMessageConverters的支持。</li><li>自动注册MessageCodeResolver。</li><li>对静态index.html的支持。</li><li>对自定义Favicon的支持。</li></ul><p>如果想全面控制Spring MVC，你可以添加自己的@Configuration，并使用@EnableWebMvc对其注解。如果想保留Spring Boot MVC的特性，<br>并只是添加其他的MVC配置(拦截器，formatters，视图控制器等)，你可以添加自己的WebMvcConfigurerAdapter类型的@Bean<br>（不使用@EnableWebMvc注解）,具体拦截器等配置后续会介绍</p><h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h2><p>Spring Boot 默认为我们提供了静态资源处理，使用 WebMvcAutoConfiguration 中的配置各种属性。<br>建议大家使用Spring Boot的默认配置方式，提供的静态资源映射如下:</p><p>classpath:/META-INF/resources<br>classpath:/resources<br>classpath:/static<br>classpath:/public</p><p>上面这几个都是静态资源的映射路径，优先级顺序为：META-INF/resources &gt; resources &gt; static &gt; public</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 默认值为 /**</span></span><br><span class="line">spring.mvc.<span class="keyword">static</span>-path-pattern=</span><br><span class="line"><span class="meta"># 默认值为 classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/</span></span><br><span class="line">spring.resources.<span class="keyword">static</span>-locations=这里设置要指向的路径，多个使用英文逗号隔开</span><br></pre></td></tr></table></figure><p>可以通过修改spring.mvc.static-path-pattern来修改默认的映射，例如我改成/chilam/**,那运行的时候访问<br><a href="http://lcoalhost:8080/chilam/index.html" target="_blank" rel="noopener">http://lcoalhost:8080/chilam/index.html</a> 才对应到index.html页面。</p><h2 id="模板引擎-Thymeleaf"><a href="#模板引擎-Thymeleaf" class="headerlink" title="模板引擎-Thymeleaf"></a>模板引擎-Thymeleaf</h2><p>官方推荐的！！！！</p><p>Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎。类似JSP，Velocity，FreeMaker等，它也可以轻易的与Spring MVC等<br>Web框架进行集成作为Web应用的模板引擎。与其它模板引擎相比，<br>Thymeleaf最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用。它的功能特性如下：</p><ul><li>Spring MVC中@Controller中的方法可以直接返回模板名称，接下来Thymeleaf模板引擎会自动进行渲染</li><li>模板中的表达式支持Spring表达式语言（Spring EL)</li><li>表单支持，并兼容Spring MVC的数据绑定与验证机制</li><li>国际化支持</li></ul><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-boot-starter-thymeleaf会自动包含spring-boot-starter-web，所以我们就不需要单独引入web依赖了。</p><h3 id="编写控制器"><a href="#编写控制器" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(<span class="string">"/leaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThymeleafController</span> &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        stringList.<span class="keyword">add</span>(<span class="string">"设计1"</span>);</span><br><span class="line">        stringList.<span class="keyword">add</span>(<span class="string">"设计2"</span>);</span><br><span class="line">        stringList.<span class="keyword">add</span>(<span class="string">"设计3"</span>);</span><br><span class="line">        stringList.<span class="keyword">add</span>(<span class="string">"设计4"</span>);</span><br><span class="line">        stringList.<span class="keyword">add</span>(<span class="string">"设计5"</span>);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">"index"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"stringList"</span>,stringList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写HTML"><a href="#编写HTML" class="headerlink" title="编写HTML"></a>编写HTML</h3><p>引入依赖后就在默认的模板路径src/main/resources/templates下编写模板文件即可完成。这里我们新建一个index.html:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>learn Resources<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>sssss<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">"str : $</span></span></span><span class="template-variable">&#123;stringList&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;str&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="开发jsp页面"><a href="#开发jsp页面" class="headerlink" title="开发jsp页面"></a>开发jsp页面</h2><p>首先确定jsp文件存放目录src/main/webapp/WEB-INF/jsp/，通过设置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.mvc</span><span class="selector-class">.view</span><span class="selector-class">.prefix</span>=/WEB-INF/jsp/</span><br><span class="line">spring<span class="selector-class">.mvc</span><span class="selector-class">.view</span><span class="selector-class">.suffix</span>=.jsp</span><br></pre></td></tr></table></figure><h3 id="更改SpringMVC-DispatcherServlet的配置UrlMapping的值"><a href="#更改SpringMVC-DispatcherServlet的配置UrlMapping的值" class="headerlink" title="更改SpringMVC DispatcherServlet的配置UrlMapping的值"></a>更改SpringMVC DispatcherServlet的配置UrlMapping的值</h3><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.servlet-<span class="built_in">path</span>=*.<span class="keyword">do</span></span><br></pre></td></tr></table></figure><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--jsp页面使用jstl标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于编译jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写控制器-1"><a href="#编写控制器-1" class="headerlink" title="编写控制器"></a>编写控制器</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"jsp"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JspController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"index.do"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String execute()&#123;</span><br><span class="line">        System.err.println(<span class="string">"hello jsp"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写页面"><a href="#编写页面" class="headerlink" title="编写页面"></a>编写页面</h3><p>注意页面存放的路径:spring-boot-demo\src\main\webapp\WEB-INF\jsp\index.jsp</p><figure class="highlight erb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    测试JSP</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="测试JSP"><a href="#测试JSP" class="headerlink" title="测试JSP"></a>测试JSP</h3><p>此时注意前面的依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用于编译jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="provided"><a href="#provided" class="headerlink" title="provided"></a><scope>provided</scope></h4><p>依赖范围就是用来控制依赖和三种classpath(编译classpath，测试classpath、运行classpath)的关系，Maven有如下几种依赖范围：</p><ul><li><p>compile:编译依赖范围。如果没有指定，就会默认使用该依赖范围。使用此依赖范围的Maven依赖，对于编译、测试、运行三种classpath<br>都有效。典型的例子是spring-code,在编译、测试和运行的时候都需要使用该依赖。</p></li><li><p>test: 测试依赖范围。使用次依赖范围的Maven依赖，只对于测试classpath有效，在编译主代码或者运行项目的使用时将无法使用此依赖。<br>典型的例子是Jnuit,它只有在编译测试代码及运行测试的时候才需要。</p></li><li><p>provided:已提供依赖范围。使用此依赖范围的Maven依赖，对于编译和测试classpath有效，但在运行时候无效。<br>典型的例子是servlet-api,编译和测试项目的时候需要该依赖，但在运行项目的时候，由于容器以及提供，就不需要Maven重复地引入一遍。</p></li></ul><h4 id="在上述测试案例中有provided的时候"><a href="#在上述测试案例中有provided的时候" class="headerlink" title="在上述测试案例中有provided的时候"></a>在上述测试案例中有provided的时候</h4><ul><li>右键运行启动类，访问<a href="http://localhost:8080/jsp/index.do如下图：" target="_blank" rel="noopener">http://localhost:8080/jsp/index.do如下图：</a></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/17-12-18/94884658.jpg" alt=""></p><ul><li><p>使用spring-boot:run运行正常</p></li><li><p>打包成jar，通过 java -jar spring-boot-demo-1.0-SNAPSHOT.jar运行404找不到页面(index.jsp没有被打包到jar包里)</p></li><li><p>修改pom.xml的packaging为war打包成war，通过 java -jar spring-boot-demo-1.0-SNAPSHOT.war运行正常</p></li></ul><h4 id="在上述测试案例中没有provided的时候"><a href="#在上述测试案例中没有provided的时候" class="headerlink" title="在上述测试案例中没有provided的时候"></a>在上述测试案例中没有provided的时候</h4><ul><li><p>右键运行启动类，访问页面正常</p></li><li><p>spring-boot:run运行 访问页面正常</p></li><li><p>打包成jar，通过 java -jar spring-boot-demo-1.0-SNAPSHOT.jar 运行报错</p></li><li><p>打包成war，通过 java -jar spring-boot-demo-1.0-SNAPSHOT.war 运行正常</p></li></ul><h3 id="外部Tomcat容器部署Spring-Boot应用"><a href="#外部Tomcat容器部署Spring-Boot应用" class="headerlink" title="外部Tomcat容器部署Spring Boot应用"></a>外部Tomcat容器部署Spring Boot应用</h3><p>在前面的Spring Boot应用都是内置了tomcat容器，如果把打好的war包拿去部署到外部tomcat的话，会报错的，需要做如下的改动</p><h4 id="继承SpringBootServletInitializer"><a href="#继承SpringBootServletInitializer" class="headerlink" title="继承SpringBootServletInitializer"></a>继承SpringBootServletInitializer</h4><p>外部容器部署的话，就不能依赖于Application的main函数了，而是要以类似于web.xml文件配置的方式来启动Spring应用上下文，<br>此时我们需要在启动类中继承SpringBootServletInitializer并实现configure方法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.<span class="type">SpringBootApplication</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.<span class="type">SpringApplicationBuilder</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.support.<span class="type">SpringBootServletInitializer</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.<span class="type">ComponentScan</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123;<span class="string">"me.chilam.**"</span>&#125;)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">SpringApplicationBuilder</span> configure(<span class="type">SpringApplicationBuilder</span> builder) &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(<span class="type">Application</span>.<span class="keyword">class</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类的作用与在web.xml中配置负责初始化Spring应用上下文的监听器作用类似，只不过在这里不需要编写额外的XML文件了。</p><h4 id="pom-xml修改tomcat相关的配置"><a href="#pom-xml修改tomcat相关的配置" class="headerlink" title="pom.xml修改tomcat相关的配置"></a>pom.xml修改tomcat相关的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chilam<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Quick Start Archetype<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 外部部署不需要内嵌tomcat --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jsp页面使用jstl标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于编译jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>spring-boot<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 需要注释掉，不然要报Applicatipon.java中找不到main方法</span></span><br><span class="line"><span class="comment">&lt;plugins&gt;</span></span><br><span class="line"><span class="comment">  &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">  &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">  &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">  &lt;/plugins&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问路径:<a href="http://localhost:8080/spring-boot/jsp/index.do" target="_blank" rel="noopener">http://localhost:8080/spring-boot/jsp/index.do</a></p><h2 id="替换Spring-Boot的Spring-MVC配置"><a href="#替换Spring-Boot的Spring-MVC配置" class="headerlink" title="替换Spring Boot的Spring MVC配置"></a>替换Spring Boot的Spring MVC配置</h2><p>如果Spring Boot提供的Sping MVC不符合要求，则可以通过一个配置类（注解有@Configuration的类）<br>加上@EnableWebMvc注解来实现完全自己控制的MVC配置。</p><p><a href="https://docs.spring.io/spring/docs/4.3.14.BUILD-SNAPSHOT/spring-framework-reference/htmlsingle/#mvc-config" target="_blank" rel="noopener">Spring MVC官网配置文档</a></p><p>当然，通常情况下，Spring Boot的自动配置是符合我们大多数需求的。在你既需要保留Spring Boot提供的便利，<br>有需要增加自己的额外的配置的时候，可以定义一个配置类并继承WebMvcConfigurerAdapter,无需使用@EnableWebMvc注解。</p><h3 id="自定义配置Web-MVC类"><a href="#自定义配置Web-MVC类" class="headerlink" title="自定义配置Web MVC类"></a>自定义配置Web MVC类</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.<span class="type">Configuration</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.<span class="type">ResourceHandlerRegistry</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.<span class="type">WebMvcConfigurerAdapter</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyWebMvcConfigurerAdapter</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置静态访问资源</span></span><br><span class="line"><span class="comment">     * @param registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void addResourceHandlers(<span class="type">ResourceHandlerRegistry</span> registry) &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/hello/**"</span>).addResourceLocations(<span class="string">"classpath:/hello/"</span>);</span><br><span class="line">        <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动类需要使用-Import引入"><a href="#启动类需要使用-Import引入" class="headerlink" title="启动类需要使用@Import引入"></a>启动类需要使用@Import引入</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@ComponentScan</span>(basePackages = &#123;<span class="string">"me.chilam.**"</span>&#125;)</span><br><span class="line"><span class="variable">@Import</span>(&#123;MyWebMvcConfigurerAdapter.class&#125;)</span><br><span class="line">public class Application&#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><ul><li>编写拦截器类</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"preHandle"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"postHandle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>拦截器配置:</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">me</span><span class="selector-class">.chilam</span><span class="selector-class">.interceptor</span><span class="selector-class">.MyInterceptor</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.context</span><span class="selector-class">.annotation</span><span class="selector-class">.Configuration</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.config</span><span class="selector-class">.annotation</span><span class="selector-class">.InterceptorRegistry</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.config</span><span class="selector-class">.annotation</span><span class="selector-class">.ResourceHandlerRegistry</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.config</span><span class="selector-class">.annotation</span><span class="selector-class">.WebMvcConfigurerAdapter</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line"><span class="keyword">public</span> class MyWebMvcConfigurerAdapter extends WebMvcConfigurerAdapter &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加自定义拦截器</span></span><br><span class="line"><span class="comment">     * @param registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="keyword">Override</span></span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        <span class="selector-tag">registry</span><span class="selector-class">.addInterceptor</span>((<span class="selector-tag">new</span> <span class="selector-tag">MyInterceptor</span>()))<span class="selector-class">.addPathPatterns</span>("<span class="comment">/**");</span></span><br><span class="line"><span class="comment">        super.addInterceptors(registry);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="查看父类方法WebMvcConfigurerAdapter"><a href="#查看父类方法WebMvcConfigurerAdapter" class="headerlink" title="查看父类方法WebMvcConfigurerAdapter"></a>查看父类方法WebMvcConfigurerAdapter</h3><p>自定义配置Web MVC需要继承WebMvcConfigurerAdapter，熟悉Web MVC配置的看了这个类方法其实也就明白以后需要自定义的配置该如何<br>添加了。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2016 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.config</span><span class="selector-class">.annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.util</span><span class="selector-class">.List</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.format</span><span class="selector-class">.FormatterRegistry</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.http</span><span class="selector-class">.converter</span><span class="selector-class">.HttpMessageConverter</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.validation</span><span class="selector-class">.MessageCodesResolver</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.validation</span><span class="selector-class">.Validator</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.method</span><span class="selector-class">.support</span><span class="selector-class">.HandlerMethodArgumentResolver</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.method</span><span class="selector-class">.support</span><span class="selector-class">.HandlerMethodReturnValueHandler</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.servlet</span><span class="selector-class">.HandlerExceptionResolver</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An implementation of &#123;@link WebMvcConfigurer&#125; with empty methods allowing</span></span><br><span class="line"><span class="comment"> * subclasses to override only the methods they're interested in.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author Rossen Stoyanchev</span></span><br><span class="line"><span class="comment"> * @since 3.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">abstract</span> <span class="selector-tag">class</span> <span class="selector-tag">WebMvcConfigurerAdapter</span> <span class="selector-tag">implements</span> <span class="selector-tag">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void configurePathMatch(PathMatchConfigurer configurer) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void configureContentNegotiation(ContentNegotiationConfigurer configurer) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void configureAsyncSupport(AsyncSupportConfigurer configurer) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void addFormatters(FormatterRegistry registry) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void addCorsMappings(CorsRegistry registry) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void configureViewResolvers(ViewResolverRegistry registry) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void addArgumentResolvers(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void addReturnValueHandlers(List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; exceptionResolvers) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public void extendHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; exceptionResolvers) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation returns &#123;@code null&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Override</span></span><br><span class="line">public Validator getValidator() &#123;</span><br><span class="line"><span class="selector-tag">return</span> <span class="selector-tag">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;@inheritDoc&#125;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation returns &#123;@code null&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="selector-tag">Override</span></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">MessageCodesResolver</span> <span class="selector-tag">getMessageCodesResolver</span>() &#123;</span><br><span class="line"><span class="selector-tag">return</span> <span class="selector-tag">null</span>;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.sb-配置</title>
      <link href="/2017/12/17/spring-boot-2/"/>
      <url>/2017/12/17/spring-boot-2/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解Spring Boot的入门，知道了Spring Boot使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，<br>让你无需手动进行配置）的理念让你的项目快速运行起来。所以，我们要想把Spring Boot玩的溜，就要懂得如何开启各个功能模块的<br>默认配置，这就需要了解Spring Boot的配置文件application.properties。</p><p>Spring Boot使用了一个全局的配置文件application.properties，放在src/main/resources目录下或者类路径的/config下。<br>Sping Boot的全局配置文件的作用是对一些默认配置的配置值进行修改。</p><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><h3 id="自定义属性-Value"><a href="#自定义属性-Value" class="headerlink" title="自定义属性@Value"></a>自定义属性@Value</h3><p>application.properties提供自定义属性的支持，这样我们就可以把一些常量配置在这里</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="attribute">name</span>=设计</span><br><span class="line">app.<span class="attribute">version</span>=1.0.0</span><br></pre></td></tr></table></figure><p>然后直接在要使用的地方通过注解@Value(value=”${config.name}”)就可以绑定到你想要的属性上面</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;app.name&#125;</span>"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;app.version&#125;</span>"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String appVersion;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/"</span>)</span></span><br><span class="line">    String home()&#123;</span><br><span class="line">        <span class="keyword">return</span> appName +<span class="string">","</span>+appVersion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Example.<span class="keyword">class</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IDEA中properties文件乱码解决如下</strong></p><p><img src="http://orkt468tj.bkt.clouddn.com/17-12-15/74717395.jpg" alt=""></p><h3 id="自定义属性-ConfigurationProperties"><a href="#自定义属性-ConfigurationProperties" class="headerlink" title="自定义属性@ConfigurationProperties"></a>自定义属性@ConfigurationProperties</h3><p>有时候属性太多了，一个个绑定到属性字段上太多，官方提倡绑定一个对象的bean，这里我们建一个AppConfig.java类，<br>顶部需要使用注解@ConfigurationProperties(prefix = “app”)来指明使用哪个</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="comment">//使用注解，并声明统一前缀</span></span><br><span class="line">@ConfigurationProperties(prefix = <span class="string">"app"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对应app.name</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="comment">//对应app.version</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> version;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//加入配置的类</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;AppConfig.<span class="keyword">class</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//注入配置类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AppConfig appConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    String home()&#123;</span><br><span class="line">        <span class="keyword">return</span> appConfig.getName()+<span class="string">", "</span>+appConfig.getVersion();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Example.<span class="keyword">class</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性间的引用"><a href="#属性间的引用" class="headerlink" title="属性间的引用"></a>属性间的引用</h3><p>在application.properties中的各个属性之间也可以直接引用来使用，就像下面的设置：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">app</span>.name=设计</span><br><span class="line"><span class="keyword">app</span>.<span class="keyword">version</span>=1.2.0</span><br><span class="line"><span class="keyword">app</span>.description=<span class="keyword">App</span>的名字为<span class="variable">$&#123;app</span>.name&#125;,当前版本<span class="variable">$&#123;app</span>.<span class="keyword">version</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h2><p>有时候我们不希望把所有配置都放在application.properties里面，这时候我们可以另外定义一个，<br>这里我明取名为test.properties,路径跟也放在src/main/resources下面。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">app</span>.name=测试</span><br><span class="line"><span class="keyword">app</span>.<span class="keyword">version</span>=1.2.1</span><br><span class="line"><span class="keyword">app</span>.description=<span class="keyword">App</span>的名字为<span class="variable">$&#123;app</span>.name&#125;,当前版本<span class="variable">$&#123;app</span>.<span class="keyword">version</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.PropertySource;</span><br><span class="line"><span class="comment">//必须要加这个注解，表示自定义配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = <span class="meta-string">"app"</span>)</span></span><br><span class="line"><span class="comment">//指定自定义配置文件位置</span></span><br><span class="line"><span class="meta">@PropertySource(<span class="meta-string">"classpath:test.properties"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getter setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意事项：application.properties和test.properties存在相同key的话，将来值只会是前者里面配置的!!!</strong></p><h2 id="随机值配置"><a href="#随机值配置" class="headerlink" title="随机值配置"></a>随机值配置</h2><p>配置文件中${random} 可以用来生成各种不同类型的随机值，从而简化了代码生成的麻烦，<br>例如 生成 int 值、long 值或者 string 字符串。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">app</span>.secret=<span class="variable">$&#123;random</span>.value&#125;</span><br><span class="line"><span class="keyword">app</span>.number=<span class="variable">$&#123;random</span>.int&#125;</span><br><span class="line"><span class="keyword">app</span>.bignumber=<span class="variable">$&#123;random</span>.long&#125;</span><br><span class="line"><span class="keyword">app</span>.uuid=<span class="variable">$&#123;random</span>.uuid&#125;</span><br><span class="line"><span class="keyword">app</span>.number.less.than.ten=<span class="variable">$&#123;random</span>.int(10)&#125;</span><br><span class="line"><span class="keyword">app</span>.number.<span class="keyword">in</span>.<span class="keyword">range</span>=<span class="variable">$&#123;random</span>.int[1024,65536]&#125;</span><br></pre></td></tr></table></figure><h3 id="更改内置tomcat容器端口"><a href="#更改内置tomcat容器端口" class="headerlink" title="更改内置tomcat容器端口"></a>更改内置tomcat容器端口</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="attribute">port</span>=9000</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot属性源"><a href="#Spring-Boot属性源" class="headerlink" title="Spring Boot属性源"></a>Spring Boot属性源</h3><p>实际上，Spring Boot应用程序有多种设置途径，Spring Boot能从多重属性源获得属性，包括如下几种：</p><ul><li>根目录下的开发工具全局设置属性(当开发工具激活时为~/.spring-boot-devtools.properties)。</li><li>测试中的@TestPropertySource注解。</li><li>测试中的@SpringBootTest#properties注解特性。</li><li>命令行参数</li><li>SPRING_APPLICATION_JSON中的属性(环境变量或系统属性中的内联JSON嵌入)。</li><li>ServletConfig初始化参数。</li><li>ServletContext初始化参数。</li><li>java:comp/env里的JNDI属性</li><li>JVM系统属性</li><li>操作系统环境变量</li><li>随机生成的带random.* 前缀的属性（在设置其他属性时，可以应用他们，比如${random.long}）</li><li><em>应用程序以外的application.properties或者appliaction.yml文件</em></li><li><em>打包在应用程序内的application.properties或者appliaction.yml文件</em></li><li><em>通过@PropertySource标注的属性源</em></li><li>默认属性(通过SpringApplication.setDefaultProperties指定).</li></ul><p>这里列表按组优先级排序，也就是说，任何在高优先级属性源里设置的属性都会覆盖低优先级的相同属性，<br>列如我们上面提到的命令行属性就覆盖了application.properties的属性。</p><h3 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h3><p>application.properties和application.yml文件可以放在以下四个位置：</p><ul><li>外置，在相对于应用程序运行目录的/congfig子目录里。</li><li>外置，在应用程序运行的目录里</li><li>内置，在config包内</li><li>内置，在Classpath根目录</li></ul><h3 id="多环境配置文件"><a href="#多环境配置文件" class="headerlink" title="多环境配置文件"></a>多环境配置文件</h3><p>当应用程序需要部署到不同运行环境时，一些配置细节通常会有所不同，最简单的比如日志，生产日志会将日志级别设置为WARN或更高级别，<br>并将日志写入日志文件，而开发的时候需要日志级别为DEBUG，日志输出到控制台即可。<br>如果按照以前的做法，就是每次发布的时候替换掉配置文件，这样太麻烦了，Spring Boot的Profile就给我们提供了解决方案，命令带上参数就搞定。</p><p>这里我们来模拟一下，只是简单的修改端口来测试<br>在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式，其中{profile}对应你的环境标识，比如：</p><ul><li>application-dev.properties：开发环境</li><li>application-test.properties：生产环境</li></ul><p>我给不同的环境添加不同的端口属性server.port，然后根据指定不同的spring.profiles.active来切换使用。</p><h3 id="Spring-Boot常用属性"><a href="#Spring-Boot常用属性" class="headerlink" title="Spring Boot常用属性"></a>Spring Boot常用属性</h3><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="noopener">官方文档</a></p><p>建议大概过一篇，后续的文档也会使用到很多的属性</p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.sb-简介</title>
      <link href="/2017/12/17/spring-boot-1/"/>
      <url>/2017/12/17/spring-boot-1/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>熟悉MAVEN</li><li>熟悉IDEA</li><li>熟悉Spring的xml配置方式以及基本原理</li></ul><p>Spring boot,Spring Cloud终于决定入坑了，在这里会记录一下入坑的过程。</p><p>Spring Boot不是一门新技术，所以不用紧张。从本质上来说，Spring Boot就是Spring,它做了那些没有它你也会去做的<br>Spring Bean配置。它使用“习惯优于配置”（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）<br>的理念让你的项目快速运行起来。使用Spring Boot很容易创建一个独立运行（运行jar,内嵌Servlet容器）、<br>准生产级别的基于Spring框架的项目，使用Spring Boot你可以不用或者只需要很少的Spring配置。所以总结来说，相对于spring,spring<br>boot的优点可以总结如下：</p><ul><li>为所有Spring开发者更快的入门</li><li>开箱即用，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="传统SpringMVC的WEB工程"><a href="#传统SpringMVC的WEB工程" class="headerlink" title="传统SpringMVC的WEB工程"></a>传统SpringMVC的WEB工程</h3><p>让我们先看看传统Spring MVC开发一个简单的Hello World Web应用程序，你应该做什么，我能想到一些基本的需求</p><ul><li>一个项目结构，其中有一个包含必要依赖的Maven构建文件，最起码要有Spring MVC和Servlet API等依赖。</li><li>一个web.xml文件（或者一个WebApplicationInitializer实现），其中配置Spring的DispatcherServlet。</li><li>一个启动了Spring MVC的Spring配置(视图解析器，JSON处理，静态资源一大堆配置)</li><li>一控制器类，以“hello World”相应HTTP请求。</li><li>一个用于部署应用程序的Web应用服务器，比如Tomcat。</li></ul><p>最让人难以接受的是，上述过程只有一个东西是和Hello World功能相关的，即控制器，剩下的都是Spring开发的Web应用程序必需的配置<br>步骤。上述搭建过程对于一个熟手来说至少都要20分钟，而且是在不出错的情况下。</p><h3 id="搭建Spring-Boot项目"><a href="#搭建Spring-Boot项目" class="headerlink" title="搭建Spring Boot项目"></a>搭建Spring Boot项目</h3><p>搭建方式很多，如下几种：</p><ul><li>访问<a href="http://start.spring.io/" target="_blank" rel="noopener">http://start.spring.io/</a>生成工程文件</li><li>IDEA的Spring Initilzer插件创建(推荐使用)</li><li><a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#getting-started-installation-instructions-for-java" target="_blank" rel="noopener">官网文档QuickStart</a></li></ul><p>下面就介绍官网文档的搭建方式，了解的比较多一点。</p><ul><li>创建一个简单maven工程，pom.xml如下配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chilam<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>boot-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加spring boot的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--继承Spring Boot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chilam<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>boot-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Spring Boot Web工程依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写控制器和启动类</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.example;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/"</span>)</span></span><br><span class="line">    String home()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Project"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//启动方法</span></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Example.<span class="keyword">class</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行</li></ul><p>运行main方法会出现如下日志：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2017</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">31</span>:<span class="number">55.306</span>  INFO <span class="number">5856</span> --- [  restartedMain] o.s.boot.SpringApplication               : </span><br><span class="line">  .   ____          <span class="symbol">_</span>            <span class="symbol">__</span> <span class="symbol">_</span> <span class="symbol">_</span></span><br><span class="line"> /\\ / ___'<span class="symbol">_</span> <span class="symbol">__</span> <span class="symbol">_</span> <span class="symbol">_</span>(<span class="symbol">_</span>)<span class="symbol">_</span> <span class="symbol">__</span>  <span class="symbol">__</span> <span class="symbol">_</span> \ \ \ \</span><br><span class="line">( ( )\___ | '<span class="symbol">_</span> | '<span class="symbol">_</span>| | '<span class="symbol">_</span> \/ <span class="symbol">_</span>` | \ \ \ \</span><br><span class="line"> \\/  ___)| |<span class="symbol">_</span>)| | | | | || (<span class="symbol">_</span>| |  ) ) ) )</span><br><span class="line">  '  |____| .<span class="symbol">__</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>|<span class="symbol">_</span>| |<span class="symbol">_</span>\<span class="symbol">__</span>, | / / / /</span><br><span class="line"> =========|<span class="symbol">_</span>|==============|___/=/<span class="symbol">_</span>/<span class="symbol">_</span>/<span class="symbol">_</span>/</span><br><span class="line"> :: Spring Boot ::        (v1.3.2.RELEASE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2017</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">31</span>:<span class="number">55.379</span>  INFO <span class="number">5856</span> --- [  restartedMain] me.chilam.<span class="built_in">example</span>.Example                : Starting Example on USER-20170427SG with PID <span class="number">5856</span> (E:\codes\java\spring-boot-<span class="built_in">demo</span>\target\classes started by Administrator <span class="keyword">in</span> E:\codes\java\spring-boot-<span class="built_in">demo</span>)</span><br><span class="line"><span class="number">2017</span>-<span class="number">12</span>-<span class="number">15</span> <span class="number">10</span>:<span class="number">31</span>:<span class="number">55.380</span>  INFO <span class="number">5856</span> --- [  restartedMain] me.chilam.<span class="built_in">example</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>在浏览器访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>，浏览器会出现Hello Project。</p><p>上述过程其实就完成了一个简单搭建过程，根本没有配置过任何的spring相关的配置，对于开发人员来说是很简单方便的。</p><h3 id="Spring-Boot的父级依赖"><a href="#Spring-Boot的父级依赖" class="headerlink" title="Spring Boot的父级依赖"></a>Spring Boot的父级依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这块配置就是Spring Boot父级依赖，spring-boot-starter-parent是一个特殊的starter,它用来提供相关的Maven默认依赖，<br>使用它之后，常用的包依赖可以省去version标签。关于Spring Boot提供了哪些jar包的依赖，可以看一下它的pom.xml如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></span></span><br><span class="line"><span class="xml">    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" </span></span><br><span class="line"><span class="xml">    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Boot Starter Parent<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Parent pom providing dependency and plugin management for applications</span></span><br><span class="line"><span class="xml">built with Maven<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://projects.spring.io/spring-boot/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">organization</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resource.delimiter</span>&gt;</span>@<span class="tag">&lt;/<span class="name">resource.delimiter</span>&gt;</span> <span class="comment">&lt;!-- delimiter that doesn't clash with Spring $</span></span><span class="template-variable">&#123;&#125;</span><span class="xml"><span class="comment"> placeholders --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>$</span><span class="template-variable">&#123;java.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>$</span><span class="template-variable">&#123;java.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span></span><br><span class="line"><span class="xml">...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>上述配置中除了一个spring-core的依赖你会发现它还有一个parent</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在来看哈这个parent的pom.xml的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Boot Dependencies<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Boot Dependencies<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://projects.spring.io/spring-boot/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/spring-projects/spring-boot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>pwebb<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Phillip Webb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">email</span>&gt;</span>pwebb at pivotal.io<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://www.spring.io<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span>&gt;</span>Project lead<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>dsyer<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Dave Syer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">email</span>&gt;</span>dsyer at pivotal.io<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organization</span>&gt;</span>Pivotal Software, Inc.<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://www.spring.io<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span>&gt;</span>Project lead<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dependency versions --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activemq.version</span>&gt;</span>5.14.5<span class="tag">&lt;/<span class="name">activemq.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">antlr2.version</span>&gt;</span>2.7.7<span class="tag">&lt;/<span class="name">antlr2.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appengine-sdk.version</span>&gt;</span>1.9.59<span class="tag">&lt;/<span class="name">appengine-sdk.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artemis.version</span>&gt;</span>1.5.5<span class="tag">&lt;/<span class="name">artemis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aspectj.version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">aspectj.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">assertj.version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">assertj.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">atomikos.version</span>&gt;</span>3.9.3<span class="tag">&lt;/<span class="name">atomikos.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bitronix.version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">bitronix.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caffeine.version</span>&gt;</span>2.3.5<span class="tag">&lt;/<span class="name">caffeine.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cassandra-driver.version</span>&gt;</span>3.1.4<span class="tag">&lt;/<span class="name">cassandra-driver.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">classmate.version</span>&gt;</span>1.3.4<span class="tag">&lt;/<span class="name">classmate.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-beanutils.version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">commons-beanutils.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-collections.version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">commons-collections.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-codec.version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">commons-codec.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-dbcp.version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">commons-dbcp.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-dbcp2.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">commons-dbcp2.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-digester.version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">commons-digester.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-pool.version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">commons-pool.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commons-pool2.version</span>&gt;</span>2.4.3<span class="tag">&lt;/<span class="name">commons-pool2.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">couchbase-client.version</span>&gt;</span>2.3.7<span class="tag">&lt;/<span class="name">couchbase-client.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">couchbase-cache-client.version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">couchbase-cache-client.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">crashub.version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">crashub.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">derby.version</span>&gt;</span>10.13.1.1<span class="tag">&lt;/<span class="name">derby.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dom4j.version</span>&gt;</span>1.6.1<span class="tag">&lt;/<span class="name">dom4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dropwizard-metrics.version</span>&gt;</span>3.1.5<span class="tag">&lt;/<span class="name">dropwizard-metrics.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache.version</span>&gt;</span>2.10.4<span class="tag">&lt;/<span class="name">ehcache.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache3.version</span>&gt;</span>3.2.3<span class="tag">&lt;/<span class="name">ehcache3.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embedded-mongo.version</span>&gt;</span>1.50.5<span class="tag">&lt;/<span class="name">embedded-mongo.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">flyway.version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">flyway.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">freemarker.version</span>&gt;</span>2.3.27-incubating<span class="tag">&lt;/<span class="name">freemarker.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>2.4.6<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gemfire.version</span>&gt;</span>8.2.7<span class="tag">&lt;/<span class="name">gemfire.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">glassfish-el.version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">glassfish-el.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gradle.version</span>&gt;</span>2.9<span class="tag">&lt;/<span class="name">gradle.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groovy.version</span>&gt;</span>2.4.13<span class="tag">&lt;/<span class="name">groovy.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2.version</span>&gt;</span>1.4.196<span class="tag">&lt;/<span class="name">h2.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hamcrest.version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">hamcrest.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hazelcast.version</span>&gt;</span>3.7.8<span class="tag">&lt;/<span class="name">hazelcast.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hazelcast-hibernate4.version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">hazelcast-hibernate4.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hazelcast-hibernate5.version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">hazelcast-hibernate5.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.0.12.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-validator.version</span>&gt;</span>5.3.6.Final<span class="tag">&lt;/<span class="name">hibernate-validator.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hikaricp.version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">hikaricp.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hikaricp-java6.version</span>&gt;</span>2.3.13<span class="tag">&lt;/<span class="name">hikaricp-java6.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hikaricp-java7.version</span>&gt;</span>2.4.13<span class="tag">&lt;/<span class="name">hikaricp-java7.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hsqldb.version</span>&gt;</span>2.3.5<span class="tag">&lt;/<span class="name">hsqldb.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">htmlunit.version</span>&gt;</span>2.21<span class="tag">&lt;/<span class="name">htmlunit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">httpasyncclient.version</span>&gt;</span>4.1.3<span class="tag">&lt;/<span class="name">httpasyncclient.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.3<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">httpcore.version</span>&gt;</span>4.4.8<span class="tag">&lt;/<span class="name">httpcore.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">infinispan.version</span>&gt;</span>8.2.8.Final<span class="tag">&lt;/<span class="name">infinispan.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.8.10<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">janino.version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">janino.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javassist.version</span>&gt;</span>3.21.0-GA<span class="tag">&lt;/<span class="name">javassist.version</span>&gt;</span> <span class="comment">&lt;!-- Same as Hibernate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javax-cache.version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">javax-cache.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javax-mail.version</span>&gt;</span>1.5.6<span class="tag">&lt;/<span class="name">javax-mail.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javax-transaction.version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">javax-transaction.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javax-validation.version</span>&gt;</span>1.1.0.Final<span class="tag">&lt;/<span class="name">javax-validation.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxen.version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">jaxen.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaybird.version</span>&gt;</span>2.2.13<span class="tag">&lt;/<span class="name">jaybird.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jboss-logging.version</span>&gt;</span>3.3.1.Final<span class="tag">&lt;/<span class="name">jboss-logging.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jboss-transaction-spi.version</span>&gt;</span>7.6.0.Final<span class="tag">&lt;/<span class="name">jboss-transaction-spi.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdom2.version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">jdom2.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jedis.version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">jedis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jersey.version</span>&gt;</span>2.25.1<span class="tag">&lt;/<span class="name">jersey.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jest.version</span>&gt;</span>2.0.4<span class="tag">&lt;/<span class="name">jest.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jetty.version</span>&gt;</span>9.4.7.v20170914<span class="tag">&lt;/<span class="name">jetty.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jetty-jsp.version</span>&gt;</span>2.2.0.v201112011158<span class="tag">&lt;/<span class="name">jetty-jsp.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jetty-el.version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">jetty-el.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jms-api.version</span>&gt;</span>1.1-rev-1<span class="tag">&lt;/<span class="name">jms-api.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jmustache.version</span>&gt;</span>1.13<span class="tag">&lt;/<span class="name">jmustache.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jna.version</span>&gt;</span>4.2.2<span class="tag">&lt;/<span class="name">jna.version</span>&gt;</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>文件有2000多行…里面配置的就是实实在在的依赖….</p><h3 id="不继承Spring-Boot的Parent"><a href="#不继承Spring-Boot的Parent" class="headerlink" title="不继承Spring Boot的Parent"></a>不继承Spring Boot的Parent</h3><p>对于我们自己的Maven项目很多时候，要使用的自己的公司标准parent<br>如果你不想使用spring-boot-starter-parent，您仍然可以通过使用scope = import依赖关系来保持依赖关系管理： </p><ul><li>首先在自己公司的parent模块的pom.xml加入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Import dependency management from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后在你子模块就继承你自己公司标准的parent,并配置如下依赖引入spring boot</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring-boot初始项目依赖"><a href="#spring-boot初始项目依赖" class="headerlink" title="spring boot初始项目依赖"></a>spring boot初始项目依赖</h3><p>接下来我们看哈一个spring boot初始项目，到底引入了那些依赖，通过mvn dependency:list查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[INFO]</span> <span class="selector-tag">The</span> <span class="selector-tag">following</span> <span class="selector-tag">files</span> <span class="selector-tag">have</span> <span class="selector-tag">been</span> <span class="selector-tag">resolved</span>:</span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-pseudo">:spring-boot-starter-logging</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.5.9.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">com</span><span class="selector-class">.fasterxml</span><span class="selector-class">.jackson</span><span class="selector-class">.core</span><span class="selector-pseudo">:jackson-annotations</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:2.8.0</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">com</span><span class="selector-class">.fasterxml</span><span class="selector-class">.jackson</span><span class="selector-class">.core</span><span class="selector-pseudo">:jackson-core</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:2.8.10</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.ow2</span><span class="selector-class">.asm</span><span class="selector-pseudo">:asm</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:5.0.3</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.embed</span><span class="selector-pseudo">:tomcat-embed-el</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:8.5.23</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.jboss</span><span class="selector-class">.logging</span><span class="selector-pseudo">:jboss-logging</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:3.3.1.Final</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.slf4j</span><span class="selector-pseudo">:log4j-over-slf4j</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.7.25</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.hibernate</span><span class="selector-pseudo">:hibernate-validator</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:5.3.6.Final</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.hamcrest</span><span class="selector-pseudo">:hamcrest-library</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.3</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-context</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.13.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-core</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.13.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">ch</span><span class="selector-class">.qos</span><span class="selector-class">.logback</span><span class="selector-pseudo">:logback-core</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.1.11</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.mockito</span><span class="selector-pseudo">:mockito-core</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.10.19</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-test</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.13.RELEASE</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-pseudo">:spring-boot-autoconfigure</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.5.9.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-web</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.13.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-beans</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.13.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-pseudo">:spring-boot-test</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.5.9.RELEASE</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.assertj</span><span class="selector-pseudo">:assertj-core</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:2.6.0</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-pseudo">:spring-boot-starter-web</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.5.9.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.skyscreamer</span><span class="selector-pseudo">:jsonassert</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.4.0</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.yaml</span><span class="selector-pseudo">:snakeyaml</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.17</span><span class="selector-pseudo">:runtime</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">com</span><span class="selector-class">.fasterxml</span><span class="selector-pseudo">:classmate</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.3.4</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.objenesis</span><span class="selector-pseudo">:objenesis</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:2.1</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.slf4j</span><span class="selector-pseudo">:jcl-over-slf4j</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.7.25</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-expression</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.13.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-pseudo">:spring-boot-starter-test</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.5.9.RELEASE</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-pseudo">:spring-boot-starter-tomcat</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.5.9.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.hamcrest</span><span class="selector-pseudo">:hamcrest-core</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.3</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">com</span><span class="selector-class">.jayway</span><span class="selector-class">.jsonpath</span><span class="selector-pseudo">:json-path</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:2.2.0</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-pseudo">:spring-boot-devtools</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.5.9.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.embed</span><span class="selector-pseudo">:tomcat-embed-websocket</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:8.5.23</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">junit</span><span class="selector-pseudo">:junit</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.12</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-webmvc</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.13.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.slf4j</span><span class="selector-pseudo">:slf4j-api</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.7.25</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-pseudo">:spring-boot-starter</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.5.9.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">net</span><span class="selector-class">.minidev</span><span class="selector-pseudo">:json-smart</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:2.2.1</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-pseudo">:tomcat-annotations-api</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:8.5.23</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">net</span><span class="selector-class">.minidev</span><span class="selector-pseudo">:accessors-smart</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.1</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-pseudo">:spring-boot</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.5.9.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">javax</span><span class="selector-class">.validation</span><span class="selector-pseudo">:validation-api</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.1.0.Final</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-aop</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.13.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">com</span><span class="selector-class">.vaadin</span><span class="selector-class">.external</span><span class="selector-class">.google</span><span class="selector-pseudo">:android-json</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:0.0.20131108.vaadin1</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.embed</span><span class="selector-pseudo">:tomcat-embed-core</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:8.5.23</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">ch</span><span class="selector-class">.qos</span><span class="selector-class">.logback</span><span class="selector-pseudo">:logback-classic</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.1.11</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-pseudo">:spring-boot-test-autoconfigure</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.5.9.RELEASE</span><span class="selector-pseudo">:test</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.slf4j</span><span class="selector-pseudo">:jul-to-slf4j</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.7.25</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">com</span><span class="selector-class">.fasterxml</span><span class="selector-class">.jackson</span><span class="selector-class">.core</span><span class="selector-pseudo">:jackson-databind</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:2.8.10</span><span class="selector-pseudo">:compile</span></span><br></pre></td></tr></table></figure><p>嘿嘿嘿，看来依赖了好多呢，如果让我自己弄估计要调半天，所以Spring Boot通过提供众多起步依赖降低项目依赖的复杂度。<br>起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，<br>这些东西加在一起即支持某项功能。很多起步依赖的命名都暗示了它们提供的某种或者某类功能。</p><h3 id="Spring-Boot-Maven插件"><a href="#Spring-Boot-Maven插件" class="headerlink" title="Spring Boot Maven插件"></a>Spring Boot Maven插件</h3><p>加入如下配置在你的pom.xml里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的配置就是Spring Boot Maven插件，Spring Boot Maven插件提供了许多方便的功能：</p><ul><li>把项目打包成一个可执行的超级JAR（uber-JAR）,包括把应用程序的所有依赖打入JAR文件内，并为JAR添加一个描述文件，其中的内容能让你用java -jar来运行应用程序。</li><li>搜索public static void main()方法来标记为可运行类。</li></ul><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(<span class="meta-string">"/"</span>)</span></span><br><span class="line">    String home()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Project"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Example.<span class="keyword">class</span>,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Boot 推荐采用基于 Java Config 的配置方式，而不是传统的 XML。例如，<br>@Configuration、@Bean、@EnableAutoConfiguration、@CompomentScan、@PropertySource、@Repository、@Service、@RestController等。</p><ul><li>@SpringBootApplication是Sprnig Boot项目的核心注解，主要目的是开启自动配置。后续讲解原理的时候再深入介绍。</li><li>main方法这是一个标准的Java应用的main的方法，主要作用是作为项目启动的入口。</li><li>@RestController注解等价于@Controller+@ResponseBody的结合，使用这个注解的类里面的方法都以json格式输出。</li></ul><h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><ul><li>直接执行启动类的main方法</li><li>利用spring boot的maven插件执行 mvn spring-boot:run</li><li>打包后 java -jar 去运行</li></ul><h2 id="Spring-Boot常用模块"><a href="#Spring-Boot常用模块" class="headerlink" title="Spring Boot常用模块"></a>Spring Boot常用模块</h2><p>Spring Boot提供了很多”开箱即用“的依赖模块，都是以spring-boot-starter-xx作为命名的。下面列举一些常用的模块。</p><ul><li>spring-boot-starter-logging ：使用 Spring Boot 默认的日志框架 Logback。</li><li>spring-boot-starter-log4j ：添加 Log4j 的支持。</li><li>spring-boot-starter-web ：支持 Web 应用开发，包含 Tomcat 和 spring-mvc。</li><li>spring-boot-starter-tomcat ：使用 Spring Boot 默认的 Tomcat 作为应用服务器。</li><li>spring-boot-starter-jetty ：使用 Jetty 而不是默认的 Tomcat 作为应用服务器。</li><li>spring-boot-starter-test ：包含常用的测试所需的依赖，如 JUnit、Hamcrest、Mockito 和 spring-test 等。</li><li>spring-boot-starter-aop ：包含 spring-aop 和 AspectJ 来支持面向切面编程（AOP）。</li><li>spring-boot-starter-security ：包含 spring-security。</li><li>spring-boot-starter-jdbc ：支持使用 JDBC 访问数据库。</li><li>spring-boot-starter-redis ：支持使用 Redis。</li><li>spring-boot-starter-data-mongodb ：包含 spring-data-mongodb 来支持 MongoDB。</li><li>spring-boot-starter-data-jpa ：包含 spring-data-jpa、spring-orm 和 Hibernate 来支持 JPA。</li><li>spring-boot-starter-amqp ：通过 spring-rabbit 支持 AMQP。</li><li>spring-boot-starter-actuator ： 添加适用于生产环境的功能，如性能指标和监测等功能。</li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>虽然上面讲解了那么多，但是实际开发步骤很简单，初始化一个Spring Boot，添加一个控制类，启动就能看到效果了。<br>作为入门Spring Boot的入门介绍，相关的需要理解的概念就只有这几点：</p><ul><li>Spring Boot父级依赖的概念</li><li>集成依赖 spring-boot-starter-xx的概念</li><li>应用入口类的作用</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>logback</title>
      <link href="/2017/11/17/logback/"/>
      <url>/2017/11/17/logback/</url>
      <content type="html"><![CDATA[<p>实现Logback的java配置</p><h3 id="Configuration-in-logback"><a href="#Configuration-in-logback" class="headerlink" title="Configuration in logback"></a>Configuration in logback</h3><p>Let us begin by discussing the initialization steps that logback follows to try to configure itself:</p><ul><li><p>Logback tries to find a file called logback-test.xml in the classpath.</p></li><li><p>If no such file is found, logback tries to find a file called logback.groovy in the classpath.</p></li><li><p>If no such file is found, it checks for the file logback.xml in the classpath..</p></li><li><p>If no such file is found, service-provider loading facility (introduced in JDK 1.6) is used to resolve the<br>implementation of com.qos.logback.classic.spi.Configurator interface by looking up the file<br>META-INF\services\ch.qos.logback.classic.spi.Configurator in the class path.<br>Its contents should specify the fully qualified class name of the desired Configurator implementation.</p></li><li><p>If none of the above succeeds, logback configures itself automatically using the BasicConfigurator which will cause<br>logging output to be directed to the console.</p></li></ul><p><a href="https://logback.qos.ch/manual/configuration.html" target="_blank" rel="noopener">https://logback.qos.ch/manual/configuration.html</a></p><p>以上的来自官网对logback的寻找配置文件的顺序，其中有SPI的机制META-INF\services\ch.qos.logback.classic.spi.Configurator</p><p>以下就是实现接口类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.AsyncAppender;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Level;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Logger;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.layout.TTLLLayout;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.Configurator;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.spi.ILoggingEvent;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.ConsoleAppender;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.encoder.LayoutWrappingEncoder;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.core.spi.ContextAwareBase;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * maxp 2017年11月21日09:08:432</span></span><br><span class="line"><span class="comment"> * java配置日志代替logback.xml</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaLogBackConfig</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">ContextAwareBase</span></span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Configurator</span></span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有的logger，方便在线修改logger的level</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final ConcurrentHashMap&lt;<span class="keyword">String</span>,Logger&gt; loggerMaps = <span class="keyword">new</span> <span class="type">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">String</span> APPENDER_CONSOLE=<span class="string">"console"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">String</span> APPENDER_KAFKA=<span class="string">"kafka"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">String</span> APPENDER_ASYNC_KAFKA=<span class="string">"asyncKafka"</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void configure(LoggerContext loggerContext) &#123;</span><br><span class="line">        <span class="comment">//读取log.properties文件</span></span><br><span class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; logPropsMap =  loadLogProps();</span><br><span class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; loggerPropsMaps= loadLoggerProps(logPropsMap);</span><br><span class="line">        <span class="comment">//实例化consoleAppender</span></span><br><span class="line">        ConsoleAppender&lt;ILoggingEvent&gt; ca = <span class="keyword">new</span> <span class="type">ConsoleAppender</span>&lt;ILoggingEvent&gt;();</span><br><span class="line">        ca.setContext(loggerContext);</span><br><span class="line">        ca.setName(<span class="string">"STDOUT"</span>);</span><br><span class="line">        LayoutWrappingEncoder&lt;ILoggingEvent&gt; encoder = <span class="keyword">new</span> <span class="type">LayoutWrappingEncoder</span>&lt;ILoggingEvent&gt;();</span><br><span class="line">        encoder.setContext(loggerContext);</span><br><span class="line">        <span class="comment">// layout.setPattern("%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n");</span></span><br><span class="line">        <span class="comment">//实例化日志输出格式</span></span><br><span class="line">        TTLLLayout layout = <span class="keyword">new</span> <span class="type">TTLLLayout</span>();</span><br><span class="line">        layout.setContext(loggerContext);</span><br><span class="line">        layout.start();</span><br><span class="line">        encoder.setLayout(layout);</span><br><span class="line">        ca.setEncoder(encoder);</span><br><span class="line">        ca.start();<span class="comment">//开启</span></span><br><span class="line">        <span class="keyword">String</span> appenders = logPropsMap.<span class="keyword">get</span>(<span class="string">"appender"</span>);</span><br><span class="line">        <span class="keyword">if</span>(appenders.contains(APPENDER_KAFKA))&#123;</span><br><span class="line">            KafkaAppender&lt;ILoggingEvent&gt; kafkaAppender = <span class="keyword">new</span> <span class="type">KafkaAppender</span>&lt;&gt;();</span><br><span class="line">            kafkaAppender.setTopic(logPropsMap.<span class="keyword">get</span>(<span class="string">"kafka.topic"</span>));</span><br><span class="line">            kafkaAppender.setKeyingStrategy(<span class="keyword">new</span> <span class="type">RoundRobinKeyingStrategy</span>());</span><br><span class="line">            kafkaAppender.setDeliveryStrategy(<span class="keyword">new</span> <span class="type">BlockingDeliveryStrategy</span>());</span><br><span class="line">            kafkaAppender.addProducerConfig(logPropsMap.<span class="keyword">get</span>(<span class="string">"kafka.producerConfig"</span>));</span><br><span class="line">            kafkaAppender.addAppender(ca);</span><br><span class="line">            kafkaAppender.start();</span><br><span class="line">            <span class="keyword">if</span>(appenders.contains(APPENDER_ASYNC_KAFKA))&#123;</span><br><span class="line">                AsyncAppender asyncKafkaAppender = <span class="keyword">new</span> <span class="type">AsyncAppender</span>();</span><br><span class="line">                <span class="comment">//不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志</span></span><br><span class="line">                asyncKafkaAppender.setDiscardingThreshold(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 更改默认的队列的深度,该值会影响性能.默认值为256</span></span><br><span class="line">                asyncKafkaAppender.setQueueSize(<span class="number">512</span>);</span><br><span class="line">                asyncKafkaAppender.addAppender(ca);</span><br><span class="line">                asyncKafkaAppender.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Logger logger = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; loggerEntry:<span class="type">loggerPropsMaps</span>.entrySet())&#123;</span><br><span class="line">            logger = loggerContext.getLogger(loggerEntry.getKey());</span><br><span class="line">            logger.setAdditive(<span class="literal">false</span>);</span><br><span class="line">            logger.setLevel(Level.toLevel(loggerEntry.getValue()));<span class="comment">//设置level</span></span><br><span class="line">            logger.addAppender(ca);</span><br><span class="line">            loggerMaps.put(loggerEntry.getKey(),logger);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根logger</span></span><br><span class="line">        Logger rootLogger = loggerContext.getLogger(Logger.ROOT_LOGGER_NAME);</span><br><span class="line">        rootLogger.addAppender(ca);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载所有的logger</span></span><br><span class="line"><span class="comment">     * @param logProps</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; loadLoggerProps(Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; logProps) &#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; loggerPropsMaps = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(!ValidateUtil.isEmpty(logProps))&#123;</span><br><span class="line">            logProps.keySet()</span><br><span class="line">                    .stream()</span><br><span class="line">                    .filter(key -&gt; key.startsWith(<span class="string">"logger"</span>))</span><br><span class="line">                    .forEach(key -&gt;loggerPropsMaps.put(key.substring(<span class="number">7</span>),logProps.<span class="keyword">get</span>(key)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> loggerPropsMaps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载log.properties</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; loadLogProps()&#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; logProps = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            ResourcePropertySource propertySource = <span class="keyword">new</span> <span class="type">ResourcePropertySource</span>(<span class="string">"log.properties"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">String</span> propKey: <span class="type">propertySource</span>.getPropertyNames()) &#123;</span><br><span class="line">                logProps.put(propKey, (<span class="keyword">String</span>) propertySource.getProperty(propKey));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException ioe)&#123;</span><br><span class="line">            addError(ioe.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> logProps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> logback </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hystrix:Latency and Fault Tolerance for Distributed Systems</title>
      <link href="/2017/11/06/hystrix/"/>
      <url>/2017/11/06/hystrix/</url>
      <content type="html"><![CDATA[<h1 id="Command-Pattern"><a href="#Command-Pattern" class="headerlink" title="Command Pattern"></a>Command Pattern</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在面向对象的程序设计中，一个对象调用另一对象，一般情况下的调用过程就是：创建目标对象实例；设置调用参数；调用目标对象方法。<br>但是有些情况下有必要使用一个专门的类对这种调用过程加以封装，把这种专门的类一般称作Command类。</p><p>任何模式的出现，都是为了解决一些特定场景的耦合问题，以达到对封闭的修改，对扩展的开放的效果，命令模式也不例外：命令模式是为了解决<br>命令的请求者和命令的实现者的耦合关系。</p><h2 id="模式解析"><a href="#模式解析" class="headerlink" title="模式解析"></a>模式解析</h2><ul><li>Command:定义命令的统一接口</li><li>ConcreteCommand:Command接口的实现者，用来执行具体的命令</li><li>Receiver:命令的实际执行者</li><li>Invoker:命令的请求者，是命令模式中最重要的角色，这个角色用来对各个命令进行控制</li></ul><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>Observer模式的构成：</p><ul><li><p>被观察者：内部状态有可能被改变，而且又需要通知外部的对象</p></li><li><p>观察者：需要对内部状态的改变做出响应的对象</p></li></ul><p>Java的API中已经为我们提供了Observer模式的实现。具体由java.util.Observable类和java.util.Observer接口完成。</p><p>Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems,services and 3rd<br>party library,stop cascading failure and enable resilience in complex distributed systems where failure is inevitable.</p><ul><li>resilience,n. 恢复力；弹力；顺应力</li><li>inevitable,adj. 必然的，不可避免的</li></ul><h1 id="What-does-it-do"><a href="#What-does-it-do" class="headerlink" title="What does it do?"></a>What does it do?</h1><ul><li>Latency and Fault Tolerance</li></ul><p>Stop cascading failures. Fallbacks and graceful degradation. Fail fast and rapid recovery.<br>Thread and semaphore isolation with circuit breakers.</p><ul><li><p>degradation,n. 退化；降格，降级；堕落</p></li><li><p>Realtime Operations</p></li></ul><p>Realtime monitoring and configuration changes. Watch service and property changes take effect immediately as they spread across a fleet.<br>Be alerted, make decisions, affect change and see results in seconds.</p><ul><li><p>fleet,adj. 快速的，敏捷的,n. 舰队；港湾；小河</p></li><li><p>Concurrency</p></li></ul><p>Parallel execution. Concurrency aware request caching. Automated batching through request collapsing.</p><h1 id="What-Is-Hystrix"><a href="#What-Is-Hystrix" class="headerlink" title="What Is Hystrix?"></a>What Is Hystrix?</h1><p> Hystrix is a library that helps you control the interactions between these distributed services by adding <em>latency tolerance and fault tolerance logic</em>. Hystrix does this by isolating points of access between the services, stopping cascading failures across them, and providing fallback options, all of which improve your system’s overall resiliency.</p><h1 id="What-Is-Hystrix-For"><a href="#What-Is-Hystrix-For" class="headerlink" title="What Is Hystrix For?"></a>What Is Hystrix For?</h1><ul><li>Give protection from and control over latency and failure from dependencies accessed (typically over the network) via third-party client libraries.</li><li>Stop cascading failures in a complex distributed system.</li><li>Fail fast and rapidly recover.</li><li>Fallback and gracefully degrade when possible.</li><li>Enable near real-time monitoring, alerting, and operational control.</li></ul><h1 id="What-Design-Principles-Underlie-Hystrix"><a href="#What-Design-Principles-Underlie-Hystrix" class="headerlink" title="What Design Principles Underlie Hystrix?"></a>What Design Principles Underlie Hystrix?</h1><ul><li>Preventing any single dependency from using up all container (such as Tomcat) user threads.</li><li>Shedding load and failing fast instead of queueing.</li><li>Providing fallbacks wherever feasible to protect users from failure.</li><li>Using isolation techniques (such as bulkhead, swimlane, and circuit breaker patterns) to limit the impact of any one dependency.</li><li>Optimizing for time-to-discovery through near real-time metrics, monitoring, and alerting</li><li>Optimizing for time-to-recovery by means of low latency propagation of configuration changes and support for dynamic property changes in most aspects of Hystrix, which allows you to make real-time operational modifications with low latency feedback loops.</li><li>Protecting against failures in the entire dependency client execution, not just in the network traffic.</li></ul><h1 id="How-Does-Hystrix-Accomplish-Its-Goals"><a href="#How-Does-Hystrix-Accomplish-Its-Goals" class="headerlink" title="How Does Hystrix Accomplish Its Goals?"></a>How Does Hystrix Accomplish Its Goals?</h1><ul><li>Wrapping all calls to external systems (or “dependencies”) in a HystrixCommand or HystrixObservableCommand object which typically executes within a separate thread (this is an example of the command pattern).</li><li>Timing-out calls that take longer than thresholds you define. There is a default, but for most dependencies you custom-set these timeouts by means of “properties” so that they are slightly higher than the measured 99.5th percentile performance for each dependency.</li><li>Maintaining a small thread-pool (or semaphore) for each dependency; if it becomes full, requests destined for that dependency will be immediately rejected instead of queued up.</li><li>Measuring successes, failures (exceptions thrown by client), timeouts, and thread rejections.</li><li>Tripping a circuit-breaker to stop all requests to a particular service for a period of time, either manually or automatically if the error percentage for the service passes a threshold.</li><li>Performing fallback logic when a request fails, is rejected, times-out, or short-circuits.</li><li>Monitoring metrics and configuration changes in near real-time.</li></ul><h1 id="How-It-Works"><a href="#How-It-Works" class="headerlink" title="How It Works?"></a>How It Works?</h1><p><img src="http://orkt468tj.bkt.clouddn.com/17-11-6/59429903.jpg" alt=""></p><h3 id="Construct-a-HystrixCommand-or-HystrixObservableCommand-Object"><a href="#Construct-a-HystrixCommand-or-HystrixObservableCommand-Object" class="headerlink" title="Construct a HystrixCommand or HystrixObservableCommand Object"></a>Construct a HystrixCommand or HystrixObservableCommand Object</h3><h3 id="Execute-the-Command"><a href="#Execute-the-Command" class="headerlink" title="Execute the Command"></a>Execute the Command</h3><ul><li>execute()-blocks, then returns the single response received from the dependency (or throws an exception in case of an error)</li><li>queue() - returns a Future with which you can obtain the single response from the dependency</li><li>observe() — subscribes to the Observable that represents the response(s) from the dependency and returns an Observable that replicates that source Observable</li><li>toObservable() — returns an Observable that, when you subscribe to it, will execute the Hystrix command and emit its responses</li></ul><p>使用舱壁模式（bulkhead pattern）将问题隔离在服务的级别。<br>组件要快速失效，而不是等到组件超时并破坏了应用实例后才失效。没有什么比迟迟收不到回应和一个无响应的UI更让人失望了。</p><p>为每一个服务设置一个超时时间，不是一个好方法。因为你基本上不能给出“好的”超时时间。这是个反模式，要避免。</p><p>使用依赖于对操作成功/失败的统计的断路器模式（circuit-breaker pattern）来代替使用超时时间。</p><h3 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h3><ul><li><a href="https://github.com/Netflix/Hystrix" target="_blank" rel="noopener">Hystrix GitHub</a></li><li></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Hystrix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>极限与函数</title>
      <link href="/2017/10/23/maths-function/"/>
      <url>/2017/10/23/maths-function/</url>
      <content type="html"><![CDATA[<script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});</script><script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML"></script><p>初等数学的研究对象基本上不变的量，而高等数学的研究对象则是变动量。所谓函数的关系就是变量之间的依赖关系，极限方法则是研究变量的一种基本方法。</p><h1 id="第一节-映射与函数"><a href="#第一节-映射与函数" class="headerlink" title="第一节 映射与函数"></a>第一节 映射与函数</h1><h2 id="一、映射"><a href="#一、映射" class="headerlink" title="一、映射"></a>一、映射</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>定义 设X、Y是2个非空集合，如果存在一个法则f,使得X中的每一个元素x,按照法则f,在Y中有唯一确定的元素y与之对应，那么称f为从X到Y的映射，记作$$f:X\to Y$$<br>其中y称为元素x在映射f下的<strong>像</strong>,并记作f(x),即$y=f(x)$<br>而元素x称为元素y在映射f下的<strong>原像</strong>,集合X称为f的定义域，记作为$D_f$即$D_f=X$;<br>X中所有的元素的像锁组成的集合称为映射f的值域，记作$R_f$或f(X)即<br>$$R_f=f(X)=\{f(x)\mid x \ni X\}$$</p><p>从上述的定义中需要的注意的问题:</p><ul><li>构成一个映射必须具备以下3个要素,集合X,即定义域$D_f=X$,集合Y,即值域的范围：$R_f \subset Y$;对应法则f,使每个$x \in X$，都有唯一的确定的y=f(x)与之对应。</li><li>对每个$x \in X$,元素x的像y是唯一的;而对每个$y \in R_f$,元素的y的原像不一定是唯一的；映射f的值域$R_f$是Y的一个子集，即$R_f \subset Y$,不一定$R_f=Y$</li></ul><p>设f是集合X到集合Y的映射，若$R_f=Y$,即Y中的任一元素y都是X中某元素的像，则称f为X到Y上的映射或满射；若对X中任意2个不同的元素$X_1 \neq X_2$，他们的像$f(x_1) \neq f(x_2)$,则称f为X到Y的单射；若映射即是单射又是满射，则称f为一一映射。</p><h3 id="2-逆映射和复合映射"><a href="#2-逆映射和复合映射" class="headerlink" title="2.逆映射和复合映射"></a>2.逆映射和复合映射</h3><p>设f是X到Y的单射，则由定义，每个$y \in R_f$,有唯一的$x \subset X$，适合f(x)=y,可以定义一个从$R_f$到X的新映射g，即$$g:R_f \to X$$<br>对于每个$y\subset R_f$,规定g(y)=x，这个x满足f(x)=y，这个映射g称为f的逆映射，记作<br>$f^{-1}$,其定义域$D_f{^{-1}}=R_f$,值域$R_f{^{-1}}=X$.</p><p>设有2个映射<br>$$g:X\to Y_1,f:Y_2\to Z$$<br>其中$Y1 \subset Y2$,则由映射g和f可以定义一个从X到Z的对应法则，它将每个$x \in X$映射称$f[g(x)] \in Z$.显然这个对应的法则确定了一个从X到Z的映射，这个映射称为映射g和f构成的复合映射，记作$f\cdot g$,即$$f\cdot g:X\to Z,(f\cdot g)(x)=f[g(x)],x\in X$$.</p><h2 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h2><h3 id="1-函数的概念"><a href="#1-函数的概念" class="headerlink" title="1.函数的概念"></a>1.函数的概念</h3><p>定义 设数集$D\subset R$,则称映射$f:D\to R$为定义在D上的函数，通常简记为<br>$$y=f(x),x\in D$$<br>其中x为自变量，y为应变量，D为定义域，记作$D_f$,即$D_f=D$.</p><p>函数是从实数集到实数集的映射，其值域总在R内，因此构成函数的要素是：定义域$D_f$以及对应法则f.如果2个函数的定义域相同，对应法则也相同，那么这2个函数是相同的。</p><p>表示函数的主要方法有三种：表格法，图形法，解析法(公式法)。</p><p>其中图形法表示函数是基于函数图形的概念，即坐标平面的上的点。</p>]]></content>
      
      
        <tags>
            
            <tag> maths </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>using mathematics in markdown</title>
      <link href="/2017/10/20/using-mathematics-markdown/"/>
      <url>/2017/10/20/using-mathematics-markdown/</url>
      <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML"></script><h2 id="mathjax"><a href="#mathjax" class="headerlink" title="mathjax"></a>mathjax</h2><p><a href="https://github.com/mathjax/MathJax" target="_blank" rel="noopener">mathjax GitHub</a><br><a href="http://docs.mathjax.org/en/latest/mathjax.html" target="_blank" rel="noopener">Document</a></p><h2 id="How-to-use-Mathjax-in-this-blog"><a href="#How-to-use-Mathjax-in-this-blog" class="headerlink" title="How to use Mathjax in this blog?"></a>How to use Mathjax in this blog?</h2><h3 id="Using-a-Content-Deleivery-Network-CND-in-markdown-file"><a href="#Using-a-Content-Deleivery-Network-CND-in-markdown-file" class="headerlink" title="Using a Content Deleivery Network(CND) in markdown file"></a>Using a Content Deleivery Network(CND) in markdown file</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Notes:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">The <span class="keyword">default</span> math delimiters are $$...$$ and \[...\] <span class="keyword">for</span> displayed mathematics, and \(...\) <span class="keyword">for</span> <span class="keyword">in</span>-line mathematics. Note <span class="keyword">in</span> particular that the $...$ <span class="keyword">in</span>-line delimiters are not used by <span class="keyword">default</span>. </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">&lt;script type=<span class="string">"text/x-mathjax-config"</span>&gt;</span><br><span class="line">MathJax.Hub.Config(&#123;</span><br><span class="line">  tex2jax: &#123;<span class="attr">inlineMath</span>: [[<span class="string">'$'</span>,<span class="string">'$'</span>], [<span class="string">'\\('</span>,<span class="string">'\\)'</span>]]&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">--------------------------------------------------------------</span></span><br></pre></td></tr></table></figure></p><h3 id="Putting-mathematics-in-a-markdown-file"><a href="#Putting-mathematics-in-a-markdown-file" class="headerlink" title="Putting mathematics in a markdown file"></a>Putting mathematics in a markdown file</h3><p>The default math delimiters are $$…$$ and […] for displayed mathematics, and (…) for in-line mathematics.</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>x = &#123;-b \pm \<span class="built-in">sqrt</span>&#123;b^<span class="number">2</span><span class="number">-4</span>ac&#125; \over <span class="number">2</span>a&#125;.<span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><h2 id="LaTex-Symbols"><a href="#LaTex-Symbols" class="headerlink" title="LaTex Symbols"></a>LaTex Symbols</h2><p>Mathematics that is written in TeX or LaTeX format is indicated using math delimiters that surround the mathematics</p><p><a href="http://www.latexstudio.net/" target="_blank" rel="noopener">Reference</a></p><p><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols" target="_blank" rel="noopener">LaTeX:Symbols</a></p><table><thead><tr><th style="text-align:left">Symbol</th><th style="text-align:left">Command</th><th style="text-align:left">Symbol</th><th style="text-align:left">Command</th><th style="text-align:left">Symbol</th><th style="text-align:left">Command</th></tr></thead><tbody><tr><td style="text-align:left">$$+$$</td><td style="text-align:left">键盘+</td><td style="text-align:left">$$-$$</td><td style="text-align:left">键盘-</td><td style="text-align:left">$$\times$$</td><td style="text-align:left">\times</td></tr><tr><td style="text-align:left">$$\div$$</td><td style="text-align:left">\div</td><td style="text-align:left">$$=$$</td><td style="text-align:left">键盘=</td><td style="text-align:left">$$&gt;$$</td><td style="text-align:left">键盘&gt;</td></tr><tr><td style="text-align:left">$$&lt;$$</td><td style="text-align:left">键盘&lt;</td><td style="text-align:left">$$\ge$$</td><td style="text-align:left">\ge</td><td style="text-align:left">$$\le$$</td><td style="text-align:left">\le</td></tr><tr><td style="text-align:left">$$\neq$$</td><td style="text-align:left">\neq</td><td style="text-align:left">$$\approx$$</td><td style="text-align:left">\approx</td><td style="text-align:left">$$\sim$$</td><td style="text-align:left">\sim</td></tr><tr><td style="text-align:left">$$\subset$$</td><td style="text-align:left">\subset</td><td style="text-align:left">$$\supset$$</td><td style="text-align:left">\supset</td><td style="text-align:left">$$\subseteq$$</td><td style="text-align:left">\subseteq</td></tr><tr><td style="text-align:left">$$\propto$$</td><td style="text-align:left">\propto</td><td style="text-align:left">$$\bowtie$$</td><td style="text-align:left">\bowtie</td><td style="text-align:left">$$\subseteq$$</td><td style="text-align:left">\subseteq</td></tr><tr><td style="text-align:left">$$\S$$</td><td style="text-align:left">\S</td><td style="text-align:left">$$\ell$$</td><td style="text-align:left">\ell</td><td style="text-align:left">$$\partial$$</td><td style="text-align:left">\partial</td></tr></tbody></table><p>$$\overbrace{a_0+a_1+a_2+\cdots+a_n}^{x}$$</p><p>$$\left(\frac{a}{x} \right)^2$$</p><p>$$\int 2x\,dx = x^2+C$$</p><p>$$\frac{\partial^2U}{\partial x^2} + \frac{\partial^2U}{\partial y^2}$$</p>]]></content>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4.学习笔记源码分析-创建 bean</title>
      <link href="/2017/10/17/ioc-4-create-bean/"/>
      <url>/2017/10/17/ioc-4-create-bean/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>详细分析doCreateBean方法中的一个重要的调用，即createBeanInstance方法。在本篇文章中，你将看到三种不同的构造 bean 对象的方式。你也会了解到构造 bean 对象的两种策略。</p><h2 id="创建bean对象的过程"><a href="#创建bean对象的过程" class="headerlink" title="创建bean对象的过程"></a>创建bean对象的过程</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function">BeanWrapper <span class="title">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, Object[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 检测类的访问权限。默认情况下，对于非 public 的类，是允许访问的。</span></span><br><span class="line"><span class="comment">     * 若禁止访问，这里会抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (beanClass != <span class="keyword">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                <span class="string">"Bean class isn't public, and non-public access not allowed: "</span> + beanClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果工厂方法不为空，则通过工厂方法构建 bean 对象。这种构建 bean 的方式</span></span><br><span class="line"><span class="comment">     * 就不深入分析了，有兴趣的朋友可以自己去看一下。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="keyword">null</span>)  &#123;</span><br><span class="line">        <span class="comment">// 通过“工厂方法”的方式构建 bean 对象</span></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">instantiateUsingFactoryMethod</span><span class="params">(beanName, mbd, args)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 当多次构建同一个 bean 时，可以使用此处的快捷路径，即无需再次推断应该使用哪种方式构造实例，</span></span><br><span class="line"><span class="comment">     * 以提高效率。比如在多次构建同一个 prototype 类型的 bean 时，就可以走此处的捷径。</span></span><br><span class="line"><span class="comment">     * 这里的 resolved 和 mbd.constructorArgumentsResolved 将会在 bean 第一次实例</span></span><br><span class="line"><span class="comment">     * 化的过程中被设置，在后面的源码中会分析到，先继续往下看。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">boolean</span> resolved = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> autowireNecessary = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (args == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resolved = <span class="keyword">true</span>;</span><br><span class="line">                autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">        <span class="keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">            <span class="comment">// 通过“构造方法自动注入”的方式构造 bean 对象</span></span><br><span class="line">            <span class="function"><span class="keyword">return</span> <span class="title">autowireConstructor</span><span class="params">(beanName, mbd, <span class="keyword">null</span>, <span class="keyword">null</span>)</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 通过“默认构造方法”的方式构造 bean 对象</span></span><br><span class="line">            <span class="function"><span class="keyword">return</span> <span class="title">instantiateBean</span><span class="params">(beanName, mbd)</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由后置处理器决定返回哪些构造方法，这里不深入分析了</span></span><br><span class="line">    Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 下面的条件分支条件用于判断使用什么方式构造 bean 实例，有两种方式可选 - 构造方法自动</span></span><br><span class="line"><span class="comment">     * 注入和默认构造方法。判断的条件由4部分综合而成，如下：</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     *    条件1：ctors != null -&gt; 后置处理器返回构造方法数组是否为空</span></span><br><span class="line"><span class="comment">     *    </span></span><br><span class="line"><span class="comment">     *    条件2：mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR </span></span><br><span class="line"><span class="comment">     *              -&gt; bean 配置中的 autowire 属性是否为 constructor    </span></span><br><span class="line"><span class="comment">     *    条件3：mbd.hasConstructorArgumentValues() </span></span><br><span class="line"><span class="comment">     *              -&gt; constructorArgumentValues 是否存在元素，即 bean 配置文件中</span></span><br><span class="line"><span class="comment">     *                 是否配置了 &lt;construct-arg/&gt;</span></span><br><span class="line"><span class="comment">     *    条件4：!ObjectUtils.isEmpty(args) </span></span><br><span class="line"><span class="comment">     *              -&gt; args 数组是否存在元素，args 是由用户调用 </span></span><br><span class="line"><span class="comment">     *                 getBean(String name, Object... args) 传入的</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 上面4个条件，只要有一个为 true，就会通过构造方法自动注入的方式构造 bean 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (ctors != <span class="keyword">null</span> ||</span><br><span class="line">            mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">            mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line">        <span class="comment">// 通过“构造方法自动注入”的方式构造 bean 对象</span></span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">autowireConstructor</span><span class="params">(beanName, mbd, ctors, args)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过“默认构造方法”的方式构造 bean 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">instantiateBean</span><span class="params">(beanName, mbd)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行流程<ul><li>检测类的访问权限，若禁止访问，则抛出异常</li><li>若工厂方法不为空，则通过工厂方法构建 bean 对象，并返回结果</li><li>若构造方式已解析过，则走快捷路径构建 bean 对象，并返回结果</li><li>如第三步不满足，则通过组合条件决定使用哪种方式构建 bean 对象</li></ul></li></ul><h3 id="通过构造方法自动注入的方式创建-bean-实例"><a href="#通过构造方法自动注入的方式创建-bean-实例" class="headerlink" title="通过构造方法自动注入的方式创建 bean 实例"></a>通过构造方法自动注入的方式创建 bean 实例</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> BeanWrapper autowireConstructor(</span><br><span class="line">        <span class="keyword">String</span> beanName, RootBeanDefinition mbd, Constructor&lt;?&gt;[] ctors, <span class="keyword">Object</span>[] explicitArgs) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 ConstructorResolver 对象，并调用其 autowireConstructor 方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConstructorResolver(<span class="keyword">this</span>).autowireConstructor(beanName, mbd, ctors, explicitArgs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BeanWrapper autowireConstructor(<span class="keyword">final</span> <span class="keyword">String</span> beanName, <span class="keyword">final</span> RootBeanDefinition mbd,</span><br><span class="line">        Constructor&lt;?&gt;[] chosenCtors, <span class="keyword">final</span> <span class="keyword">Object</span>[] explicitArgs) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 BeanWrapperImpl 对象</span></span><br><span class="line">    BeanWrapperImpl bw = <span class="keyword">new</span> BeanWrapperImpl();</span><br><span class="line">    <span class="keyword">this</span>.beanFactory.initBeanWrapper(bw);</span><br><span class="line"></span><br><span class="line">    Constructor&lt;?&gt; constructorToUse = <span class="keyword">null</span>;</span><br><span class="line">    ArgumentsHolder argsHolderToUse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">Object</span>[] argsToUse = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定参数值列表（argsToUse）</span></span><br><span class="line">    <span class="keyword">if</span> (explicitArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">        argsToUse = explicitArgs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">Object</span>[] argsToResolve = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">            <span class="comment">// 获取已解析的构造方法</span></span><br><span class="line">            constructorToUse = (Constructor&lt;?&gt;) mbd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">            <span class="keyword">if</span> (constructorToUse != <span class="keyword">null</span> &amp;&amp; mbd.constructorArgumentsResolved) &#123;</span><br><span class="line">                <span class="comment">// 获取已解析的构造方法参数列表</span></span><br><span class="line">                argsToUse = mbd.resolvedConstructorArguments;</span><br><span class="line">                <span class="keyword">if</span> (argsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 若 argsToUse 为空，则获取未解析的构造方法参数列表</span></span><br><span class="line">                    argsToResolve = mbd.preparedConstructorArguments;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (argsToResolve != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 解析参数列表</span></span><br><span class="line">            argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (constructorToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="built_in">boolean</span> autowiring = (chosenCtors != <span class="keyword">null</span> ||</span><br><span class="line">                mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR);</span><br><span class="line">        ConstructorArgumentValues resolvedValues = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> minNrOfArgs;</span><br><span class="line">        <span class="keyword">if</span> (explicitArgs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            minNrOfArgs = explicitArgs.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues();</span><br><span class="line">            resolvedValues = <span class="keyword">new</span> ConstructorArgumentValues();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 确定构造方法参数数量，比如下面的配置：</span></span><br><span class="line"><span class="comment">             *     &lt;bean id="persion" class="xyz.coolblog.autowire.Person"&gt;</span></span><br><span class="line"><span class="comment">             *         &lt;constructor-arg index="0" value="xiaoming"/&gt;</span></span><br><span class="line"><span class="comment">             *         &lt;constructor-arg index="1" value="1"/&gt;</span></span><br><span class="line"><span class="comment">             *         &lt;constructor-arg index="2" value="man"/&gt;</span></span><br><span class="line"><span class="comment">             *     &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 此时 minNrOfArgs = maxIndex + 1 = 2 + 1 = 3，除了计算 minNrOfArgs，</span></span><br><span class="line"><span class="comment">             * 下面的方法还会将 cargs 中的参数数据转存到 resolvedValues 中</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取构造方法列表</span></span><br><span class="line">        Constructor&lt;?&gt;[] candidates = chosenCtors;</span><br><span class="line">        <span class="keyword">if</span> (candidates == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; beanClass = mbd.getBeanClass();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                candidates = (mbd.isNonPublicAccessAllowed() ?</span><br><span class="line">                        beanClass.getDeclaredConstructors() : beanClass.getConstructors());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"Resolution of declared constructors on bean Class ["</span> + beanClass.getName() +</span><br><span class="line">                        <span class="string">"] from ClassLoader ["</span> + beanClass.getClassLoader() + <span class="string">"] failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照构造方法的访问权限级别和参数数量进行排序</span></span><br><span class="line">        AutowireUtils.sortConstructors(candidates);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> minTypeDiffWeight = Integer.MAX_VALUE;</span><br><span class="line">        Set&lt;Constructor&lt;?&gt;&gt; ambiguousConstructors = <span class="keyword">null</span>;</span><br><span class="line">        LinkedList&lt;UnsatisfiedDependencyException&gt; causes = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; candidate : candidates) &#123;</span><br><span class="line">            Class&lt;?&gt;[] paramTypes = candidate.getParameterTypes();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 下面的 if 分支的用途是：若匹配到到合适的构造方法了，提前结束 for 循环</span></span><br><span class="line"><span class="comment">             * constructorToUse != null 这个条件比较好理解，下面分析一下条件 argsToUse.length &gt; paramTypes.length：</span></span><br><span class="line"><span class="comment">             * 前面说到 AutowireUtils.sortConstructors(candidates) 用于对构造方法进行</span></span><br><span class="line"><span class="comment">             * 排序，排序规则如下：</span></span><br><span class="line"><span class="comment">             *   1. 具有 public 访问权限的构造方法排在非 public 构造方法前</span></span><br><span class="line"><span class="comment">             *   2. 参数数量多的构造方法排在前面</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 假设现在有一组构造方法按照上面的排序规则进行排序，排序结果如下（省略参数名称）：</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             *   1. public Hello(Object, Object, Object)</span></span><br><span class="line"><span class="comment">             *   2. public Hello(Object, Object)</span></span><br><span class="line"><span class="comment">             *   3. public Hello(Object)</span></span><br><span class="line"><span class="comment">             *   4. protected Hello(Integer, Object, Object, Object)</span></span><br><span class="line"><span class="comment">             *   5. protected Hello(Integer, Object, Object)</span></span><br><span class="line"><span class="comment">             *   6. protected Hello(Integer, Object)</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * argsToUse = [num1, obj2]，可以匹配上的构造方法2和构造方法6。由于构造方法2有</span></span><br><span class="line"><span class="comment">             * 更高的访问权限，所以没理由不选他（尽管后者在参数类型上更加匹配）。由于构造方法3</span></span><br><span class="line"><span class="comment">             * 参数数量 &lt; argsToUse.length，参数数量上不匹配，也不应该选。所以 </span></span><br><span class="line"><span class="comment">             * argsToUse.length &gt; paramTypes.length 这个条件用途是：在条件 </span></span><br><span class="line"><span class="comment">             * constructorToUse != null 成立的情况下，通过判断参数数量与参数值数量</span></span><br><span class="line"><span class="comment">             * （argsToUse.length）是否一致，来决定是否提前终止构造方法匹配逻辑。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (constructorToUse != <span class="keyword">null</span> &amp;&amp; argsToUse.length &gt; paramTypes.length) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 构造方法参数数量低于配置的参数数量，则忽略当前构造方法，并重试。比如 </span></span><br><span class="line"><span class="comment">             * argsToUse = [obj1, obj2, obj3, obj4]，上面的构造方法列表中，</span></span><br><span class="line"><span class="comment">             * 构造方法1、2和3显然不是合适选择，忽略之。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (paramTypes.length &lt; minNrOfArgs) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ArgumentsHolder argsHolder;</span><br><span class="line">            <span class="keyword">if</span> (resolvedValues != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 判断否则方法是否有 ConstructorProperties 注解，若有，则取注解中的</span></span><br><span class="line"><span class="comment">                     * 值。比如下面的代码：</span></span><br><span class="line"><span class="comment">                     * </span></span><br><span class="line"><span class="comment">                     *  public class Persion &#123;</span></span><br><span class="line"><span class="comment">                     *      private String name;</span></span><br><span class="line"><span class="comment">                     *      private Integer age;</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     *      @ConstructorProperties(value = &#123;"coolblog", "20"&#125;)</span></span><br><span class="line"><span class="comment">                     *      public Persion(String name, Integer age) &#123;</span></span><br><span class="line"><span class="comment">                     *          this.name = name;</span></span><br><span class="line"><span class="comment">                     *          this.age = age;</span></span><br><span class="line"><span class="comment">                     *      &#125;</span></span><br><span class="line"><span class="comment">                     * &#125;</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">String</span>[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length);</span><br><span class="line">                    <span class="keyword">if</span> (paramNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        ParameterNameDiscoverer pnd = <span class="keyword">this</span>.beanFactory.getParameterNameDiscoverer();</span><br><span class="line">                        <span class="keyword">if</span> (pnd != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                             * 获取构造方法参数名称列表，比如有这样一个构造方法:</span></span><br><span class="line"><span class="comment">                             *   public Person(String name, int age, String sex)</span></span><br><span class="line"><span class="comment">                             *   </span></span><br><span class="line"><span class="comment">                             * 调用 getParameterNames 方法返回 paramNames = [name, age, sex]</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            paramNames = pnd.getParameterNames(candidate);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">/* </span></span><br><span class="line"><span class="comment">                     * 创建参数值列表，返回 argsHolder 会包含进行类型转换后的参数值，比如下</span></span><br><span class="line"><span class="comment">                     * 面的配置:</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     *     &lt;bean id="persion" class="xyz.coolblog.autowire.Person"&gt;</span></span><br><span class="line"><span class="comment">                     *         &lt;constructor-arg name="name" value="xiaoming"/&gt;</span></span><br><span class="line"><span class="comment">                     *         &lt;constructor-arg name="age" value="1"/&gt;</span></span><br><span class="line"><span class="comment">                     *         &lt;constructor-arg name="sex" value="man"/&gt;</span></span><br><span class="line"><span class="comment">                     *     &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">                     *</span></span><br><span class="line"><span class="comment">                     * Person 的成员变量 age 是 Integer 类型的，但由于在 Spring 配置中</span></span><br><span class="line"><span class="comment">                     * 只能配成 String 类型，所以这里要进行类型转换。</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,</span><br><span class="line">                            getUserDeclaredConstructor(candidate), autowiring);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (UnsatisfiedDependencyException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.logger.isTraceEnabled()) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.beanFactory.logger.trace(</span><br><span class="line">                                <span class="string">"Ignoring constructor ["</span> + candidate + <span class="string">"] of bean '"</span> + beanName + <span class="string">"': "</span> + ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (causes == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        causes = <span class="keyword">new</span> LinkedList&lt;UnsatisfiedDependencyException&gt;();</span><br><span class="line">                    &#125;</span><br><span class="line">                    causes.<span class="built_in">add</span>(ex);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (paramTypes.length != explicitArgs.length) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                argsHolder = <span class="keyword">new</span> ArgumentsHolder(explicitArgs);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 计算参数值（argsHolder.arguments）每个参数类型与构造方法参数列表</span></span><br><span class="line"><span class="comment">             * （paramTypes）中参数的类型差异量，差异量越大表明参数类型差异越大。参数类型差异</span></span><br><span class="line"><span class="comment">             * 越大，表明当前构造方法并不是一个最合适的候选项。引入差异量（typeDiffWeight）</span></span><br><span class="line"><span class="comment">             * 变量目的：是将候选构造方法的参数列表类型与参数值列表类型的差异进行量化，通过量化</span></span><br><span class="line"><span class="comment">             * 后的数值筛选出最合适的构造方法。</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             * 讲完差异量，再来说说 mbd.isLenientConstructorResolution() 条件。</span></span><br><span class="line"><span class="comment">             * 官方的解释是：返回构造方法的解析模式，有宽松模式（lenient mode）和严格模式</span></span><br><span class="line"><span class="comment">             * （strict mode）两种类型可选。具体的细节没去研究，就不多说了。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="built_in">int</span> typeDiffWeight = (mbd.isLenientConstructorResolution() ?</span><br><span class="line">                    argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes));</span><br><span class="line">            <span class="keyword">if</span> (typeDiffWeight &lt; minTypeDiffWeight) &#123;</span><br><span class="line">                constructorToUse = candidate;</span><br><span class="line">                argsHolderToUse = argsHolder;</span><br><span class="line">                argsToUse = argsHolder.arguments;</span><br><span class="line">                minTypeDiffWeight = typeDiffWeight;</span><br><span class="line">                ambiguousConstructors = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * 如果两个构造方法与参数值类型列表之间的差异量一致，那么这两个方法都可以作为</span></span><br><span class="line"><span class="comment">             * 候选项，这个时候就出现歧义了，这里先把有歧义的构造方法放入 </span></span><br><span class="line"><span class="comment">             * ambiguousConstructors 集合中</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (constructorToUse != <span class="keyword">null</span> &amp;&amp; typeDiffWeight == minTypeDiffWeight) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ambiguousConstructors == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ambiguousConstructors = <span class="keyword">new</span> LinkedHashSet&lt;Constructor&lt;?&gt;&gt;();</span><br><span class="line">                    ambiguousConstructors.<span class="built_in">add</span>(constructorToUse);</span><br><span class="line">                &#125;</span><br><span class="line">                ambiguousConstructors.<span class="built_in">add</span>(candidate);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若上面未能筛选出合适的构造方法，这里将抛出 BeanCreationException 异常</span></span><br><span class="line">        <span class="keyword">if</span> (constructorToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (causes != <span class="keyword">null</span>) &#123;</span><br><span class="line">                UnsatisfiedDependencyException ex = causes.removeLast();</span><br><span class="line">                <span class="keyword">for</span> (Exception cause : causes) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.beanFactory.onSuppressedException(cause);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                    <span class="string">"Could not resolve matching constructor "</span> +</span><br><span class="line">                    <span class="string">"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 如果 constructorToUse != null，且 ambiguousConstructors 也不为空，表明解析</span></span><br><span class="line"><span class="comment">         * 出了多个的合适的构造方法，此时就出现歧义了。Spring 不会擅自决定使用哪个构造方法，</span></span><br><span class="line"><span class="comment">         * 所以抛出异常。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ambiguousConstructors != <span class="keyword">null</span> &amp;&amp; !mbd.isLenientConstructorResolution()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                    <span class="string">"Ambiguous constructor matches found in bean '"</span> + beanName + <span class="string">"' "</span> +</span><br><span class="line">                    <span class="string">"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): "</span> +</span><br><span class="line">                    ambiguousConstructors);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (explicitArgs == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 缓存相关信息，比如：</span></span><br><span class="line"><span class="comment">             *   1. 已解析出的构造方法对象 resolvedConstructorOrFactoryMethod</span></span><br><span class="line"><span class="comment">             *   2. 构造方法参数列表是否已解析标志 constructorArgumentsResolved</span></span><br><span class="line"><span class="comment">             *   3. 参数值列表 resolvedConstructorArguments 或 preparedConstructorArguments</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 这些信息可用在其他地方，用于进行快捷判断</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            argsHolderToUse.storeCache(mbd, constructorToUse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">Object</span> beanInstance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;?&gt; ctorToUse = constructorToUse;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">Object</span>[] argumentsToUse = argsToUse;</span><br><span class="line">            beanInstance = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;<span class="keyword">Object</span>&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">Object</span> run() &#123;</span><br><span class="line">                    <span class="keyword">return</span> beanFactory.getInstantiationStrategy().instantiate(</span><br><span class="line">                            mbd, beanName, beanFactory, ctorToUse, argumentsToUse);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, beanFactory.getAccessControlContext());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 调用实例化策略创建实例，默认情况下使用反射创建实例。如果 bean 的配置信息中</span></span><br><span class="line"><span class="comment">             * 包含 lookup-method 和 replace-method，则通过 CGLIB 增强 bean 实例</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            beanInstance = <span class="keyword">this</span>.beanFactory.getInstantiationStrategy().instantiate(</span><br><span class="line">                    mbd, beanName, <span class="keyword">this</span>.beanFactory, constructorToUse, argsToUse);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 beanInstance 到 BeanWrapperImpl 对象中</span></span><br><span class="line">        bw.setBeanInstance(beanInstance);</span><br><span class="line">        <span class="keyword">return</span> bw;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                <span class="string">"Bean instantiation via constructor failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大致流程：<ul><li>创建 BeanWrapperImpl 对象</li><li>解析构造方法参数，并算出 minNrOfArgs</li><li>获取构造方法列表，并排序</li><li>遍历排序好的构造方法列表，筛选合适的构造方法<ul><li>获取构造方法参数列表中每个参数的名称</li><li>再次解析参数，此次解析会将value 属性值进行类型转换，由 String 转为合适的类型。</li><li>计算构造方法参数列表与参数值列表之间的类型差异量，以筛选出更为合适的构造方法</li></ul></li><li>缓存已筛选出的构造方法以及参数值列表，若再次创建 bean 实例时，可直接使用，无需再次进行筛选</li><li>使用初始化策略创建 bean 对象</li><li>将 bean 对象放入 BeanWrapperImpl 对象中，并返回该对象</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.学习笔记源码分析-创建singleton bean</title>
      <link href="/2017/10/15/ioc-3-create-singleton/"/>
      <url>/2017/10/15/ioc-3-create-singleton/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对于已实例化好的单例 bean，getBean(String) 方法并不会再一次去创建，而是从缓存中获取。如果某个 bean 还未实例化，这个时候就无法命中缓存。此时，就要根据 bean 的配置信息去创建这个 bean 了。相较于getBean(String)方法的实现逻辑，创建 bean 的方法createBean(String, RootBeanDefinition, Object[])及其所调用的方法逻辑上更为复杂一些。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="创建bean实例的入口"><a href="#创建bean实例的入口" class="headerlink" title="创建bean实例的入口"></a>创建bean实例的入口</h3><p>在正式分析createBean(String, RootBeanDefinition, Object[])方法前，我们先来看看 createBean 方法是在哪里被调用的。如下</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function">T <span class="title">doGetBean</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略不相关代码</span></span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">return</span> <span class="title">createBean</span><span class="params">(beanName, mbd, args)</span></span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                    destroySingleton(beanName);</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略不相关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是 doGetBean 方法的代码片段，从中可以发现 createBean 方法。createBean 方法被匿名工厂类的 getObject 方法包裹，但这个匿名工厂类对象并未直接调用 getObject 方法。而是将自身作为参数传给了getSingleton(String, ObjectFactory)方法，那么我们接下来再去看看一下getSingleton(String, ObjectFactory) 方法的实现。如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) &#123;</span><br><span class="line">    Assert.notNull(beanName, <span class="string">"'beanName' must not be null"</span>);</span><br><span class="line">    synchronized (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">        <span class="comment">// 从缓存中获取单例 bean，若不为空，则直接返回，不用再初始化</span></span><br><span class="line">        Object singletonObject = <span class="keyword">this</span>.singletonObjects.<span class="keyword">get</span>(beanName);</span><br><span class="line">        <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.singletonsCurrentlyInDestruction) &#123;</span><br><span class="line">                <span class="keyword">throw</span> new BeanCreationNotAllowedException(beanName,</span><br><span class="line">                        <span class="string">"Singleton bean creation not allowed while singletons of this factory are in destruction "</span> +</span><br><span class="line">                        <span class="string">"(Do not request a bean from a BeanFactory in a destroy method implementation!)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Creating shared instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">             * 将 beanName 添加到 singletonsCurrentlyInCreation 集合中，</span></span><br><span class="line"><span class="comment">             * 用于表明 beanName 对应的 bean 正在创建中</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            beforeSingletonCreation(beanName);</span><br><span class="line">            boolean newSingleton = <span class="literal">false</span>;</span><br><span class="line">            boolean recordSuppressedExceptions = (<span class="keyword">this</span>.suppressedExceptions == <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                <span class="keyword">this</span>.suppressedExceptions = new LinkedHashSet&lt;Exception&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 通过 getObject 方法调用 createBean 方法创建 bean 实例</span></span><br><span class="line">                singletonObject = singletonFactory.getObject();</span><br><span class="line">                newSingleton = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                singletonObject = <span class="keyword">this</span>.singletonObjects.<span class="keyword">get</span>(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Exception suppressedException : <span class="keyword">this</span>.suppressedExceptions) &#123;</span><br><span class="line">                        ex.addRelatedCause(suppressedException);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.suppressedExceptions = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将 beanName 从 singletonsCurrentlyInCreation 移除</span></span><br><span class="line">                afterSingletonCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (newSingleton) &#123;</span><br><span class="line">                <span class="comment">/* </span></span><br><span class="line"><span class="comment">                 * 将 &lt;beanName, singletonObject&gt; 键值对添加到 singletonObjects 集合中，</span></span><br><span class="line"><span class="comment">                 * 并从其他集合（比如 earlySingletonObjects）中移除 singletonObject 记录</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                addSingleton(beanName, singletonObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先从 singletonObjects 集合获取 bean 实例，若不为空，则直接返回</li><li>若为空，进入创建 bean 实例阶段。先将 beanName 添加到 singletonsCurrentlyInCreation</li><li>通过 getObject 方法调用 createBean 方法创建 bean 实例</li><li>将 beanName 从 singletonsCurrentlyInCreation 集合中移除</li><li>将 &lt;beanName, singletonObject&gt; 映射缓存到 singletonObject</li></ul><h3 id="createBean方法"><a href="#createBean方法" class="headerlink" title="createBean方法"></a>createBean方法</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> createBean(<span class="keyword">String</span> beanName, RootBeanDefinition mbd, <span class="keyword">Object</span>[] args) <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 bean 的类型</span></span><br><span class="line">    Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">    <span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">        mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理 lookup-method 和 replace-method 配置，Spring 将这两个配置统称为 override method</span></span><br><span class="line">        mbdToUse.prepareMethodOverrides();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">                beanName, <span class="string">"Validation of method overrides failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 在 bean 初始化前应用后置处理，如果后置处理返回的 bean 不为空，则直接返回</span></span><br><span class="line">        <span class="keyword">Object</span> bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">        <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bean;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">                <span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 doCreateBean 创建 bean</span></span><br><span class="line">    <span class="keyword">Object</span> beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解析 bean 类型</li><li>处理 lookup-method 和 replace-method 配置</li><li>在 bean 初始化前应用后置处理，若后置处理返回的 bean 不为空，则直接返回</li><li>若上一步后置处理返回的 bean 为空，则调用 doCreateBean 创建 bean 实例</li></ul><h4 id="验证和准备-override-方法"><a href="#验证和准备-override-方法" class="headerlink" title="验证和准备 override 方法"></a>验证和准备 override 方法</h4><p>当用户配置了 lookup-method 和 replace-method 时，Spring 需要对目标 bean 进行增强。在增强之前，需要做一些准备工作，也就是 prepareMethodOverrides 中的逻辑。下面来看看这个方法的源码</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> prepareMethodOverrides() <span class="keyword">throws</span> BeanDefinitionValidationException &#123;</span><br><span class="line">    MethodOverrides methodOverrides = getMethodOverrides();</span><br><span class="line">    <span class="keyword">if</span> (!methodOverrides.isEmpty()) &#123;</span><br><span class="line">        Set&lt;MethodOverride&gt; overrides = methodOverrides.getOverrides();</span><br><span class="line">        <span class="keyword">synchronized</span> (overrides) &#123;</span><br><span class="line">            <span class="comment">// 循环处理每个 MethodOverride 对象</span></span><br><span class="line">            <span class="keyword">for</span> (MethodOverride mo : overrides) &#123;</span><br><span class="line">                prepareMethodOverride(mo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> prepareMethodOverride(MethodOverride mo) <span class="keyword">throws</span> BeanDefinitionValidationException &#123;</span><br><span class="line">    <span class="comment">// 获取方法名为 mo.getMethodName() 的方法数量，当方法重载时，count 的值就会大于1</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">count</span> = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName());</span><br><span class="line">    <span class="comment">// count = 0，表明根据方法名未找到相应的方法，此时抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">count</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionValidationException(</span><br><span class="line">                <span class="string">"Invalid method override: no method with name '"</span> + mo.getMethodName() +</span><br><span class="line">                <span class="string">"' on class ["</span> + getBeanClassName() + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若 count = 1，表明仅存在已方法名为 mo.getMethodName()，这意味着方法不存在重载</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">count</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 方法不存在重载，则将 overloaded 成员变量设为 false</span></span><br><span class="line">        mo.setOverloaded(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prepareMethodOverride 这个方法主要用于获取指定方法的方法数量 count，并根据 count 的值进行相应的处理。count = 0 时，表明方法不存在，此时抛出异常。count = 1 时，设置 MethodOverride 对象的overloaded成员变量为 false。这样做的目的在于，提前标注名称mo.getMethodName()的方法不存在重载，在使用 CGLIB 增强阶段就不需要进行校验，直接找到某个方法进行增强即可。</li></ul><h4 id="bean-实例化前的后置处理"><a href="#bean-实例化前的后置处理" class="headerlink" title="bean 实例化前的后置处理"></a>bean 实例化前的后置处理</h4><p>后置处理是 Spring 的一个拓展点，用户通过实现 BeanPostProcessor 接口，并将实现类配置到 Spring 的配置文件中（或者使用注解），即可在 bean 初始化前后进行自定义操作。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> resolveBeforeInstantiation(<span class="keyword">String</span> beanName, RootBeanDefinition mbd) &#123;</span><br><span class="line">    <span class="keyword">Object</span> bean = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 检测是否解析过，mbd.beforeInstantiationResolved 的值在下面的代码中会被设置</span></span><br><span class="line">    <span class="keyword">if</span> (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">            Class&lt;?&gt; targetType = determineTargetType(beanName, mbd);</span><br><span class="line">            <span class="keyword">if</span> (targetType != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 应用前置处理</span></span><br><span class="line">                bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">                <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 应用后置处理</span></span><br><span class="line">                    bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置 mbd.beforeInstantiationResolved</span></span><br><span class="line">        mbd.beforeInstantiationResolved = (bean != <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> applyBeanPostProcessorsBeforeInstantiation(Class&lt;?&gt; beanClass, <span class="keyword">String</span> beanName) &#123;</span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">        <span class="comment">// InstantiationAwareBeanPostProcessor 一般在 Spring 框架内部使用，不建议用户直接使用</span></span><br><span class="line">        <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">            InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">            <span class="comment">// bean 初始化前置处理</span></span><br><span class="line">            <span class="keyword">Object</span> result = ibp.postProcessBeforeInstantiation(beanClass, beanName);</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> applyBeanPostProcessorsAfterInitialization(<span class="keyword">Object</span> existingBean, <span class="keyword">String</span> beanName)</span><br><span class="line">        <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Object</span> result = existingBean;</span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor beanProcessor : getBeanPostProcessors()) &#123;</span><br><span class="line">       <span class="comment">// bean 初始化后置处理</span></span><br><span class="line">        result = beanProcessor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用-doCreateBean-方法创建-bean"><a href="#调用-doCreateBean-方法创建-bean" class="headerlink" title="调用 doCreateBean 方法创建 bean"></a>调用 doCreateBean 方法创建 bean</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> doCreateBean(<span class="keyword">final</span> <span class="keyword">String</span> beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> <span class="keyword">Object</span>[] args)</span><br><span class="line">        <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * BeanWrapper 是一个基础接口，由接口名可看出这个接口的实现类用于包裹 bean 实例。</span></span><br><span class="line"><span class="comment">     * 通过 BeanWrapper 的实现类可以方便的设置/获取 bean 实例的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">        <span class="comment">// 从缓存中获取 BeanWrapper，并清理相关记录</span></span><br><span class="line">        instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 创建 bean 实例，并将实例包裹在 BeanWrapper 实现类对象中返回。createBeanInstance </span></span><br><span class="line"><span class="comment">         * 中包含三种创建 bean 实例的方式：</span></span><br><span class="line"><span class="comment">         *   1. 通过工厂方法创建 bean 实例</span></span><br><span class="line"><span class="comment">         *   2. 通过构造方法自动注入（autowire by constructor）的方式创建 bean 实例</span></span><br><span class="line"><span class="comment">         *   3. 通过无参构造方法方法创建 bean 实例</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 若 bean 的配置信息中配置了 lookup-method 和 replace-method，则会使用 CGLIB </span></span><br><span class="line"><span class="comment">         * 增强 bean 实例。关于这个方法，后面会专门写一篇文章介绍，这里先说这么多。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此处的 bean 可以认为是一个原始的 bean 实例，暂未填充属性</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">Object</span> bean = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedInstance() : <span class="keyword">null</span>);</span><br><span class="line">    Class&lt;?&gt; beanType = (instanceWrapper != <span class="keyword">null</span> ? instanceWrapper.getWrappedClass() : <span class="keyword">null</span>);</span><br><span class="line">    mbd.resolvedTargetType = beanType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里又遇到后置处理了，此处的后置处理是用于处理已“合并的 BeanDefinition”。关于这种后置处理器具体的实现细节就不深入理解了，大家有兴趣可以自己去看</span></span><br><span class="line">    <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * earlySingletonExposure 是一个重要的变量，这里要说明一下。该变量用于表示是否提前暴露</span></span><br><span class="line"><span class="comment">     * 单例 bean，用于解决循环依赖。earlySingletonExposure 由三个条件综合而成，如下：</span></span><br><span class="line"><span class="comment">     *   条件1：mbd.isSingleton() - 表示 bean 是否是单例类型</span></span><br><span class="line"><span class="comment">     *   条件2：allowCircularReferences - 是否允许循环依赖</span></span><br><span class="line"><span class="comment">     *   条件3：isSingletonCurrentlyInCreation(beanName) - 当前 bean 是否处于创建的状态中</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * earlySingletonExposure = 条件1 &amp;&amp; 条件2 &amp;&amp; 条件3 </span></span><br><span class="line"><span class="comment">     *                        = 单例 &amp;&amp; 是否允许循环依赖 &amp;&amp; 是否存于创建状态中。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">            isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">    <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line">                    <span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加工厂对象到 singletonFactories 缓存中</span></span><br><span class="line">        addSingletonFactory(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                <span class="comment">// 获取早期 bean 的引用，如果 bean 中的方法被 AOP 切点所匹配到，此时 AOP 相关逻辑会介入</span></span><br><span class="line">                <span class="keyword">return</span> getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Object</span> exposedObject = bean;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 向 bean 实例中填充属性，populateBean 方法也是一个很重要的方法，后面会专门写文章分析</span></span><br><span class="line">        populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        <span class="keyword">if</span> (exposedObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 进行余下的初始化工作，详细如下：</span></span><br><span class="line"><span class="comment">             * 1. 判断 bean 是否实现了 BeanNameAware、BeanFactoryAware、</span></span><br><span class="line"><span class="comment">             *    BeanClassLoaderAware 等接口，并执行接口方法</span></span><br><span class="line"><span class="comment">             * 2. 应用 bean 初始化前置操作</span></span><br><span class="line"><span class="comment">             * 3. 如果 bean 实现了 InitializingBean 接口，则执行 afterPropertiesSet </span></span><br><span class="line"><span class="comment">             *    方法。如果用户配置了 init-method，则调用相关方法执行自定义初始化逻辑</span></span><br><span class="line"><span class="comment">             * 4. 应用 bean 初始化后置操作</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             * 另外，AOP 相关逻辑也会在该方法中织入切面逻辑，此时的 exposedObject 就变成了</span></span><br><span class="line"><span class="comment">             * 一个代理对象了</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                    mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">        <span class="keyword">Object</span> earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 若 initializeBean 方法未改变 exposedObject 的引用，则此处的条件为 true。</span></span><br><span class="line">            <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                exposedObject = earlySingletonReference;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 下面的逻辑我也没完全搞懂，就不分析了。见谅。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">                <span class="keyword">String</span>[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">                Set&lt;<span class="keyword">String</span>&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;<span class="keyword">String</span>&gt;(dependentBeans.length);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">String</span> dependentBean : dependentBeans) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                        actualDependentBeans.<span class="built_in">add</span>(dependentBean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line">                            <span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</span><br><span class="line">                            StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                            <span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line">                            <span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line">                            <span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line">                            <span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 注册销毁逻辑</span></span><br><span class="line">        registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">                mbd.getResourceDescription(), beanName, <span class="string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从缓存中获取 BeanWrapper 实现类对象，并清理相关记录</li><li>若未命中缓存，则创建 bean 实例，并将实例包裹在 BeanWrapper 实现类对象中返回</li><li>应用 MergedBeanDefinitionPostProcessor 后置处理器相关逻辑</li><li>根据条件决定是否提前暴露 bean 的早期引用（early reference），用于处理循环依赖问题</li><li>调用 populateBean 方法向 bean 实例中填充属性</li><li>调用 initializeBean 方法完成余下的初始化工作</li><li>注册销毁逻辑</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.学习笔记源码分析-singleton bean</title>
      <link href="/2017/10/10/ioc-2-singleton/"/>
      <url>/2017/10/10/ioc-2-singleton/</url>
      <content type="html"><![CDATA[<h2 id="获取单例bean"><a href="#获取单例bean" class="headerlink" title="获取单例bean"></a>获取单例bean</h2><p>分析BeanFactory的getBean(String)方法实现细节</p><ul><li>局部源码如下：</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> getBean(<span class="keyword">String</span> name) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="comment">// getBean 是一个空壳方法，所有的逻辑都封装在 doGetBean 方法中</span></span><br><span class="line">    <span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; T doGetBean(</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">String</span> name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> <span class="keyword">Object</span>[] args, <span class="built_in">boolean</span> typeCheckOnly)</span><br><span class="line">        <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过 name 获取 beanName。不用name作为beanname的原因：</span></span><br><span class="line">    <span class="comment">//1.name 可能会以 &amp; 字符开头，表明调用者想获取 FactoryBean 本身；</span></span><br><span class="line">    <span class="comment">//2.若name 是一个别名，则应将别名转换为具体的实例名，也就是 beanName</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">String</span> beanName = transformedBeanName(name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">Object</span> bean;</span><br><span class="line">    <span class="comment">//从缓存中获取单例 bean。</span></span><br><span class="line">    <span class="keyword">Object</span> sharedInstance = getSingleton(beanName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果 sharedInstance = null，则说明缓存里没有对应的实例，表明这个实例还没创建。</span></span><br><span class="line"><span class="comment">     * BeanFactory 并不会在一开始就将所有的单例 bean 实例化好，而是在调用 getBean 获取 </span></span><br><span class="line"><span class="comment">     * bean 时再实例化，也就是懒加载。</span></span><br><span class="line"><span class="comment">     * getBean 方法有很多重载，比如 getBean(String name, Object... args)，我们在首次获取</span></span><br><span class="line"><span class="comment">     * 某个 bean 时，可以传入用于初始化 bean 的参数数组（args），BeanFactory 会根据这些参数</span></span><br><span class="line"><span class="comment">     * 去匹配合适的构造方法构造 bean 实例。当然，如果单例 bean 早已创建好，这里的 args 就没有</span></span><br><span class="line"><span class="comment">     * 用了，BeanFactory 不会多次实例化单例 bean。</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">                        <span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.debug(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 如果 sharedInstance 是普通的单例 bean，下面的方法会直接返回。但如果 </span></span><br><span class="line"><span class="comment">         * sharedInstance 是 FactoryBean 类型的，则需调用 getObject 工厂方法获取真正的 </span></span><br><span class="line"><span class="comment">         * bean 实例。如果用户想获取 FactoryBean 本身，这里也不会做特别的处理，直接返回</span></span><br><span class="line"><span class="comment">         * 即可。毕竟 FactoryBean 的实现类本身也是一种 bean，只不过具有一点特殊的功能而已。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果上面的条件不满足，则表明 sharedInstance 可能为空，此时 beanName 对应的 bean </span></span><br><span class="line"><span class="comment">     * 实例可能还未创建。这里还存在另一种可能，如果当前容器有父容器，beanName 对应的 bean 实例</span></span><br><span class="line"><span class="comment">     * 可能是在父容器中被创建了，所以在创建实例前，需要先去父容器里检查一下。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// BeanFactory 不缓存 Prototype 类型的 bean，无法处理该类型 bean 的循环依赖问题</span></span><br><span class="line">        <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">// 如果 sharedInstance = null，则到父容器中查找 bean 实例</span></span><br><span class="line">        BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">        <span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            <span class="comment">// 获取 name 对应的 beanName，如果 name 是以 &amp; 字符开头，则返回 &amp; + beanName</span></span><br><span class="line">            <span class="keyword">String</span> nameToLookup = originalBeanName(name);</span><br><span class="line">            <span class="comment">// 根据 args 是否为空，以决定调用父容器哪个方法获取 bean</span></span><br><span class="line">            <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">            markBeanAsCreated(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 合并父 BeanDefinition 与子 BeanDefinition，后面会单独分析这个方法</span></span><br><span class="line">            <span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">            checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line">             <span class="comment">// 检查是否有 dependsOn 依赖，如果有则先初始化所依赖的 bean</span></span><br><span class="line">            <span class="keyword">String</span>[] dependsOn = mbd.getDependsOn();</span><br><span class="line">            <span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">String</span> dep : dependsOn) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 检测是否存在 depends-on 循环依赖，若存在则抛异常。比如 A 依赖 B，</span></span><br><span class="line"><span class="comment">                     * B 又依赖 A，他们的配置如下：</span></span><br><span class="line"><span class="comment">                     *   &lt;bean id="beanA" class="BeanA" depends-on="beanB"&gt;</span></span><br><span class="line"><span class="comment">                     *   &lt;bean id="beanB" class="BeanB" depends-on="beanA"&gt;</span></span><br><span class="line"><span class="comment">                     *   </span></span><br><span class="line"><span class="comment">                     * beanA 要求 beanB 在其之前被创建，但 beanB 又要求 beanA 先于它</span></span><br><span class="line"><span class="comment">                     * 创建。这个时候形成了循环，对于 depends-on 循环，Spring 会直接</span></span><br><span class="line"><span class="comment">                     * 抛出异常</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                <span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 注册依赖记录</span></span><br><span class="line">                    registerDependentBean(dep, beanName);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 加载 depends-on 依赖</span></span><br><span class="line">                        getBean(dep);</span><br><span class="line">                    &#125; </span><br><span class="line">                    <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">                                <span class="string">"'"</span> + beanName + <span class="string">"' depends on missing bean '"</span> + dep + <span class="string">"'"</span>, ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">             <span class="comment">// 创建 bean 实例</span></span><br><span class="line">            <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 这里并没有直接调用 createBean 方法创建 bean 实例，而是通过 </span></span><br><span class="line"><span class="comment">                 * getSingleton(String, ObjectFactory) 方法获取 bean 实例。</span></span><br><span class="line"><span class="comment">                 * getSingleton(String, ObjectFactory) 方法会在内部调用 </span></span><br><span class="line"><span class="comment">                 * ObjectFactory 的 getObject() 方法创建 bean，并会在创建完成后，</span></span><br><span class="line"><span class="comment">                 * 将 bean 放入缓存中。关于 getSingleton 方法的分析，本文先不展开，我会在</span></span><br><span class="line"><span class="comment">                 * 后面的文章中进行分析</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 创建 bean 实例</span></span><br><span class="line">                            <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                            destroySingleton(beanName);</span><br><span class="line">                            <span class="keyword">throw</span> ex;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// 如果 bean 是 FactoryBean 类型，则调用工厂方法获取真正的 bean 实例。否则直接返回 bean 实例</span></span><br><span class="line">                bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建 prototype 类型的 bean 实例</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">                <span class="keyword">Object</span> prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforePrototypeCreation(beanName);</span><br><span class="line">                    prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterPrototypeCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">                bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建其他类型的 bean 实例</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">String</span> scopeName = mbd.getScope();</span><br><span class="line">                <span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.<span class="built_in">get</span>(scopeName);</span><br><span class="line">                <span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">Object</span> scopedInstance = scope.<span class="built_in">get</span>(beanName, <span class="keyword">new</span> ObjectFactory&lt;<span class="keyword">Object</span>&gt;() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">Object</span> getObject() <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                            beforePrototypeCreation(beanName);</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">finally</span> &#123;</span><br><span class="line">                                afterPrototypeCreation(beanName);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">                            <span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">                            <span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">                            ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要进行类型转换，则在此处进行转换。类型转换这一块我没细看，就不多说了。</span></span><br><span class="line">    <span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; bean != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</span><br><span class="line">                        ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 bean</span></span><br><span class="line">    <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单理解doGetBean-的过程"><a href="#简单理解doGetBean-的过程" class="headerlink" title="简单理解doGetBean()的过程"></a>简单理解doGetBean()的过程</h3><ul><li>转换 beanName</li><li>从缓存中获取实例</li><li>如果实例不为空，且 args = null。调用 getObjectForBeanInstance 方法，并按 name 规则返回相应的 bean 实例</li><li>若上面的条件不成立，则到父容器中查找 beanName 对有的 bean 实例，存在则直接返回</li><li>若父容器中不存在，则进行下一步操作 – 合并 BeanDefinition</li><li>处理 depends-on 依赖</li><li>创建并缓存 bean</li><li>调用 getObjectForBeanInstance 方法，并按 name 规则返回相应的 bean 实例</li><li>按需转换 bean 类型，并返回转换后的 bean 实例。</li></ul><h3 id="beanName的转换"><a href="#beanName的转换" class="headerlink" title="beanName的转换"></a>beanName的转换</h3><ul><li><p>在获取 bean 实例之前，Spring 第一件要做的事情是对参数 name 进行转换。转换的目的主要是为了解决两个问题：</p><ul><li>第一个是处理以字符 &amp; 开头的 name，防止 BeanFactory 无法找到与 name 对应的 bean 实例。</li><li>第二个是处理别名问题，Spring 不会存储 &lt;别名, bean 实例&gt; 这种映射，仅会存储 &lt;beanName, bean&gt;。</li></ul></li><li><p>源码分析</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="built_in">String</span> transformedBeanName(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="comment">// 这里调用了两个方法：BeanFactoryUtils.transformedBeanName(name) 和 canonicalName</span></span><br><span class="line">    <span class="keyword">return</span> canonicalName(BeanFactoryUtils.transformedBeanName(name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** 该方法用于处理 &amp; 字符 *</span>/</span></span></span><br><span class="line">public <span class="keyword">static</span> <span class="built_in">String</span> transformedBeanName(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    Assert.notNull(name, <span class="string">"'name' must not be null"</span>);</span><br><span class="line">    <span class="built_in">String</span> beanName = name;</span><br><span class="line">    <span class="comment">// 循环处理 &amp; 字符。比如 name = "&amp;&amp;&amp;&amp;&amp;helloService"，最终会被转成 helloService</span></span><br><span class="line">    <span class="keyword">while</span> (beanName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) &#123;</span><br><span class="line">        beanName = beanName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> beanName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** 该方法用于转换别名 *</span>/</span></span></span><br><span class="line">public <span class="built_in">String</span> canonicalName(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="built_in">String</span> canonicalName = name;</span><br><span class="line">    <span class="built_in">String</span> resolvedName;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 这里使用 while 循环进行处理，原因是：可能会存在多重别名的问题，即别名指向别名。比如下面</span></span><br><span class="line"><span class="comment">     * 的配置：</span></span><br><span class="line"><span class="comment">     *   &lt;bean id="hello" class="service.Hello"/&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;alias name="hello" alias="aliasA"/&gt;</span></span><br><span class="line"><span class="comment">     *   &lt;alias name="aliasA" alias="aliasB"/&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 上面的别名指向关系为 aliasB -&gt; aliasA -&gt; hello，对于上面的别名配置，aliasMap 中数据</span></span><br><span class="line"><span class="comment">     * 视图为：aliasMap = [&lt;aliasB, aliasA&gt;, &lt;aliasA, hello&gt;]。通过下面的循环解析别名</span></span><br><span class="line"><span class="comment">     * aliasB 最终指向的 beanName</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        resolvedName = <span class="keyword">this</span>.aliasMap.<span class="keyword">get</span>(canonicalName);</span><br><span class="line">        <span class="keyword">if</span> (resolvedName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                canonicalName = resolvedName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (resolvedName != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> canonicalName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从缓存中获取bean实例"><a href="#从缓存中获取bean实例" class="headerlink" title="从缓存中获取bean实例"></a>从缓存中获取bean实例</h3><p>对于单例 bean，Spring 容器只会实例化一次。后续再次获取时，只需直接从缓存里获取即可，无需且不能再次实例化（否则单例就没意义了）。从缓存中取 bean 实例的方法是getSingleton(String)，下面我们就来看看这个方法实现方式吧。如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object getSingleton(String beanName) &#123;</span><br><span class="line">    <span class="keyword">return</span> getSingleton(beanName, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * allowEarlyReference 参数，allowEarlyReference 表示是否允许其他 bean 引用</span></span><br><span class="line"><span class="comment"> * 正在创建中的 bean，用于处理循环引用的问题。关于循环引用。先看下面的配置：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   &lt;bean id="hello" class="me.chilam.Hello"&gt;</span></span><br><span class="line"><span class="comment"> *       &lt;property name="world" ref="world"/&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;bean id="world" class="me.chilam.World"&gt;</span></span><br><span class="line"><span class="comment"> *       &lt;property name="hello" ref="hello"/&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 如上所示，hello 依赖 world，world 又依赖于 hello，他们之间形成了循环依赖。Spring 在构建 </span></span><br><span class="line"><span class="comment"> * hello bean时，会检测到它依赖于 world，于是先去实例化world。实例化 world 时，发现 </span></span><br><span class="line"><span class="comment"> * world 依赖 hello。这个时候容器又要去初始化 hello。由于 hello 已经在初始化进程中了，为了让 </span></span><br><span class="line"><span class="comment"> * world 能完成初始化，这里先让 world 引用正在初始化中的 hello。world 初始化完成后，hello </span></span><br><span class="line"><span class="comment"> * 就可引用到 world 实例，这样 hello 也就能完成初始了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">    <span class="comment">// 从 singletonObjects 获取实例，singletonObjects 中缓存的实例都是完全实例化好的 bean，可以直接使用</span></span><br><span class="line">    Object singletonObject = <span class="keyword">this</span>.singletonObjects.<span class="keyword">get</span>(beanName);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果 singletonObject = null，表明还没创建，或者还没完全创建好。</span></span><br><span class="line"><span class="comment">     * 这里判断 beanName 对应的 bean 是否正在创建中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        synchronized (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            <span class="comment">// 从 earlySingletonObjects 中获取提前曝光的 bean，用于处理循环引用</span></span><br><span class="line">            singletonObject = <span class="keyword">this</span>.earlySingletonObjects.<span class="keyword">get</span>(beanName);</span><br><span class="line">            <span class="comment">// 如果如果 singletonObject = null，且允许提前曝光 bean 实例，则从相应的 ObjectFactory 获取一个原始的（raw）bean（尚未填充属性）</span></span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                <span class="comment">// 获取相应的工厂类</span></span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.<span class="keyword">get</span>(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 提前曝光 bean 实例，用于解决循环依赖</span></span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    <span class="comment">// 放入缓存中，如果还有其他 bean 依赖当前 bean，其他 bean 可以直接从 earlySingletonObjects 取结果</span></span><br><span class="line">                    <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的代码虽然不长，但是涉及到了好几个缓存集合<ul><li>singletonObjects,用于存放完全初始化好的 bean，从该缓存中取出的 bean 可以直接使用</li><li>earlySingletonObjects,用于存放还在初始化中的 bean，用于解决循环依赖</li><li>singletonFactories,用于存放 bean 工厂。bean 工厂所产生的 bean 是还未完成初始化的 bean。</li></ul></li></ul><h3 id="合并父-BeanDefinition-与子-BeanDefinition"><a href="#合并父-BeanDefinition-与子-BeanDefinition" class="headerlink" title="合并父 BeanDefinition 与子 BeanDefinition"></a>合并父 BeanDefinition 与子 BeanDefinition</h3><p>Spring 支持配置继承，在标签中可以使用parent属性配置父类 bean。这样子类 bean 可以继承父类 bean 的配置信息，同时也可覆盖父类中的配置。比如下面的配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"hello"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"me.chilam.Hello"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"content"</span> value=<span class="string">"hello"</span>/&gt;</span><br><span class="line">&lt;<span class="regexp">/bean&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;bean id="hello-child" parent="hello"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;property name="content" value="I`m hello-child"/</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/bean&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> configLocation = <span class="string">"application-parent-bean.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(configLocation);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"hello -&gt; "</span> + applicationContext.getBean(<span class="string">"hello"</span>));</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"hello-child -&gt; "</span> + applicationContext.getBean(<span class="string">"hello-child"</span>));</span><br></pre></td></tr></table></figure><ul><li>由测试结果可以看出，hello-child 在未配置 class 的属性下也实例化成功了，表明它成功继承了父配置的 class 属性。</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> RootBeanDefinition getMergedLocalBeanDefinition(<span class="keyword">String</span> beanName) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="comment">// 检查缓存中是否存在“已合并的 BeanDefinition”，若有直接返回即可</span></span><br><span class="line">    RootBeanDefinition mbd = <span class="keyword">this</span>.mergedBeanDefinitions.<span class="built_in">get</span>(beanName);</span><br><span class="line">    <span class="keyword">if</span> (mbd != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mbd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用重载方法</span></span><br><span class="line">    <span class="keyword">return</span> getMergedBeanDefinition(beanName, getBeanDefinition(beanName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> RootBeanDefinition getMergedBeanDefinition(<span class="keyword">String</span> beanName, BeanDefinition bd)</span><br><span class="line">        <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">    <span class="comment">// 继续调用重载方法</span></span><br><span class="line">    <span class="keyword">return</span> getMergedBeanDefinition(beanName, bd, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> RootBeanDefinition getMergedBeanDefinition(</span><br><span class="line">        <span class="keyword">String</span> beanName, BeanDefinition bd, BeanDefinition containingBd)</span><br><span class="line">        <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.mergedBeanDefinitions) &#123;</span><br><span class="line">        RootBeanDefinition mbd = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我暂时还没去详细了解 containingBd 的用途，尽管从方法的注释上可以知道 containingBd 的大致用途，但没经过详细分析，就不多说了。见谅</span></span><br><span class="line">        <span class="keyword">if</span> (containingBd == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mbd = <span class="keyword">this</span>.mergedBeanDefinitions.<span class="built_in">get</span>(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mbd == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// bd.getParentName() == null，表明无父配置，这时直接将当前的 BeanDefinition 升级为 RootBeanDefinition</span></span><br><span class="line">            <span class="keyword">if</span> (bd.getParentName() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> RootBeanDefinition) &#123;</span><br><span class="line">                    mbd = ((RootBeanDefinition) bd).cloneBeanDefinition();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    mbd = <span class="keyword">new</span> RootBeanDefinition(bd);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                BeanDefinition pbd;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">String</span> parentBeanName = transformedBeanName(bd.getParentName());</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 判断父类 beanName 与子类 beanName 名称是否相同。若相同，则父类 bean 一定</span></span><br><span class="line"><span class="comment">                     * 在父容器中。原因也很简单，容器底层是用 Map 缓存 &lt;beanName, bean&gt; 键值对</span></span><br><span class="line"><span class="comment">                     * 的。同一个容器下，使用同一个 beanName 映射两个 bean 实例显然是不合适的。</span></span><br><span class="line"><span class="comment">                     * 有的朋友可能会觉得可以这样存储：&lt;beanName, [bean1, bean2]&gt; ，似乎解决了</span></span><br><span class="line"><span class="comment">                     * 一对多的问题。但是也有问题，调用 getName(beanName) 时，到底返回哪个 bean </span></span><br><span class="line"><span class="comment">                     * 实例好呢？</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (!beanName.equals(parentBeanName)) &#123;</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         * 这里再次调用 getMergedBeanDefinition，只不过参数值变为了 </span></span><br><span class="line"><span class="comment">                         * parentBeanName，用于合并父 BeanDefinition 和爷爷辈的 </span></span><br><span class="line"><span class="comment">                         * BeanDefinition。如果爷爷辈的 BeanDefinition 仍有父 </span></span><br><span class="line"><span class="comment">                         * BeanDefinition，则继续合并</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        pbd = getMergedBeanDefinition(parentBeanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 获取父容器，并判断，父容器的类型，若不是 ConfigurableBeanFactory 则判抛出异常</span></span><br><span class="line">                        BeanFactory parent = getParentBeanFactory();</span><br><span class="line">                        <span class="keyword">if</span> (parent <span class="keyword">instanceof</span> ConfigurableBeanFactory) &#123;</span><br><span class="line">                            pbd = ((ConfigurableBeanFactory) parent).getMergedBeanDefinition(parentBeanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchBeanDefinitionException(parentBeanName,</span><br><span class="line">                                    <span class="string">"Parent name '"</span> + parentBeanName + <span class="string">"' is equal to bean name '"</span> + beanName +</span><br><span class="line">                                    <span class="string">"': cannot be resolved without an AbstractBeanFactory parent"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(bd.getResourceDescription(), beanName,</span><br><span class="line">                            <span class="string">"Could not resolve parent bean definition '"</span> + bd.getParentName() + <span class="string">"'"</span>, ex);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 以父 BeanDefinition 的配置信息为蓝本创建 RootBeanDefinition，也就是“已合并的 BeanDefinition”</span></span><br><span class="line">                mbd = <span class="keyword">new</span> RootBeanDefinition(pbd);</span><br><span class="line">                <span class="comment">// 用子 BeanDefinition 中的属性覆盖父 BeanDefinition 中的属性</span></span><br><span class="line">                mbd.overrideFrom(bd);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果用户未配置 scope 属性，则默认将该属性配置为 singleton</span></span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.hasLength(mbd.getScope())) &#123;</span><br><span class="line">                mbd.setScope(RootBeanDefinition.SCOPE_SINGLETON);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (containingBd != <span class="keyword">null</span> &amp;&amp; !containingBd.isSingleton() &amp;&amp; mbd.isSingleton()) &#123;</span><br><span class="line">                mbd.setScope(containingBd.getScope());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (containingBd == <span class="keyword">null</span> &amp;&amp; isCacheBeanMetadata()) &#123;</span><br><span class="line">                <span class="comment">// 缓存合并后的 BeanDefinition</span></span><br><span class="line">                <span class="keyword">this</span>.mergedBeanDefinitions.put(beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mbd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从-FactoryBean-中获取-bean-实例"><a href="#从-FactoryBean-中获取-bean-实例" class="headerlink" title="从 FactoryBean 中获取 bean 实例"></a>从 FactoryBean 中获取 bean 实例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">Object</span> getObjectForBeanInstance(</span><br><span class="line">        <span class="type">Object</span> beanInstance, <span class="type">String</span> name, <span class="type">String</span> beanName, <span class="type">RootBeanDefinition</span> mbd) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 name 以 &amp; 开头，但 beanInstance 却不是 FactoryBean，则认为有问题。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="type">BeanFactoryUtils</span>.isFactoryDereference(name) &amp;&amp; !(beanInstance instanceof <span class="type">FactoryBean</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanIsNotAFactoryException</span>(transformedBeanName(name), beanInstance.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * 如果上面的判断通过了，表明 beanInstance 可能是一个普通的 bean，也可能是一个 </span></span><br><span class="line"><span class="comment">     * FactoryBean。如果是一个普通的 bean，这里直接返回 beanInstance 即可。如果是 </span></span><br><span class="line"><span class="comment">     * FactoryBean，则要调用工厂方法生成一个 bean 实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!(beanInstance instanceof <span class="type">FactoryBean</span>) || <span class="type">BeanFactoryUtils</span>.isFactoryDereference(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> beanInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="class"><span class="keyword">object</span> </span>= <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 如果 mbd 为空，则从缓存中加载 bean。FactoryBean 生成的单例 bean 会被缓存</span></span><br><span class="line"><span class="comment">         * 在 factoryBeanObjectCache 集合中，不用每次都创建</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="class"><span class="keyword">object</span> </span>= getCachedObjectForFactoryBean(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">==</span> <span class="title">null</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 经过前面的判断，到这里可以保证 beanInstance 是 FactoryBean 类型的，所以可以进行类型转换</span></span><br><span class="line">        <span class="type">FactoryBean</span>&lt;?&gt; factory = (<span class="type">FactoryBean</span>&lt;?&gt;) beanInstance;</span><br><span class="line">        <span class="comment">// 如果 mbd 为空，则判断是否存在名字为 beanName 的 BeanDefinition</span></span><br><span class="line">        <span class="keyword">if</span> (mbd == <span class="literal">null</span> &amp;&amp; containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            <span class="comment">// 合并 BeanDefinition</span></span><br><span class="line">            mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// synthetic 字面意思是"合成的"。通过全局查找，我发现在 AOP 相关的类中会将该属性设为 true。</span></span><br><span class="line">        <span class="comment">// 所以我觉得该字段可能表示某个 bean 是不是被 AOP 增强过，也就是 AOP 基于原始类合成了一个新的代理类。</span></span><br><span class="line">        <span class="comment">// 不过目前只是猜测，没有深究。如果有朋友知道这个字段的具体意义，还望不吝赐教</span></span><br><span class="line">        boolean synthetic = (mbd != <span class="literal">null</span> &amp;&amp; mbd.isSynthetic());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 getObjectFromFactoryBean 方法继续获取实例</span></span><br><span class="line">        <span class="class"><span class="keyword">object</span> </span>= getObjectFromFactoryBean(factory, beanName, !synthetic);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">Object</span> getObjectFromFactoryBean(<span class="type">FactoryBean</span>&lt;?&gt; factory, <span class="type">String</span> beanName, boolean shouldPostProcess) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * FactoryBean 也有单例和非单例之分，针对不同类型的 FactoryBean，这里有两种处理方式：</span></span><br><span class="line"><span class="comment">     *   1. 单例 FactoryBean 生成的 bean 实例也认为是单例类型。需放入缓存中，供后续重复使用</span></span><br><span class="line"><span class="comment">     *   2. 非单例 FactoryBean 生成的 bean 实例则不会被放入缓存中，每次都会创建新的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (factory.isSingleton() &amp;&amp; containsSingleton(beanName)) &#123;</span><br><span class="line">        synchronized (getSingletonMutex()) &#123;</span><br><span class="line">            <span class="comment">// 从缓存中取 bean 实例，避免多次创建 bean 实例</span></span><br><span class="line">            <span class="type">Object</span> <span class="class"><span class="keyword">object</span> </span>= <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">==</span> <span class="title">null</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 使用工厂对象中创建实例</span></span><br><span class="line">                <span class="class"><span class="keyword">object</span> </span>= doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">                <span class="type">Object</span> alreadyThere = <span class="keyword">this</span>.factoryBeanObjectCache.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (alreadyThere != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="class"><span class="keyword">object</span> </span>= alreadyThere;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// shouldPostProcess 等价于上一个方法中的 !synthetic，用于表示是否应用后置处理</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">!=</span> <span class="title">null</span> <span class="title">&amp;&amp;</span> <span class="title">shouldPostProcess</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        beforeSingletonCreation(beanName);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 应用后置处理</span></span><br><span class="line">                            <span class="class"><span class="keyword">object</span> </span>= postProcessObjectFromFactoryBean(<span class="class"><span class="keyword">object</span>, <span class="title">beanName</span>)</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">catch</span> (<span class="type">Throwable</span> ex) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCreationException</span>(beanName,</span><br><span class="line">                                    <span class="string">"Post-processing of FactoryBean's singleton object failed"</span>, ex);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">finally</span> &#123;</span><br><span class="line">                            afterSingletonCreation(beanName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 这里的 beanName 对应于 FactoryBean 的实现类， FactoryBean 的实现类也会被实例化，并被缓存在 singletonObjects 中</span></span><br><span class="line">                    <span class="keyword">if</span> (containsSingleton(beanName)) &#123;</span><br><span class="line">                        <span class="comment">// FactoryBean 所创建的实例会被缓存在 factoryBeanObjectCache 中，供后续调用使用</span></span><br><span class="line">                        <span class="keyword">this</span>.factoryBeanObjectCache.put(beanName, (<span class="class"><span class="keyword">object</span> <span class="title">!=</span> <span class="title">null</span> <span class="title">?</span> <span class="title">object</span> </span>: <span class="type">NULL_OBJECT</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (<span class="class"><span class="keyword">object</span> <span class="title">!=</span> <span class="title">NULL_OBJECT</span> <span class="title">?</span> <span class="title">object</span> </span>: <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取非单例实例</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 从工厂类中获取实例</span></span><br><span class="line">        <span class="type">Object</span> <span class="class"><span class="keyword">object</span> </span>= doGetObjectFromFactoryBean(factory, beanName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">!=</span> <span class="title">null</span> <span class="title">&amp;&amp;</span> <span class="title">shouldPostProcess</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 应用后置处理</span></span><br><span class="line">                <span class="class"><span class="keyword">object</span> </span>= postProcessObjectFromFactoryBean(<span class="class"><span class="keyword">object</span>, <span class="title">beanName</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (<span class="type">Throwable</span> ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCreationException</span>(beanName, <span class="string">"Post-processing of FactoryBean's object failed"</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Object</span> doGetObjectFromFactoryBean(<span class="keyword">final</span> <span class="type">FactoryBean</span>&lt;?&gt; factory, <span class="keyword">final</span> <span class="type">String</span> beanName)</span><br><span class="line">        <span class="keyword">throws</span> <span class="type">BeanCreationException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// if 分支的逻辑是 Java 安全方面的代码，可以忽略，直接看 else 分支的代码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="type">System</span>.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">AccessControlContext</span> acc = getAccessControlContext();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="class"><span class="keyword">object</span> </span>= <span class="type">AccessController</span>.doPrivileged(<span class="keyword">new</span> <span class="type">PrivilegedExceptionAction</span>&lt;<span class="type">Object</span>&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    public <span class="type">Object</span> run() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> factory.getObject();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, acc);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (<span class="type">PrivilegedActionException</span> pae) &#123;</span><br><span class="line">                <span class="keyword">throw</span> pae.getException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 调用工厂方法生成 bean 实例</span></span><br><span class="line">            <span class="class"><span class="keyword">object</span> </span>= factory.getObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="type">FactoryBeanNotInitializedException</span> ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCurrentlyInCreationException</span>(beanName, ex.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (<span class="type">Throwable</span> ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCreationException</span>(beanName, <span class="string">"FactoryBean threw exception on object creation"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">==</span> <span class="title">null</span> <span class="title">&amp;&amp;</span> <span class="title">isSingletonCurrentlyInCreation</span>(<span class="params">beanName</span>)) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">BeanCurrentlyInCreationException</span>(</span><br><span class="line">                beanName, <span class="string">"FactoryBean which is currently in creation returned null from getObject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getObjectForBeanInstance 及它所调用的方法主要做了如下几件事情：<ul><li>检测参数 beanInstance 的类型，如果是非 FactoryBean 类型的 bean，直接返回</li><li>检测 FactoryBean 实现类是否单例类型，针对单例和非单例类型进行不同处理</li><li>对于单例 FactoryBean，先从缓存里获取 FactoryBean 生成的实例</li><li>若缓存未命中，则调用 FactoryBean.getObject() 方法生成实例，并放入缓存中</li><li>对于非单例的 FactoryBean，每次直接创建新的实例即可，无需缓存</li><li>如果 shouldPostProcess = true，不管是单例还是非单例 FactoryBean 生成的实例，都要进行后置处理</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.学习笔记源码分析-SpringIOC简介</title>
      <link href="/2017/10/09/ioc-1-introduce/"/>
      <url>/2017/10/09/ioc-1-introduce/</url>
      <content type="html"><![CDATA[<ul><li><a href="https://book.douban.com/subject/3897837/" target="_blank" rel="noopener">参考书籍-Spring揭秘</a></li><li><a href="https://book.douban.com/subject/25866350/" target="_blank" rel="noopener">参考书籍-Spring源码深度解析</a></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><a href="https://docs.spring.io/spring/docs/4.3.18.RELEASE/spring-framework-reference/htmlsingle/" target="_blank" rel="noopener">简介</a></h2><p>Spring 是一个轻量级的企业级应用开发框架，于 2004 年由 Rod Johnson 发布了 1.0 版本。经过十几年的迭代，现在的 Spring 框架已经非常成熟了。Spring 包含了众多模块，包括但不限于 Core、Bean、Context、AOP 和 Web 等。在今天，我们完全可以使用 Spring 所提供的一站式解决方案开发出我们所需要的应用。作为 Java 程序员，我们会经常和 Spring 框架打交道，所以还是很有必要弄懂 Spring 的原理。</p><h2 id="Spring的模块结构"><a href="#Spring的模块结构" class="headerlink" title="Spring的模块结构"></a><a href="https://docs.spring.io/spring/docs/4.3.18.RELEASE/spring-framework-reference/htmlsingle/#overview-modules" target="_blank" rel="noopener">Spring的模块结构</a></h2><p><img src="https://docs.spring.io/spring/docs/4.3.18.RELEASE/spring-framework-reference/htmlsingle/images/spring-overview.png" alt=""></p><p>从上图中可以看出Core Container处于整个框架的最底层（忽略 Test 模块），在其之上有 AOP、Data、Web 等模块。既然 Spring 容器是最核心的部分，那么大家如果要读 Spring 的源码，容器部分必须先弄懂。</p><h2 id="Spring-IOC-特性介绍"><a href="#Spring-IOC-特性介绍" class="headerlink" title="Spring IOC 特性介绍"></a>Spring IOC 特性介绍</h2><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><ul><li>alias 的中文意思是“别名”，在 Spring 中，我们可以使用 alias 标签给 bean 起个别名。比如下面的配置：</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个bean的id为hello</span></span><br><span class="line">&lt;bean id=<span class="string">"hello"</span> <span class="keyword">class</span>=<span class="string">"me.chilam.Hello"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"content"</span> <span class="keyword">value</span>=<span class="string">"hello"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"><span class="comment">//给bean id为hello的起一个别名alias-hello</span></span><br><span class="line">&lt;<span class="keyword">alias</span> name=<span class="string">"hello"</span> <span class="keyword">alias</span>=<span class="string">"alias-hello"</span>/&gt;</span><br><span class="line"><span class="comment">//再给上面的别名，再重新定义一个别名</span></span><br><span class="line">&lt;<span class="keyword">alias</span> name=<span class="string">"alias-hello"</span> <span class="keyword">alias</span>=<span class="string">"other-alias-hello"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>测试代码：</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ApplicationContextTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAlias</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        String configLocation = <span class="string">"application-alias.xml"</span>;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(configLocation);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"    alias-hello -&gt; "</span> + applicationContext.getBean(<span class="string">"alias-hello"</span>));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"other-alias-hello -&gt; "</span> + applicationContext.getBean(<span class="string">"other-alias-hello"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="autowire"><a href="#autowire" class="headerlink" title="autowire"></a>autowire</h3><p>autowire 即自动注入的意思，通过使用 autowire 特性，我们就不用再显示的配置 bean 之间的依赖了。把依赖的发现和注入都交给 Spring 去处理，省时又省力。autowire 几个可选项，比如 byName、byType 和 constructor 等。</p><p>当 bean 配置中的 autowire = byName 时，Spring 会首先通过反射获取该 bean 所依赖 bean 的名字（beanName），然后再通过调用 BeanFactory.getName(beanName) 方法即可获取对应的依赖实例。</p><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dao mysqlDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dao mongoDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 忽略 getter/setter</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.toString() + <span class="string">"\n\t\t\t\t\t&#123;"</span> +</span><br><span class="line">            <span class="string">"mysqlDao="</span> + mysqlDao +</span><br><span class="line">            <span class="string">", mongoDao="</span> + mongoDao +</span><br><span class="line">            <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dao</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlDao</span> <span class="keyword">implements</span> <span class="title">Dao</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoDao</span> <span class="keyword">implements</span> <span class="title">Dao</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>配置如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"mongoDao"</span> <span class="attr">class</span>=<span class="string">"me.chilam.MongoDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"mysqlDao"</span> <span class="attr">class</span>=<span class="string">"me.chilam.MySqlDao"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 非自动注入，手动配置依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"service-without-autowire"</span> <span class="attr">class</span>=<span class="string">"me.chilam.Service"</span> <span class="attr">autowire</span>=<span class="string">"no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mysqlDao"</span> <span class="attr">ref</span>=<span class="string">"mysqlDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mongoDao"</span> <span class="attr">ref</span>=<span class="string">"mongoDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过设置 autowire 属性，我们就不需要像上面那样显式配置依赖了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"service-with-autowire"</span> <span class="attr">class</span>=<span class="string">"me.chilam.Service"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> configLocation = <span class="string">"application-autowire.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(configLocation);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"service-without-autowire -&gt; "</span> + applicationContext.getBean(<span class="string">"service-without-autowire"</span>));</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"service-with-autowire -&gt; "</span> + applicationContext.getBean(<span class="string">"service-with-autowire"</span>));</span><br></pre></td></tr></table></figure><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>FactoryBean 是一种工厂 bean，与普通的 bean 不一样，FactoryBean 是一种可以产生 bean 的 bean。FactoryBean 是一个接口，我们可以实现这个接口。下面演示一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Hello</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hello <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Hello hello = <span class="keyword">new</span> Hello();</span><br><span class="line">        hello.setContent(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Hello.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置代码如下</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"helloFactory"</span> <span class="attribute">class</span>=<span class="string">"me.chilam.HelloFactoryBean"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>测试代码<ul><li>getBean(“helloFactory”) 时，ApplicationContext 会返回一个 Hello 对象，该对象是 HelloFactoryBean 的 getObject 方法所创建的。</li><li>如果我们想获取 HelloFactoryBean 本身，则可以在 helloFactory 前加上一个前缀&amp;，即&amp;helloFactory。</li></ul></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> configLocation = <span class="string">"application-factory-bean.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(configLocation);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"helloFactory -&gt; "</span> + applicationContext.getBean(<span class="string">"helloFactory"</span>));</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"&amp;helloFactory -&gt; "</span> + applicationContext.getBean(<span class="string">"&amp;helloFactory"</span>));</span><br></pre></td></tr></table></figure><h3 id="factory-method"><a href="#factory-method" class="headerlink" title="factory-method"></a>factory-method</h3><p>factory-method 可用于标识静态工厂的工厂方法（工厂方法是静态的）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticHelloFactory</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hello <span class="title">getHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Hello hello = <span class="keyword">new</span> Hello();</span><br><span class="line">        hello.setContent(<span class="string">"created by StaticHelloFactory"</span>);</span><br><span class="line">        <span class="keyword">return</span> hello;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置如下</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"staticHelloFactory"</span> <span class="attribute">class</span>=<span class="string">"me.chilam.StaticHelloFactory"</span> <span class="attribute">factory-method</span>=<span class="string">"getHello"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>测试代码如下：</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> configLocation = <span class="string">"application-factory-method.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(configLocation);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"staticHelloFactory -&gt; "</span> + applicationContext.getBean(<span class="string">"staticHelloFactory"</span>));</span><br></pre></td></tr></table></figure><p>对于非静态工厂，需要使用 factory-bean 和 factory-method 两个属性配合。</p><h3 id="lookup-method"><a href="#lookup-method" class="headerlink" title="lookup-method"></a>lookup-method</h3><ul><li>通过 BeanFactory getBean 方法获取 bean 实例时，对于 singleton 类型的 bean，BeanFactory 每次返回的都是同一个 bean。</li><li>对于 prototype 类型的 bean，BeanFactory 则会返回一个新的 bean。</li><li>现在考虑这样一种情况，一个 singleton 类型的 bean 中有一个 prototype 类型的成员变量。BeanFactory 在实例化 singleton 类型的 bean 时，会向其注入一个 prototype 类型的实例。但是 singleton 类型的 bean 只会实例化一次，那么它内部的 prototype 类型的成员变量也就不会再被改变。但如果我们每次从 singleton bean 中获取这个 prototype 成员变量时，都想获取一个新的对象。这个时候怎么办？</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">News</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 仅演示使用，News 类中无成员变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> News <span class="keyword">new</span><span class="type">s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> News getNews() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span><span class="type">s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setNews(News <span class="keyword">new</span><span class="type">s</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span> = <span class="keyword">new</span><span class="type">s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置如下</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"news"</span> <span class="built_in">class</span>=<span class="string">"me.chilam.News"</span> scope=<span class="string">"prototype"</span>/&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"newsProvider"</span> <span class="built_in">class</span>=<span class="string">"me.chilam.NewsProvider"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"news"</span> <span class="keyword">ref</span>=<span class="string">"news"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>测试代码如下：</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> configLocation = <span class="string">"application-lookup-method.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(configLocation);</span><br><span class="line">NewsProvider <span class="keyword">new</span><span class="type">sProvider</span> = (NewsProvider) applicationContext.getBean(<span class="string">"newsProvider"</span>);</span><br><span class="line">System.out.println(<span class="keyword">new</span><span class="type">sProvider</span>.getNews());<span class="comment">//返回的结果是一样的，并不是重新生成</span></span><br><span class="line">System.out.println(<span class="keyword">new</span><span class="type">sProvider</span>.getNews());<span class="comment">//返回的结果是一样的，并不是重新生成</span></span><br></pre></td></tr></table></figure><h4 id="实现ApplicationContextAware接口"><a href="#实现ApplicationContextAware接口" class="headerlink" title="实现ApplicationContextAware接口"></a>实现ApplicationContextAware接口</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsProvider</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">ApplicationContextAware</span></span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> News <span class="keyword">new</span><span class="type">s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 每次都从 applicationContext 中获取一个新的 bean */</span></span><br><span class="line">    <span class="keyword">public</span> News getNews() &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(<span class="string">"news"</span>, News.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setNews(News <span class="keyword">new</span><span class="type">s</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span> = <span class="keyword">new</span><span class="type">s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置和测试代码同上，这是获取的News对象就不是同一个了</li></ul><h4 id="使用lookup-method特性"><a href="#使用lookup-method特性" class="headerlink" title="使用lookup-method特性"></a>使用lookup-method特性</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">News</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 仅演示使用，News 类中无成员变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> News <span class="keyword">new</span><span class="type">s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> News getNews() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span><span class="type">s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> void setNews(News <span class="keyword">new</span><span class="type">s</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">new</span><span class="type">s</span> = <span class="keyword">new</span><span class="type">s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置代码</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"news"</span> <span class="built_in">class</span>=<span class="string">"me.chilam.News"</span> scope=<span class="string">"prototype"</span>/&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"newsProvider"</span> <span class="built_in">class</span>=<span class="string">"me.chilam.NewsProvider"</span>&gt;</span><br><span class="line">    &lt;lookup-method <span class="built_in">name</span>=<span class="string">"getNews"</span> bean=<span class="string">"news"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> configLocation = <span class="string">"application-lookup-method.xml"</span>;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(configLocation);</span><br><span class="line">NewsProvider <span class="keyword">new</span><span class="type">sProvider</span> = (NewsProvider) applicationContext.getBean(<span class="string">"newsProvider"</span>);</span><br><span class="line">System.out.println(<span class="string">"newsProvider -&gt; "</span> + <span class="keyword">new</span><span class="type">sProvider</span>);<span class="comment">//此时被CGLIB增强了</span></span><br><span class="line">System.out.println(<span class="string">"news 1 -&gt; "</span> + <span class="keyword">new</span><span class="type">sProvider</span>.getNews());<span class="comment">//不是同一个对象了</span></span><br><span class="line">System.out.println(<span class="string">"news 2 -&gt; "</span> + <span class="keyword">new</span><span class="type">sProvider</span>.getNews());</span><br></pre></td></tr></table></figure><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends-on"></a>depends-on</h3><ul><li>当一个 bean 直接依赖另一个 bean，可以使用 <ref> 标签进行配置。</ref></li><li>不过如某个 bean 并不直接依赖于其他 bean，但又需要其他 bean 先实例化好，这个时候就需要使用 depends-on 特性了</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"hello"</span> <span class="built_in">class</span>=<span class="string">"me.chilam.Hello"</span> depends-<span class="keyword">on</span>=<span class="string">"world"</span>/&gt;</span><br><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"world"</span> <span class="built_in">class</span>=<span class="string">"me.chilam.World"</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h3><p>BeanPostProcessor 是 bean 实例化时的后置处理器，包含两个方法，其源码如下：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">public</span> interface <span class="keyword">BeanPostProcessor </span>&#123;</span><br><span class="line">    // <span class="keyword">bean </span>初始化前的回调方法</span><br><span class="line">    Object postProcessBeforeInitialization(Object <span class="keyword">bean, </span><span class="keyword">String </span><span class="keyword">beanName) </span>throws <span class="keyword">BeansException;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"> </span>   // <span class="keyword">bean </span>初始化后的回调方法    </span><br><span class="line">    Object postProcessAfterInitialization(Object <span class="keyword">bean, </span><span class="keyword">String </span><span class="keyword">beanName) </span>throws <span class="keyword">BeansException;</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>BeanPostProcessor 是 Spring 框架的一个扩展点，通过实现 BeanPostProcessor 接口，我们就可插手 bean 实例化的过程。</li><li>AOP 就是在 bean 实例后期间将切面逻辑织入 bean 实例中的，AOP 也正是通过 BeanPostProcessor 和 IOC 容器建立起了联系</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日志后置处理器，将会在 bean 创建前、后打印日志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class LoggerBeanPostProcessor implements BeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> postProcessBeforeInitialization(<span class="keyword">Object</span> bean, <span class="keyword">String</span> beanName) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Before "</span> + beanName + <span class="string">" Initialization"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> postProcessAfterInitialization(<span class="keyword">Object</span> bean, <span class="keyword">String</span> beanName) <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"After "</span> + beanName + <span class="string">" Initialization"</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置如下</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">class</span>=<span class="string">"me.chilam.LoggerBeanPostProcessor"</span>/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"hello"</span> <span class="attribute">class</span>=<span class="string">"me.chilam.Hello"</span>/&gt;</span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"world"</span> <span class="attribute">class</span>=<span class="string">"me.chilam.World"</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">String configLocation</span> = <span class="string">"application-bean-post-processor.xml"</span>;</span><br><span class="line"><span class="attribute">ApplicationContext applicationContext</span> = new ClassPathXmlApplicationContext(configLocation);</span><br></pre></td></tr></table></figure><ul><li>打印结果</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Before</span> hello <span class="keyword">Initialization</span></span><br><span class="line"><span class="keyword">After</span> hello <span class="keyword">Initialization</span></span><br><span class="line"><span class="keyword">Before</span> world <span class="keyword">Initialization</span></span><br><span class="line"><span class="keyword">After</span> world <span class="keyword">Initialization</span></span><br></pre></td></tr></table></figure><ul><li>BeanPostProcessor 类似的还有一个叫 BeanFactoryPostProcessor 拓展点，顾名思义，用户可以通过这个拓展点插手容器启动的过程。</li></ul><h3 id="BeanFactoryAware"><a href="#BeanFactoryAware" class="headerlink" title="BeanFactoryAware"></a>BeanFactoryAware</h3><ul><li>Spring 中定义了一些列的 Aware 接口，比如这里的 BeanFactoryAware，以及 BeanNameAware 和 BeanClassLoaderAware 等等</li><li>通过实现这些 Aware 接口，我们可以在运行时获取一些配置信息或者其他一些信息。<ul><li>比如实现 BeanNameAware 接口，我们可以获取 bean 的配置名称（beanName）。</li><li>通过实现 BeanFactoryAware 接口，我们可以在运行时获取 BeanFactory 实例。</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>siege</title>
      <link href="/2017/09/24/siege/"/>
      <url>/2017/09/24/siege/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Siege是一款开源的压力测试工具，设计用于评估WEB应用在压力下的承受能力。可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。</p><blockquote><p>官网 <a href="https://www.joedog.org/" target="_blank" rel="noopener">https://www.joedog.org/</a></p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//www.joedog.org/pub/siege/siege-latest.tar.gz </span></span><br><span class="line">tar -zxvf siege-latest<span class="selector-class">.tar</span><span class="selector-class">.gz</span> </span><br><span class="line">cd siege-<span class="number">3.1</span>/ </span><br><span class="line">./configure </span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><ol><li>-C,或–config 在屏幕上打印显示出当前的配置,配置是包括在他的配置文件$HOME/.siegerc中,可以编辑里面的参数,这样每次siege 都会按照它运行.</li><li>-v 运行时能看到详细的运行信息</li><li>-c n,或–concurrent=n 模拟有n个用户在同时访问,n不要设得太大,因为越大,siege 消耗本地机器的资源越多</li><li>-i,–internet 随机访问urls.txt中的url列表项,以此模拟真实的访问情况(随机性),当urls.txt存在是有效</li><li>-d n,–delay=n hit每个url之间的延迟,在0-n之间</li><li>-r n,–reps=n 重复运行测试n次,不能与 -t同时存在</li><li>-t n,–time=n 持续运行siege ‘n’秒(如10S),分钟(10M),小时(10H)</li><li>-l 运行结束,将统计数据保存到日志文件中siege .log,一般位于/usr/local/var/siege .log中,也可在.siegerc中自定义</li><li>-R SIEGERC,–rc=SIEGERC 指定用特定的siege 配置文件来运行,默认的为$HOME/.siegerc</li><li>-f FILE, –file=FILE 指定用特定的urls文件运行siege ,默认为urls.txt,位于siege 安装目录下的etc/urls.txt</li><li>-u URL,–url=URL 测试指定的一个URL,对它进行”siege “,此选项会忽略有关urls文件的设定</li></ol><h3 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="subst">@192</span> src]<span class="meta"># pwd</span></span><br><span class="line">/home/maxp/siege<span class="number">-4.0</span><span class="number">.4</span>/src</span><br><span class="line">[root<span class="subst">@192</span> src]<span class="meta"># ./siege -c100 -r2 http://192.168.192.1:8080/servlet-demo/notAsyncServl</span></span><br><span class="line"><span class="meta"># 结果示例</span></span><br><span class="line"><span class="symbol">Transactions:</span>                <span class="number">200</span> hits <span class="meta">#已完成事务总数</span></span><br><span class="line"><span class="symbol">Availability:</span>             <span class="number">100.00</span> % <span class="meta">#完成的成功率</span></span><br><span class="line">Elapsed time:              <span class="number">16.95</span> secs<span class="meta">#总共使用的时间</span></span><br><span class="line">Data transferred:           <span class="number">0.00</span> MB<span class="meta">#响应中的数据的总大小</span></span><br><span class="line">Response time:              <span class="number">8.30</span> secs<span class="meta">#显示网络连接的速度</span></span><br><span class="line">Transaction rate:          <span class="number">11.80</span> trans/<span class="keyword">sec</span><span class="meta">#平均每秒完成的事务总数</span></span><br><span class="line"><span class="symbol">Throughput:</span>             <span class="number">0.00</span> MB/<span class="keyword">sec</span><span class="meta">#平均每秒传送的数据量</span></span><br><span class="line"><span class="symbol">Concurrency:</span>               <span class="number">97.90</span><span class="meta">#实际最高并发链接数</span></span><br><span class="line">Successful transactions:         <span class="number">200</span><span class="meta">#成功处理次数</span></span><br><span class="line">Failed transactions:               <span class="number">0</span><span class="meta">#失败处理次数</span></span><br><span class="line">Longest transaction:            <span class="number">8.71</span><span class="meta">#最长完成事务处理时间</span></span><br><span class="line">Shortest transaction:           <span class="number">8.00</span><span class="meta">#最短完成事务处理时间</span></span><br></pre></td></tr></table></figure><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>发送post请求时，url格式为：<a href="http://www.xxxx.com/" target="_blank" rel="noopener">http://www.xxxx.com/</a> POST p1=v1&amp;p2=v2</li><li>如果url中含有空格和中文，要先进行url编码，否则siege发送的请求url不准确</li></ul>]]></content>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java-selenium</title>
      <link href="/2017/09/24/java-selenium/"/>
      <url>/2017/09/24/java-selenium/</url>
      <content type="html"><![CDATA[<h2 id="selenium项目介绍"><a href="#selenium项目介绍" class="headerlink" title="selenium项目介绍"></a>selenium项目介绍</h2><p>自动化测试(详细的可以百度哈)</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">github</span>-&gt;</span>https:<span class="comment">//github.com/SeleniumHQ/selenium</span></span><br></pre></td></tr></table></figure><h2 id="基于FireFox的测试"><a href="#基于FireFox的测试" class="headerlink" title="基于FireFox的测试"></a>基于FireFox的测试</h2><h3 id="首先安装FireFox浏览器"><a href="#首先安装FireFox浏览器" class="headerlink" title="首先安装FireFox浏览器"></a>首先安装FireFox浏览器</h3><h3 id="FireFox驱动下载地址如下"><a href="#FireFox驱动下载地址如下" class="headerlink" title="FireFox驱动下载地址如下"></a>FireFox驱动下载地址如下</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/mozilla/g</span>eckodriver<span class="regexp">/release</span></span><br></pre></td></tr></table></figure><p>下载最新版的即可geckodriver-v0.19.0-win64.zip(windows操作系统的驱动)，解压文件出现geckodriver.exe</p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.servlet;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.WebDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.firefox.FirefoxDriver;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHelloServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDoGet</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//设置FireFox驱动的地址</span></span><br><span class="line">       System.setProperty(<span class="string">"webdriver.gecko.driver"</span>,<span class="string">"D:\\用户目录\\下载\\geckodriver-v0.19.0-win64\\geckodriver.exe"</span>);</span><br><span class="line">       WebDriver driver =<span class="keyword">new</span> FirefoxDriver();</span><br><span class="line">       <span class="comment">//请求地址</span></span><br><span class="line">       driver.get(<span class="string">"http://www.baidu.com/"</span>);</span><br><span class="line">       <span class="comment">//获取请求地址的title</span></span><br><span class="line">       System.err.println(<span class="string">"Page title is"</span>+driver.getTitle());</span><br><span class="line">       <span class="comment">//退出浏览器</span></span><br><span class="line">       driver.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于IE11的测试"><a href="#基于IE11的测试" class="headerlink" title="基于IE11的测试"></a>基于IE11的测试</h2><h3 id="安装IE11"><a href="#安装IE11" class="headerlink" title="安装IE11"></a>安装IE11</h3><h3 id="下载IEDriver"><a href="#下载IEDriver" class="headerlink" title="下载IEDriver"></a>下载IEDriver</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载地址：<span class="string">http:</span><span class="comment">//selenium-release.storage.googleapis.com/index.html</span></span><br></pre></td></tr></table></figure><p>IEDriverServer_x64_3.5.1.zip</p><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">"webdriver.ie.driver"</span>,<span class="string">"D:<span class="subst">\\</span>用户目录<span class="subst">\\</span>下载<span class="subst">\\</span>IEDriverServer_x64_3.5.1<span class="subst">\\</span>IEDriverServer.exe"</span>);</span><br><span class="line">WebDriver driver = new InternetExplorerDriver();</span><br></pre></td></tr></table></figure><p>常见错误如下，取消设置IE的保护模式<br>Protected Mode settings are not the same for all zones. Enable Protected Mode must be set to the same value (enabled or disabled) for all zones.</p><h2 id="基于Chrome测试"><a href="#基于Chrome测试" class="headerlink" title="基于Chrome测试"></a>基于Chrome测试</h2><h3 id="驱动下载"><a href="#驱动下载" class="headerlink" title="驱动下载"></a>驱动下载</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>npm.taobao.org<span class="regexp">/mirrors/</span>chromedriver<span class="regexp">/2.31/</span></span><br></pre></td></tr></table></figure><p>chromedriver_win32.zip</p><h3 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">"webdriver.chrome.driver"</span>,<span class="string">"D:<span class="subst">\\</span>用户目录<span class="subst">\\</span>下载<span class="subst">\\</span>chromedriver_win32<span class="subst">\\</span>chromedriver.exe"</span>);</span><br><span class="line">WebDriver driver = new ChromeDriver();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上代码中System.property的时候，Google的驱动以及IE的驱动需要注意本地安装软件的版本，以及可以简化的System.property语句，只需要把浏览器的驱动拷贝到本地运行程序的jdk的bin目录就可以。</p><h3 id="本测试demo使用驱动下载地址"><a href="#本测试demo使用驱动下载地址" class="headerlink" title="本测试demo使用驱动下载地址"></a>本测试demo使用驱动下载地址</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/CasperMXP/</span>servlet-demo<span class="regexp">/tree/m</span>aster<span class="regexp">/src/m</span>ain<span class="regexp">/resources</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Servlet3.0</title>
      <link href="/2017/09/21/servlet/"/>
      <url>/2017/09/21/servlet/</url>
      <content type="html"><![CDATA[<h2 id="Servlet3-0与web容器的支持情况"><a href="#Servlet3-0与web容器的支持情况" class="headerlink" title="Servlet3.0与web容器的支持情况"></a>Servlet3.0与web容器的支持情况</h2><h3 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h3><ul><li><a href="http://www.oracle.com/technetwork/cn/java/javaee/documentation/index.html" target="_blank" rel="noopener">JavaEE Document</a></li><li><a href="http://www.oracle.com/technetwork/java/javaee/tech/javaee5-jsp-135162.html?ssSourceSiteId=otncn" target="_blank" rel="noopener">JavaEE5 Document</a>(Servlet2.5)</li><li><a href="http://www.oracle.com/technetwork/java/javaee/tech/javaee6technologies-1955512.html?ssSourceSiteId=otncn" target="_blank" rel="noopener">JavaEE6 Document</a>(Servlet3.0)</li><li><a href="http://www.oracle.com/technetwork/java/javaee/tech/index.html" target="_blank" rel="noopener">JavaEE7 Document</a>(Servlet3.1)</li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a><a href="http://tomcat.apache.org/whichversion.html" target="_blank" rel="noopener">Tomcat</a></h3><p><img src="http://orkt468tj.bkt.clouddn.com/17-9-21/26814947.jpg" alt=""></p><h3 id="Oracle-WebLogic"><a href="#Oracle-WebLogic" class="headerlink" title="Oracle WebLogic"></a><a href="http://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-main-097127.html" target="_blank" rel="noopener">Oracle WebLogic</a></h3><ul><li>Oracle WebLogic Server 12c Release 2<ul><li><a href="http://www.oracle.com/technetwork/middleware/weblogic/downloads/index.html" target="_blank" rel="noopener">12.2.1.3.0</a>(Servlet3.1)</li><li>12.2.1.2.0</li><li>12.2.1.1.0</li><li>12.2.1</li></ul></li><li>Oracle WebLogic Server 12c Release 1<ul><li>12.1.3</li><li>12.1.2</li><li>12.1.1(Servlet3.0/JDK1.6.0.24)</li></ul></li><li>Oracle WebLogic Server 11g Release 1 <ul><li>10.3.6(Servlet2.5)</li></ul></li></ul><h2 id="Web-xml根元素定义"><a href="#Web-xml根元素定义" class="headerlink" title="Web.xml根元素定义"></a>Web.xml根元素定义</h2><p>不同版本Servlet版本定义在的web.xml文件的根元素不一样，详细请参考<a href="http://chilam.me/2017/08/10/web-xml/">web.xml根元素</a></p><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>类的关系</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/17-9-21/90919684.jpg" alt="">    </p><ul><li>开发者在使用的时候一般继承javax.servlet.http.HttpServlet即可，如下代码所示</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>常用的Http请求对应的处理方法</p><ul><li>doGet</li><li>doPost</li><li>service</li><li>实现代码如下：<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理HTTP GET请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.getWriter().write(<span class="type">LocalTime</span>.now()+<span class="string">" doGet "</span>+ req.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理HTTP POST请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.getWriter().write(<span class="type">LocalTime</span>.now()+<span class="string">" doPost "</span>+ req.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理HTTP任意请求，该方法一旦被重写后，请求将不在会进入doGet(),ddPost()方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void service(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.getWriter().write(<span class="type">LocalTime</span>.now()+<span class="string">" service "</span> +req.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>xml配置详细解释</p></li></ul><p>### </p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.design-patter-observer</title>
      <link href="/2017/09/13/design-pattern-3/"/>
      <url>/2017/09/13/design-pattern-3/</url>
      <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>某些事情发生的时候（比如状态发生改变），如果一个对象需要自动地通知其他多个对象。</p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>一个观察者接口</li><li>多个观察者实现类</li><li>被观察者对象</li></ul><h3 id="示例代码-非lambda"><a href="#示例代码-非lambda" class="headerlink" title="示例代码-非lambda"></a>示例代码-非lambda</h3><ul><li>观察者接口及实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NYTimes</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"NYTimes.notify"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeMode</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LeMode.notify"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="comment">//通知观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObsercers</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Observer&gt; observerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observerList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObsercers</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        observerList.forEach(observer -&gt; observer.notify(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConcreteSubject concreteSubject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        concreteSubject.registerObserver(<span class="keyword">new</span> NYTimes());</span><br><span class="line">        concreteSubject.registerObserver(<span class="keyword">new</span> LeMode());</span><br><span class="line">        concreteSubject.notifyObsercers(<span class="string">"sss"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design-pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.design-pattern-template</title>
      <link href="/2017/09/13/design-pattern-2/"/>
      <url>/2017/09/13/design-pattern-2/</url>
      <content type="html"><![CDATA[<h2 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>需要采用某个算法的框架，同时又希望有一定的灵活度，能够对它的某些部分进行改进。</p><h3 id="2个重要组成部分"><a href="#2个重要组成部分" class="headerlink" title="2个重要组成部分"></a>2个重要组成部分</h3><ul><li>抽象类，定义算法骨架</li><li>具体实现类，对抽象方法的实现</li></ul><h3 id="示例代码-非lambda"><a href="#示例代码-非lambda" class="headerlink" title="示例代码-非lambda"></a>示例代码-非lambda</h3><ul><li>抽象类-算法骨架</li></ul><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> AbstractTemplate <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    public void process(int id) &#123;</span></span><br><span class="line"><span class="comment">        System.err.println("步骤一");</span></span><br><span class="line"><span class="comment">        method(id + "");</span></span><br><span class="line"><span class="comment">        System.err.println("步骤二");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> void <span class="function"><span class="keyword">method</span><span class="params">(String s)</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体实现类</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ConcreteTemplate</span> <span class="keyword">extends</span> <span class="title">AbstractTemplate</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void method(<span class="type">String</span> s) &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"s = "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">AbstractTemplate</span> abstractTemplate = <span class="keyword">new</span> <span class="type">ConcreteTemplate</span>();</span><br><span class="line">        abstractTemplate.process(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码-lambda形式"><a href="#示例代码-lambda形式" class="headerlink" title="示例代码-lambda形式"></a>示例代码-lambda形式</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package me.chilam.<span class="keyword">template</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class Template &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">process</span>(<span class="keyword">int</span> id, Consumer&lt;<span class="keyword">String</span>&gt; consumer) &#123;</span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"步骤一"</span>);</span><br><span class="line">        consumer.accept(id + <span class="string">""</span>);</span><br><span class="line">        System.err.<span class="built_in">println</span>(<span class="string">"步骤二"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Template <span class="keyword">template</span> = <span class="keyword">new</span> Template();</span><br><span class="line">        <span class="keyword">template</span>.<span class="built_in">process</span>(<span class="number">1</span>, s -&gt; System.out.<span class="built_in">println</span>(<span class="string">"s = "</span> + s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design-pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.design-pattern-strategy</title>
      <link href="/2017/09/13/design-pattern-1/"/>
      <url>/2017/09/13/design-pattern-1/</url>
      <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>代表了解决一类算法的通用解决方案，可以在运行时选择使用具体的方案。</p><h3 id="策略模式包含3部分"><a href="#策略模式包含3部分" class="headerlink" title="策略模式包含3部分"></a>策略模式包含3部分</h3><ul><li>一个代表某个算法的接口</li><li>一个或多个该接口的实现</li><li>一个或多个使用策略对象的客户</li></ul><h3 id="示例代码-非lambda"><a href="#示例代码-非lambda" class="headerlink" title="示例代码-非lambda"></a>示例代码-非lambda</h3><ul><li>一个代表某个算法的接口</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>ValidateionStrategy &#123;</span><br><span class="line">    boolean execute(String s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个或多个该接口的实现</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsAllLowerCase</span> <span class="keyword">implements</span> <span class="title">ValidateionStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> s.<span class="title">matches</span><span class="params">(<span class="string">"[a-z]+"</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">----------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsNumeric</span> <span class="keyword">implements</span> <span class="title">ValidateionStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> s.<span class="title">matches</span><span class="params">(<span class="string">"\\d+"</span>)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个或多个使用策略对象的客户</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ValidateionStrategy validateionStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Validator</span><span class="params">(ValidateionStrategy validateionStrategy)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.validateionStrategy = validateionStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> validateionStrategy.<span class="title">execute</span><span class="params">(s)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Validator validator = <span class="keyword">new</span> Validator(<span class="keyword">new</span> IsNumeric());</span><br><span class="line">        <span class="keyword">boolean</span> xxxx = validator.execute(<span class="string">"xxxx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例-lambda表达式"><a href="#示例-lambda表达式" class="headerlink" title="示例-lambda表达式"></a>示例-lambda表达式</h3><ul><li>将算法接口定义成函数式接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidateionStrategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>直接传递具体算法进行策略</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ValidateionStrategy validateionStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Validator</span><span class="params">(ValidateionStrategy validateionStrategy)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.validateionStrategy = validateionStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> validateionStrategy.<span class="title">execute</span><span class="params">(s)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Validator validator = <span class="keyword">new</span> Validator(s -&gt; s.matches(<span class="string">"[a-z]+"</span>));</span><br><span class="line">        <span class="keyword">boolean</span> xxxx = validator.execute(<span class="string">"xxxx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design-pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4.design-pattern-responsibility</title>
      <link href="/2017/09/13/design-pattern-4/"/>
      <url>/2017/09/13/design-pattern-4/</url>
      <content type="html"><![CDATA[<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>是一种创建处理对象序列的通用方案。一个处理对象可能需要完成一些工作之后，将结果传递给另外一个对象，这个对象又接着给下一个。</p><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ul><li>一个代表处理对象的抽象类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessingObject</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> ProcessingObject&lt;T&gt; successor;<span class="comment">//下一个对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(ProcessingObject&lt;T&gt; successor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">handle</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        T r = handleWork(t);</span><br><span class="line">        <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            successor.handle(r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> T <span class="title">handleWork</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具体的责任链处理对象</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HeaderTextProcessing</span> <span class="keyword">extends</span> <span class="title">ProcessingObject&lt;String&gt;</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> handleWork(<span class="type">String</span> s) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hader text "</span> + s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">ProcessingObject</span>&lt;<span class="type">String</span>&gt; p1 = <span class="keyword">new</span> <span class="type">HeaderTextProcessing</span>();</span><br><span class="line">        <span class="type">ProcessingObject</span>&lt;<span class="type">String</span>&gt; p2 = <span class="keyword">new</span> <span class="type">SpellCheckerProcessing</span>();</span><br><span class="line">        p1.setSuccessor(p2);</span><br><span class="line">        <span class="type">String</span> labda_sssfff = p1.handle(<span class="string">"labda sssfff"</span>);</span><br><span class="line">        <span class="type">System</span>.err.println(labda_sssfff);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpellCheckerProcessing</span> <span class="keyword">extends</span> <span class="title">ProcessingObject&lt;String&gt;</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> handleWork(<span class="type">String</span> s) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.replace(<span class="string">"labda"</span>,<span class="string">"lambda"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design-pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.读书笔记《Java程序性能优化》-设计优化</title>
      <link href="/2017/09/03/java-optimize-2-design/"/>
      <url>/2017/09/03/java-optimize-2-design/</url>
      <content type="html"><![CDATA[<h2 id="善用设计模式"><a href="#善用设计模式" class="headerlink" title="善用设计模式"></a>善用设计模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul><li>对于频繁使用的对象，可以省略创建对象花费的时间</li><li>由于new操作的次数减少，对系统内存的使用频率也会降低，减轻GC压力，缩短GC停顿时间</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.读书笔记《Java程序性能优化》-概述</title>
      <link href="/2017/09/02/java-optimize-1-introduce/"/>
      <url>/2017/09/02/java-optimize-1-introduce/</url>
      <content type="html"><![CDATA[<h2 id="性能的概述"><a href="#性能的概述" class="headerlink" title="性能的概述"></a>性能的概述</h2><h3 id="看懂程序的性能"><a href="#看懂程序的性能" class="headerlink" title="看懂程序的性能"></a>看懂程序的性能</h3><ul><li>执行速度：程序的反映是否迅速，响应时间是否足够短</li><li>内存分配：内存分配是否合理，是否过多的消耗内存或者存在内存泄漏</li><li>启动时间：程序从运行到可以正常处理业务需要花费多长时间</li><li>负载承受能力：当系统压力上升时，系统的执行速度，响应时间的上升曲线是否平缓</li></ul><h3 id="性能的参考指标"><a href="#性能的参考指标" class="headerlink" title="性能的参考指标"></a>性能的参考指标</h3><ul><li>执行时间：一段代码从开始运行到结束运行，所使用的时间</li><li>CPU时间：函数或者线程占用CPU的时间</li><li>内存分配：程序在运行的时候所占用的内存空间</li><li>磁盘吞吐量：描述I/O的使用情况</li><li>网络吞吐量：描述网络的使用情况</li><li>响应时间：系统对某用户行文或事件作出的响应的时间。</li></ul><h3 id="系统瓶颈的计算资源"><a href="#系统瓶颈的计算资源" class="headerlink" title="系统瓶颈的计算资源"></a>系统瓶颈的计算资源</h3><ul><li>磁盘IO,读写速度要比内存慢很多</li><li>网络操作，网络操作可能比磁盘IO读写更慢</li><li>CPU,对于长时间，不间断的大量占用CPU资源将导致CPU争夺导致性能下降</li><li>异常，异常的捕获和处理是非常消耗资源的</li><li>数据库，海量数据的读写操作可能相当费时间</li><li>锁竞争，会导致明显的上下文切换的开销</li><li>内存，高频率的内存交换和扫描，内存大小不足</li></ul><h2 id="性能优化的层次"><a href="#性能优化的层次" class="headerlink" title="性能优化的层次"></a>性能优化的层次</h2><h3 id="设计的优化"><a href="#设计的优化" class="headerlink" title="设计的优化"></a>设计的优化</h3><p>处于调优手段的上层，它往往需要在软件开发之前进行。进行设计优化的时，设计人员必须熟悉常用的软件设计方法，设计模式，基本性能组件和常用优化思想，并将其有机的集成在软件系统中。</p><h3 id="代码调优"><a href="#代码调优" class="headerlink" title="代码调优"></a>代码调优</h3><p>正确的使用相关的API或类库，同时对算法或数据结构灵活运用。</p><h3 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h3><p>堆内存结构，GC种类</p><h3 id="数据库调优"><a href="#数据库调优" class="headerlink" title="数据库调优"></a>数据库调优</h3><ul><li>SQL语句优化</li><li>数据库进行优化</li><li>数据库软件进行优化</li></ul><h3 id="操作系统调优"><a href="#操作系统调优" class="headerlink" title="操作系统调优"></a>操作系统调优</h3><p>虚拟内存大小，磁盘的块大小等参数</p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.学习笔记-nginx</title>
      <link href="/2017/09/02/nginx/"/>
      <url>/2017/09/02/nginx/</url>
      <content type="html"><![CDATA[<h2 id="nginx简介"><a href="#nginx简介" class="headerlink" title="nginx简介"></a><a href="http://nginx.org/" target="_blank" rel="noopener">nginx简介</a></h2><p>Nginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器,Nginx，它的发音为“engine X”，是一个高性能的HTTP和反向代理服务器，同时也是一个 IMAP/POP3/SMTP 代理服务器。Nginx 是由俄罗斯人 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，它已经在该站点运行超过两年半了。Igor Sysoev 在建立的项目时,使用基于 BSD 许可。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>安装编译工具及库文件</li></ul><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make <span class="literal">zlib</span> <span class="literal">zlib</span>-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure><ul><li><p>安装 PCRE</p><ul><li><p>下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>downloads.sourceforge.net<span class="regexp">/project/</span>pcre<span class="regexp">/pcre/</span><span class="number">8.35</span><span class="regexp">/pcre-8.35.tar.gz</span></span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">zxvf</span> <span class="selector-tag">pcre-8</span><span class="selector-class">.35</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure></li><li><p>编译安装</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure></li><li><p>查看安装测试</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192</span> pcre<span class="number">-8.35</span>]# pcre-config --version</span><br><span class="line"><span class="number">8.35</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装nginx</p></li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="symbol">http:</span>/<span class="regexp">/nginx.org/download</span><span class="regexp">/nginx-1.6.2.tar.gz</span></span><br><span class="line"><span class="regexp">tar zxvf nginx-1.6.2.tar.gz</span></span><br><span class="line"><span class="regexp">cd nginx-1.6.2</span></span><br><span class="line"><span class="regexp">./configure</span> --prefix=<span class="regexp">/usr/local</span><span class="regexp">/webserver/nginx</span> --<span class="keyword">with</span>-http_stub_status_module --<span class="keyword">with</span>-http_ssl_module --<span class="keyword">with</span>-pcre=<span class="regexp">/usr/local</span><span class="regexp">/src/pcre</span>-<span class="number">8.35</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h2><p>反向代理（Reverse Proxy）方式是指以代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络上的服务器；并将从服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器。</p><p><a href="http://blog.51cto.com/12598157/2088168" target="_blank" rel="noopener">写的简单明了</a></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>netstat命令</title>
      <link href="/2017/08/24/netstat/"/>
      <url>/2017/08/24/netstat/</url>
      <content type="html"><![CDATA[<h2 id="netstat-command-not-found"><a href="#netstat-command-not-found" class="headerlink" title="netstat: command not found"></a>netstat: command not found</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> net-tools</span><br></pre></td></tr></table></figure><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="列出所有的端口"><a href="#列出所有的端口" class="headerlink" title="列出所有的端口"></a>列出所有的端口</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -<span class="keyword">a</span> <span class="comment">#列出所有端口 </span></span><br><span class="line">netstat -<span class="keyword">at</span> <span class="comment">#列出所有tcp端口 </span></span><br><span class="line">netstat -au <span class="comment">#列出所有udp端口</span></span><br></pre></td></tr></table></figure><h3 id="列出所有处于监听状态的Sockets"><a href="#列出所有处于监听状态的Sockets" class="headerlink" title="列出所有处于监听状态的Sockets"></a>列出所有处于监听状态的Sockets</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat -l <span class="comment">#只显示监听端口 </span></span><br><span class="line">netstat -<span class="keyword">lt</span> <span class="comment">#只列出所有监听 tcp 端口 </span></span><br><span class="line">netstat -lu <span class="comment">#只列出所有监听 udp 端口 </span></span><br><span class="line">netstat -lx <span class="comment">#只列出所有监听 UNIX 端口</span></span><br></pre></td></tr></table></figure><h3 id="显示每个协议的统计信息"><a href="#显示每个协议的统计信息" class="headerlink" title="显示每个协议的统计信息"></a>显示每个协议的统计信息</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -s 显示所有端口的统计信息 </span><br><span class="line">netstat -<span class="keyword">st</span> 显示TCP端口的统计信息 </span><br><span class="line">netstat -<span class="keyword">su</span> 显示UDP端口的统计信息</span><br></pre></td></tr></table></figure><h3 id="显示PID和进程名称"><a href="#显示PID和进程名称" class="headerlink" title="显示PID和进程名称"></a>显示PID和进程名称</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -pt</span></span><br></pre></td></tr></table></figure><h3 id="持续输出netstat的信息"><a href="#持续输出netstat的信息" class="headerlink" title="持续输出netstat的信息"></a>持续输出netstat的信息</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat -c</span></span><br></pre></td></tr></table></figure><h3 id="查看TCP状态信息"><a href="#查看TCP状态信息" class="headerlink" title="查看TCP状态信息"></a>查看TCP状态信息</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nap <span class="string">| grep SYN_SENT</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>web.xml各个版本的头部文件</title>
      <link href="/2017/08/10/web-xml/"/>
      <url>/2017/08/10/web-xml/</url>
      <content type="html"><![CDATA[<h2 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta">        "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Servlet 2.3 Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app xmlns=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span><br><span class="line">         xmln<span class="variable">s:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="comment">"http://java.sun.com/xml/ns/j2ee</span></span><br><span class="line">          http://java.<span class="keyword">sun</span>.<span class="keyword">com</span>/xml/ns/j2ee/web-app_2_4.xsd<span class="comment">"</span></span><br><span class="line">         <span class="keyword">version</span>=<span class="string">"2.4"</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;display-name&gt;</span>Servlet <span class="number">2.4</span> Web Application&lt;/<span class="keyword">display</span>-name&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h2 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a>2.5</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span><br><span class="line">         xmln<span class="variable">s:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="comment">"http://java.sun.com/xml/ns/javaee</span></span><br><span class="line">          http://java.<span class="keyword">sun</span>.<span class="keyword">com</span>/xml/ns/javaee/web-app_2_5.xsd<span class="comment">"</span></span><br><span class="line">         <span class="keyword">version</span>=<span class="string">"2.5"</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;display-name&gt;</span>Servlet <span class="number">2.5</span> Web Application&lt;/<span class="keyword">display</span>-name&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><h2 id="3-0"><a href="#3-0" class="headerlink" title="3.0"></a>3.0</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-app xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span><br><span class="line">         xmln<span class="variable">s:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="comment">"http://java.sun.com/xml/ns/javaee</span></span><br><span class="line">          http://java.<span class="keyword">sun</span>.<span class="keyword">com</span>/xml/ns/javaee/web-app_3_0.xsd<span class="comment">"</span></span><br><span class="line">         <span class="keyword">version</span>=<span class="string">"3.0"</span>&gt;</span><br><span class="line">    <span class="symbol">&lt;display-name&gt;</span>Servlet <span class="number">3.0</span> Web Application&lt;/<span class="keyword">display</span>-name&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaee </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>单元测试</title>
      <link href="/2017/08/08/unit-test/"/>
      <url>/2017/08/08/unit-test/</url>
      <content type="html"><![CDATA[<h2 id="单元测试概述"><a href="#单元测试概述" class="headerlink" title="单元测试概述"></a>单元测试概述</h2><p>按照软件工程的思想，软件测试可以分为单元测试、集成测试、功能测试、和系统测试等。功能测试和系统测试一般来说是测试人员的职责，但是单元测试和集成测试则必须是开发人员保证的。单元测试就是开发者编写的一段小代码。通常而言，一个单元测试用于判断某个特定条件后特定场景下某个特定函数的行为。</p><h2 id="单元测试系统基本概念"><a href="#单元测试系统基本概念" class="headerlink" title="单元测试系统基本概念"></a>单元测试系统基本概念</h2><ul><li>被测系统SUT:System Under Test或AUT Application Under Test</li><li>测试替身Test Double：使用测试替身减少被测对象的依赖，使得测试更加单一。</li><li>测试夹具Test Fixture：测试运行程序，会在测试方法运行之前自动执行初始化，回收资源</li><li>测试用例 Test Case</li><li>测试套件 Test Suite将多个测试用例组成一个测试用例组，则测试套件批量执行。</li></ul><h2 id="TestNG"><a href="#TestNG" class="headerlink" title="TestNG"></a>TestNG</h2><p>官方文档地址：<a href="http://testng.org/doc/" target="_blank" rel="noopener">http://testng.org/doc/</a></p><p>TestNG的出发点不仅仅是单元测试还可以进行集成测试，相对于Junit来说会更好一点。</p><h3 id="TestNG的生命周期"><a href="#TestNG的生命周期" class="headerlink" title="TestNG的生命周期"></a>TestNG的生命周期</h3><p><img src="http://orkt468tj.bkt.clouddn.com/17-8-8/50091612.jpg" alt=""></p><ul><li>类级初始化资源处理</li><li>方法级初始化资源处理</li><li>执行测试用例中的方法</li><li>方法级销毁资源处理</li><li>类级方法销毁处理</li></ul><h3 id="使用TestNG"><a href="#使用TestNG" class="headerlink" title="使用TestNG"></a>使用TestNG</h3><h4 id="引用依赖，需要JDK1-7以上"><a href="#引用依赖，需要JDK1-7以上" class="headerlink" title="引用依赖，需要JDK1.7以上"></a>引用依赖，需要JDK1.7以上</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基本的测试demo"><a href="#基本的测试demo" class="headerlink" title="基本的测试demo"></a>基本的测试demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam;</span><br><span class="line"><span class="keyword">import</span> org.testng.Assert;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApp</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"类级的初始化资源方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@BeforeMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"方法级的初始化方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"testMethod1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"testMethod2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"方法级的销毁资源方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"类级的销毁资源方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[TestNG] Running:</span><br><span class="line"><span class="code">  C:\Users\Administrator\.IntelliJIdea2017.1\system\temp-testng-customsuite.xml</span></span><br><span class="line">类级的初始化资源方法</span><br><span class="line">方法级的初始化方法</span><br><span class="line">testMethod1</span><br><span class="line">方法级的销毁资源方法</span><br><span class="line">方法级的初始化方法</span><br><span class="line">testMethod2</span><br><span class="line">方法级的销毁资源方法</span><br><span class="line">类级的销毁资源方法</span><br><span class="line"></span><br><span class="line">===============================================</span><br><span class="line">Default Suite</span><br><span class="line">Total tests run: 2, Failures: 0, Skips: 0</span><br><span class="line">===============================================</span><br></pre></td></tr></table></figure></p><h4 id="预期异常测试"><a href="#预期异常测试" class="headerlink" title="预期异常测试"></a>预期异常测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; arrayList = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        arrayList = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定测试方法抛出异常类型</span></span><br><span class="line">    <span class="meta">@Test</span>(expectedExceptions = NullPointerException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Assert.assertNotNull(arrayList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="忽略测试"><a href="#忽略测试" class="headerlink" title="忽略测试"></a>忽略测试</h4><p>设置@Test(enabled = false)就可以设置不测试该方法</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test(enabled = <span class="literal">false</span>,dataProvider =<span class="string">"testParams"</span>)</span><br><span class="line">   <span class="keyword">public</span> <span class="literal">void</span> testSimpleDateFormat(<span class="built_in">String</span> <span class="built_in">date</span>,<span class="built_in">String</span> dateFormat,<span class="built_in">String</span> expectedDate)throws ParseException&#123;</span><br><span class="line">       SimpleDateFormat sdf = <span class="literal">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">       <span class="built_in">Date</span> d = sdf.parse(<span class="built_in">date</span>);</span><br><span class="line">       simpleDateFormat = <span class="literal">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">       <span class="built_in">String</span> result = simpleDateFormat.format(d);</span><br><span class="line">       Assert.assertEquals(result,expectedDate);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="超时测试"><a href="#超时测试" class="headerlink" title="超时测试"></a>超时测试</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>(timeOut = <span class="number">100</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">testTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h4><p>为了测试程序的健壮性，可能需要模拟不同的参数对方法进行测试，如果为每个类型的参数创建一个测试方法，则是意见很难过事情。幸好的是TestNG提供了参数化测试，它能够创建由参数值供给的通用测试，从而为每个参数都运行一次，而不必要创建多个测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam;</span><br><span class="line"><span class="keyword">import</span> org.testng.Assert;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.DataProvider;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNgParameter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SimpleDateFormat simpleDateFormat;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回参数是Object[][]类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DataProvider</span>(name = <span class="string">"testParams"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object[][] getParameters()&#123;</span><br><span class="line">        String[][] params =&#123;</span><br><span class="line">                <span class="comment">//date，dateFormat,result，每一组值的顺序</span></span><br><span class="line">                &#123;<span class="string">"2017-08-08 10:15:12"</span>,<span class="string">"yyyyMMdd"</span>,<span class="string">"20170808"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"2017-08-08 10:15:12"</span>,<span class="string">"yyyy年MM月dd日"</span>,<span class="string">"2017年08月08日"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"2017-08-08 10:15:12"</span>,<span class="string">"HH时mm分ss秒"</span>,<span class="string">"10时15分12秒"</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法的参数顺序必须和上面定义值的顺序一致，参数名字尽量实义话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dateFormat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expectedDate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span>(dataProvider =<span class="string">"testParams"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleDateFormat</span><span class="params">(String date,String dateFormat,String expectedDate)</span><span class="keyword">throws</span> ParseException</span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        Date d = sdf.parse(date);</span><br><span class="line">        simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        String result = simpleDateFormat.format(d);</span><br><span class="line">        Assert.assertEquals(result,expectedDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="套件测试"><a href="#套件测试" class="headerlink" title="套件测试"></a>套件测试</h4><p>测试套件是用于测试软件程序的行为或一组行为的测试用例的集合。在TestNG中无法再源代码中定义一个套件，但是它可以由一个XML文件表示，因为套件是执行的功能，套件可以包含一个或多个测试，并由<suite>标记定义。<suite>是testng.xml根标记</suite></suite></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"Default Suite"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中suite标签有以下属性<br>|属性|描述|<br>|:—–:|:—–:|<br>|name|套件的名称，必需的属性|<br>|verbose|运行的级别或详细程度|<br>|parallel|TestNG是否运行不同的线程来运行这个套件|<br>|thread-count|如果启用并行模式，则要使用的线程数|<br>|annotations|在测试中使用的注释类型|<br>|time-out|在本测试中所有测试方法上使用默认的超时时间|</p><p>简单的示例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"Default Suite"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--测试单独类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"testApp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"me.chilam.TestApp"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">methods</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span> <span class="attr">name</span>=<span class="string">"testMethod1"</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">methods</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试全部的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"testPackage"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"me.chilam.*"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用testng.xml文件进行测试</p><p><img src="http://orkt468tj.bkt.clouddn.com/17-8-9/30819589.jpg" alt=""></p><h4 id="分组测试"><a href="#分组测试" class="headerlink" title="分组测试"></a>分组测试</h4><p>TestNG支持执行复杂的分组测试，不仅可以声明单个测试用例内的测试方法的分组，而且还可以声明不同测试用例类级的分组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">测试代码</span><br><span class="line"><span class="keyword">package</span> me.chilam;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.AfterGroups;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.BeforeGroups;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGroup</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在database分组之前执行，而且只执行一次</span></span><br><span class="line">    <span class="meta">@BeforeGroups</span>(<span class="string">"database"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"setupDB()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在database分组之后执行，而且只执行一次</span></span><br><span class="line">    <span class="meta">@AfterGroups</span>(<span class="string">"database"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cleanDB()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定分组名称</span></span><br><span class="line">    <span class="meta">@Test</span>(groups = <span class="string">"selenium-test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runSelenium</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"runSelenium()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span>(groups = <span class="string">"selenium-test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runSelenium1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"runSelenium()1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span>(groups = <span class="string">"database"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnectOracle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testConnectOracle()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span>(groups = <span class="string">"database"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnectMsSQL</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testConnectMsSQL"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//依赖分组 database,seleniun-test</span></span><br><span class="line">    <span class="meta">@Test</span>(dependsOnGroups = &#123; <span class="string">"database"</span>, <span class="string">"selenium-test"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runFinal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"runFinal"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试结果：</span><br><span class="line">runSelenium()</span><br><span class="line">runSelenium()<span class="number">1</span></span><br><span class="line">setupDB()</span><br><span class="line">testConnectMsSQL</span><br><span class="line">testConnectOracle()</span><br><span class="line">cleanDB()</span><br><span class="line">runFinal</span><br></pre></td></tr></table></figure><p>通过配置文件设置测试分组<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"Default Suite"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试TestGroup类的database分组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"testGroup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groups</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"database"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">groups</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"me.chilam.TestGroup"</span>&gt;</span><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br><span class="line">测试结果</span><br><span class="line">testConnectMsSQL</span><br><span class="line">testConnectOracle()</span><br></pre></td></tr></table></figure></p><h4 id="结合Selenium-java做负载测试或压力测试"><a href="#结合Selenium-java做负载测试或压力测试" class="headerlink" title="结合Selenium-java做负载测试或压力测试"></a>结合Selenium-java做负载测试或压力测试</h4><p>添加selenum-java的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试代码<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test(invocationCount = <span class="number">3</span>)</span><br><span class="line">public void testWeb()&#123;</span><br><span class="line">    <span class="comment">/*System.setProperty("webdriver.ie.driver","C:\\Program Files\\Internet Explorer\\iexplore.exe");</span></span><br><span class="line"><span class="comment">    WebDriver driver = new InternetExplorerDriver();*/</span></span><br><span class="line">    System.setProperty(<span class="string">"webdriver.chrome.driver"</span>,<span class="string">"C:<span class="subst">\\</span>Users<span class="subst">\\</span>Administrator<span class="subst">\\</span>AppData<span class="subst">\\</span>Local<span class="subst">\\</span>Google<span class="subst">\\</span>Chrome<span class="subst">\\</span>Application<span class="subst">\\</span>chrome.exe"</span>);</span><br><span class="line">    WebDriver driver = new ChromeDriver();</span><br><span class="line">    driver.get(<span class="string">"https://www.baidu.com/"</span>);</span><br><span class="line">    System.err.println(<span class="string">"Page title is"</span>+driver.getTitle());</span><br><span class="line">    driver.quit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>备注：需要JDK1.8运行测试用例</strong></p><p>使用demo</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//invocationCount指定运行的次数</span></span><br><span class="line"><span class="meta">@Test</span>(invocationCount = <span class="number">10</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testApp()&#123;</span><br><span class="line">    System.err.println(<span class="string">"testApp"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基于浏览器测试，打开浏览器，打开指定网页</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多线程执行</span></span><br><span class="line"><span class="meta">@Test</span>(invocationCount = <span class="number">3</span>, threadPoolSize = <span class="number">3</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testThreadPools() &#123;</span><br><span class="line">    System.out.printf(<span class="string">"Thread Id : %s%n"</span>, Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br><span class="line">测试结果</span><br><span class="line">Thread <span class="string">Id :</span> <span class="number">14</span></span><br><span class="line">Thread <span class="string">Id :</span> <span class="number">12</span></span><br><span class="line">Thread <span class="string">Id :</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><h4 id="依赖测试"><a href="#依赖测试" class="headerlink" title="依赖测试"></a>依赖测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * User: 马兴平 Date: 2017/8/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDependency</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span>(dependsOnMethods = &#123;<span class="string">"testMethod2"</span>,<span class="string">"testMethod3"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"testMethod1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"testMethod2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.err.println(<span class="string">"testMethod3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">测试结果</span><br><span class="line">testMethod2</span><br><span class="line">testMethod3</span><br><span class="line">testMethod1</span><br></pre></td></tr></table></figure><h3 id="模拟利器Mockito"><a href="#模拟利器Mockito" class="headerlink" title="模拟利器Mockito"></a>模拟利器Mockito</h3><p>Stub对象用来提供测试的时所需要的测试数据，可以对各种交互设置相应的回应。<br>Mock对象用来验证测试中所依赖的对象之间的交互是否能够达到预期。</p><p>Mockito依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>测试代码<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#待被测试接口</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    String getUsernameById(String id);</span><br><span class="line">&#125;</span><br><span class="line">测试代码</span><br><span class="line"><span class="keyword">package</span> me.chilam;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mock;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mockito;</span><br><span class="line"><span class="keyword">import</span> org.mockito.MockitoAnnotations;</span><br><span class="line"><span class="keyword">import</span> org.mockito.<span class="keyword">internal</span>.util.MockUtil;</span><br><span class="line"><span class="keyword">import</span> org.testng.Assert;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"><span class="keyword">import</span> static org.mockito.Mockito.doReturn;</span><br><span class="line"><span class="keyword">import</span> static org.mockito.Mockito.<span class="keyword">when</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMock</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    IUserService userService;</span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="keyword">public</span> void beforeClass()&#123;</span><br><span class="line">        <span class="comment">//实例化所有Mock注解标注的类</span></span><br><span class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> void testGetUsernameById()&#123;</span><br><span class="line">        <span class="comment">//对方法设置返回值</span></span><br><span class="line">        <span class="keyword">when</span>(userService.getUsernameById(<span class="string">"123"</span>)).thenReturn(<span class="string">"张三"</span>);</span><br><span class="line">        <span class="comment">//执行方法调用</span></span><br><span class="line">        Assert.assertEquals(userService.getUsernameById(<span class="string">"123"</span>),<span class="string">"张三"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>验证交互</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mock;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mockito;</span><br><span class="line"><span class="keyword">import</span> org.mockito.MockitoAnnotations;</span><br><span class="line"><span class="keyword">import</span> org.mockito.internal.util.MockUtil;</span><br><span class="line"><span class="keyword">import</span> org.testng.Assert;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMock</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    IUserService userService;</span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实例化所有Mock注解标注的类</span></span><br><span class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUsernameById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//对方法设置返回值</span></span><br><span class="line">        when(userService.getUsernameById(<span class="string">"123"</span>)).thenReturn(<span class="string">"张三"</span>);</span><br><span class="line">        <span class="comment">//执行方法调用</span></span><br><span class="line">        Assert.assertEquals(userService.getUsernameById(<span class="string">"123"</span>),<span class="string">"张三"</span>);</span><br><span class="line">        <span class="comment">//验证交互</span></span><br><span class="line">        verify(userService).getUsernameById(<span class="string">"123"</span>);</span><br><span class="line">        <span class="comment">//验证方法至少被调用一次</span></span><br><span class="line">        verify(userService,atLeastOnce()).getUsernameById(<span class="string">"123"</span>);</span><br><span class="line">        <span class="comment">//验证方法至少被调用2次</span></span><br><span class="line">        verify(userService,atLeast(<span class="number">2</span>)).getUsernameById(<span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试整合之王Unitils"><a href="#测试整合之王Unitils" class="headerlink" title="测试整合之王Unitils"></a>测试整合之王Unitils</h3><p>Unitils的功能特点：</p><ul><li>自动维护和强制关闭单元测试数据库</li><li>简化单元测试数据库连接的设置</li><li>简化利用DbUnit测试数据的插入</li><li>简化HibernateSession的管理</li><li>自动测试与数据库相映射的Hibernate映射对象</li><li>易于把Spring管理的Bean注入单元测试中，支持在单元测试中使用Spring容器的Hibernate SessionFactory</li><li>简化EasyMock，Mock对象创建</li><li>简化Mock对象注入，利用反射匹配EasyMock匹配参数</li></ul><p>加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.unitils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unitils-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>反射断言比较对象的属性值相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.util.ReflectionTestUtils;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.Test;</span><br><span class="line"><span class="keyword">import</span> org.unitils.reflectionassert.ReflectionAssert;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testunitils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testObjectEquals</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">"123"</span>,<span class="string">"456"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">"123"</span>,<span class="string">"456"</span>);</span><br><span class="line">        <span class="comment">//只是单纯的比较值相等</span></span><br><span class="line">        ReflectionAssert.assertReflectionEquals(user1,user2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="集成Spring"><a href="#集成Spring" class="headerlink" title="集成Spring"></a>集成Spring</h4><p>引入相关的依赖,使用TestNG来进行测试<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.unitils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unitils-testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>复制配置文件，在unitils.core.xx.jar里面有一个unitils-default.properties，拷贝出来放到src/main/resources或src/test/resources下，注意其中配置有<br><strong>unitils.module.database.enabled=true</strong>默认是开启数据库连接的，所以只是测试Spring还没有连接数据库的时候可以先设置成false.</p><p>测试代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">## <span class="type">Spring</span>配置文件</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"me.chilam.UserServiceImpl"</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line">## 测试代码</span><br><span class="line"><span class="keyword">package</span> me.chilam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="type">ApplicationContext</span>;</span><br><span class="line"><span class="keyword">import</span> org.testng.<span class="type">Assert</span>;</span><br><span class="line"><span class="keyword">import</span> org.testng.annotations.<span class="type">Test</span>;</span><br><span class="line"><span class="keyword">import</span> org.unitils.<span class="type">UnitilsTestNG</span>;</span><br><span class="line"><span class="keyword">import</span> org.unitils.spring.annotation.<span class="type">SpringApplicationContext</span>;</span><br><span class="line"><span class="keyword">import</span> org.unitils.spring.annotation.<span class="type">SpringBean</span>;</span><br><span class="line"><span class="comment">//继承UnitilsTestNG</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> <span class="keyword">extends</span> <span class="title">UnitilsTestNG</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加载Spring配置文件</span></span><br><span class="line">    <span class="meta">@SpringApplicationContext</span>(&#123;<span class="string">"spring.xml"</span>&#125;)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ApplicationContext</span> applicationContext;</span><br><span class="line">    <span class="comment">//注入要测试的bean</span></span><br><span class="line">    <span class="meta">@SpringBean</span>(<span class="string">"userService"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="type">IUserService</span> userService;</span><br><span class="line">    <span class="comment">//测试方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    public void testGetUsernameById()&#123;</span><br><span class="line">        <span class="type">Assert</span>.assertNotNull(applicationContext);</span><br><span class="line">        <span class="type">Assert</span>.assertEquals(<span class="string">"张三"</span>,userService.getUsernameById(<span class="string">"123"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5.读书笔记《深入分布式缓存》-GuavaCache</title>
      <link href="/2017/08/06/cache-5-guavacache/"/>
      <url>/2017/08/06/cache-5-guavacache/</url>
      <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>愿意消耗一些本地内存空间来提升速度</li><li>更新锁定</li></ul><h2 id="Guava-Cache的创建方式"><a href="#Guava-Cache的创建方式" class="headerlink" title="Guava Cache的创建方式"></a>Guava Cache的创建方式</h2><h3 id="CacheLoader"><a href="#CacheLoader" class="headerlink" title="CacheLoader"></a>CacheLoader</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.cache.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> class App </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main( <span class="keyword">String</span>[] args )<span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//LoadingCache在缓存项不存在的时候可以自动加载缓存</span></span><br><span class="line">        LoadingCache&lt;Integer,<span class="keyword">String</span>&gt; strCache = CacheBuilder.newBuilder()</span><br><span class="line">                .concurrencyLevel(<span class="number">8</span>)<span class="comment">//可以同时写缓存的线程数</span></span><br><span class="line">                .expireAfterWrite(<span class="number">8</span>,TimeUnit.SECONDS)<span class="comment">//设置写缓存8s后过期</span></span><br><span class="line">                .initialCapacity(<span class="number">10</span>)<span class="comment">//设置缓存容量的初始化容器</span></span><br><span class="line">                .maximumSize(<span class="number">100</span>)<span class="comment">//设置最大容量</span></span><br><span class="line">                .recordStats()<span class="comment">//设置统计缓存命中率</span></span><br><span class="line">                .removalListener(<span class="keyword">new</span> RemovalListener&lt;<span class="keyword">Object</span>, <span class="keyword">Object</span>&gt;() &#123;<span class="comment">//设置缓存移除通知</span></span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> onRemoval(RemovalNotification&lt;<span class="keyword">Object</span>, <span class="keyword">Object</span>&gt; removalNotification) &#123;</span><br><span class="line">                        System.err.<span class="built_in">println</span>(removalNotification.getKey()+<span class="string">"xxx"</span>+removalNotification.getCause());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .build(<span class="keyword">new</span> CacheLoader&lt;Integer, <span class="keyword">String</span>&gt;() &#123;<span class="comment">//缓存不存在的时候通过CacheLoader实现自动缓存加载</span></span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">String</span> load(Integer integer) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        System.err.<span class="built_in">println</span>(<span class="string">"load data: "</span>+ integer);</span><br><span class="line">                        <span class="keyword">String</span> s = integer+<span class="string">":key -value"</span>;</span><br><span class="line">                        <span class="keyword">return</span> s;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">String</span> s = strCache.<span class="built_in">get</span>(i);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"s = "</span> + s);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> s1 = strCache.stats().toString();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"s1 = "</span> + s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallAbleTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args)throws Exception &#123;</span><br><span class="line">        Cache&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; cache = CacheBuilder.<span class="keyword">new</span><span class="type">Builder</span>().maximumSize(<span class="number">1000</span>).build();</span><br><span class="line">        <span class="keyword">String</span> test = cache.<span class="keyword">get</span>(<span class="string">"test"</span>, <span class="keyword">new</span> <span class="type">Callable</span>&lt;<span class="keyword">String</span>&gt;() &#123;</span><br><span class="line">            <span class="comment">//未根据Key查询的到时候，设置缓存</span></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">String</span> call() throws Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"test-value"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"test = "</span> + test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存数据的删除"><a href="#缓存数据的删除" class="headerlink" title="缓存数据的删除"></a>缓存数据的删除</h2><h3 id="主动删除"><a href="#主动删除" class="headerlink" title="主动删除"></a>主动删除</h3><ul><li>单独删除</li><li>批量删除</li><li>删除所有的数据</li></ul><h3 id="被动删除"><a href="#被动删除" class="headerlink" title="被动删除"></a>被动删除</h3><ul><li>基于数据的大小的删除</li><li>基于过期时间的删除</li><li>基于引用的删除</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.读书笔记《深入分布式缓存》-动手写缓存</title>
      <link href="/2017/08/04/cache-3-cacheimpl/"/>
      <url>/2017/08/04/cache-3-cacheimpl/</url>
      <content type="html"><![CDATA[<h2 id="JSR107"><a href="#JSR107" class="headerlink" title="JSR107"></a>JSR107</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cache-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul><li>CachingProvider:定义了创建，配置，获取，管理和控制多个CacheManager。一个应用可以在运行期间访问多个CacheProvider。</li><li>CacheManager:定义了创建，配置，获取，管理和控制多个唯一命名的Cache,一个CacheManager仅仅被一个CacheProvider拥有。</li><li>Cache是一个类似Map的数据结构并临时存储以Key为索引的值。一个Cache仅仅被一个CacheManager拥有。</li><li>Entry：是一个存储在Cache中key-value对</li><li>Expiry每一个存储在Cache中的条目有一个定义的有效期。一旦超过这个时间，条目为过期的状态。一旦过期，条目将不可访问、更新和删除。缓存有效期可以通过ExpiryPolicy设置。</li></ul><h3 id="Store-by-value和Strore-by-refenerce缓存实现"><a href="#Store-by-value和Strore-by-refenerce缓存实现" class="headerlink" title="Store-by-value和Strore-by-refenerce缓存实现"></a>Store-by-value和Strore-by-refenerce缓存实现</h3><ul><li>Store-by-value，指在key-value存入缓存的时候，将其值拷贝一份存入缓存。</li><li>Store-by-reference,指在key-value存入缓存的时候，直接将其引用存入缓存。</li></ul><h3 id="缓存过期策略"><a href="#缓存过期策略" class="headerlink" title="缓存过期策略"></a>缓存过期策略</h3><ul><li>默认是永久有效</li><li>数据创建后的到期持续时间</li><li>数据访问后的到期持续时间</li><li>当数据修改后的到期持续时间</li></ul><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>一致性是指确保当并发缓存修改发生时，多线程访问缓存对该修改的可见性。</p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.读书笔记《深入分布式缓存》-分布式系统理论</title>
      <link href="/2017/08/03/cache-2-distribute/"/>
      <url>/2017/08/03/cache-2-distribute/</url>
      <content type="html"><![CDATA[<h2 id="分布式系统概论"><a href="#分布式系统概论" class="headerlink" title="分布式系统概论"></a>分布式系统概论</h2><ul><li>分布式程序设计语言：基本结构</li><li>理论基础，全局状态和事件排序；逻辑时钟和物理时钟；</li><li>分布式操作系统：互斥和选举；死锁的检测和解决办法；自稳定；任务调用和负载均衡；</li><li>分布式通信：一对一通信；组通信；</li><li>可靠性：一致性；错误恢复；可靠性通信；</li><li>分布式数据管理：复制数据一致性；分布式并发控制；</li><li>应用：分布式操作系统；分布式文件系统；分布式数据库系统；分布式共享存储器；异性处理；</li></ul><h2 id="分布式系统概念"><a href="#分布式系统概念" class="headerlink" title="分布式系统概念"></a>分布式系统概念</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><ul><li>进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动，进程是系统进行资源分配合调度的一个独立单位。</li><li>线程是进程的一个实体，是CPU调度和分派的基本单位。</li></ul><h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h3><ul><li>并发指的2个或多个事件在同一时间间隔发生</li><li>并行指的2个或多个事件在同一时间发生</li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>锁作为保护临界区的一种机制，减少锁或规避锁竞争的集中策略：</p><ul><li>分拆锁，一个锁守护一个共享变量</li><li>分离锁</li><li>避免共享变量缓存</li><li>使用并发容器</li><li>使用Immutable数据和ThreadLocal中的变量</li></ul><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>集群是一组相互独立的，通过高速网络互连的计算机，他们构成一个组，并以单一的系统的模式加以管理。</p><h3 id="状态特性"><a href="#状态特性" class="headerlink" title="状态特性"></a>状态特性</h3><p>在大部分的应用中都提倡服务无状态，分布式环境中的任何节点也是无状态的，无状态是指不保存存储状态，则可以随意的重启和替代，便于扩展。</p><h3 id="系统重发和幂等性"><a href="#系统重发和幂等性" class="headerlink" title="系统重发和幂等性"></a>系统重发和幂等性</h3><ul><li>幂等性就是调用一次和调用N次要返回一样的结果。</li></ul><h3 id="硬件异常"><a href="#硬件异常" class="headerlink" title="硬件异常"></a>硬件异常</h3><ul><li>服务器宕机</li><li>网络异常，消息丢失，网络包数据错误</li><li>磁盘故障是高概率事件</li><li>机房级别异常，异地机房和同城备灾</li></ul><h2 id="分布式系统理论"><a href="#分布式系统理论" class="headerlink" title="分布式系统理论"></a>分布式系统理论</h2><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><ul><li>一致性C：在分布式系统中华所有的数据备份，在同一时刻是否有同一样的值。</li><li>可用性A:在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。</li><li>分区容忍性P:相当于对通信的实现要求，系统如果不能再一定时限内达成数据的一致性</li></ul><h3 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h3><p><a href="https://www.cnblogs.com/linbingdong/p/6253479.html" target="_blank" rel="noopener">写的很好的文章</a></p><p>基于消息传递的一致性算法，解决分布式系统中，多个节点之间就某个值（提案）达成一致的通信协议。</p><p>Paxos是一个2阶段协议，分为prepare阶段和accept阶段，其中有参与者角色，Proposer是提案天的服务器，而Acceptor是批准提案的服务器，二者在物理上可以是同一台物理机器。</p><h4 id="Prepare阶段"><a href="#Prepare阶段" class="headerlink" title="Prepare阶段"></a>Prepare阶段</h4><ul><li>Prepare阶段1：Proposer发送prepare</li></ul><p>Proposer生成全局唯一且递增的提案ID(时间戳+IP+序列号)向Paxos集群的所有机器发送请求，这里无需携带提案内容。提案ID记作为Pn</p><ul><li>Prepare阶段2：Acceptor应答Prepare<ul><li>Acceptor收到提案请求后，做出以下约定<ul><li>不再应答&lt;=Pn的Prepare请求</li><li>对于&lt;Pn的Accept请求也不处理</li></ul></li><li>Acceptor做的处理<ul><li>应答前要在本地持久化当前提案ID</li><li>如果现在请求的Pn大于此前存放的Pn,则覆盖以前Pn。</li></ul></li></ul></li></ul><h4 id="Accept阶段"><a href="#Accept阶段" class="headerlink" title="Accept阶段"></a>Accept阶段</h4><ul><li>Proposer发送Accept</li></ul><p>Proposer收集到多数派的应答（n/2+1,n是集群节点数）Prepare阶段的返回值，从中选择Pn最大的内容提案，作为要发起的Accept的提案</p><ul><li>Acceptor应答Accept</li></ul><p>Acceptor应答Accept的请求后，检查不违背自己之前作出的约定，持久化当前的Proposal ID和提案内容。最后Proposer收集到多数派的应答的Accept回复后，形成决议。</p><h3 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h3><p>在事务处理，关系型数据库及计算机网络中，2阶段移交协议是一种典型的原子提交协议。</p><h4 id="提交请求阶段或者叫投票阶段"><a href="#提交请求阶段或者叫投票阶段" class="headerlink" title="提交请求阶段或者叫投票阶段"></a>提交请求阶段或者叫投票阶段</h4><ul><li>该阶段的任务是确定相关参与者对于事务处理是否准备就绪，YES代表可以commit，NO则反之。</li></ul><h4 id="提交阶段"><a href="#提交阶段" class="headerlink" title="提交阶段"></a>提交阶段</h4><p>基于投票结果，由协调器决定提交事务或退出事务处理，各事务参与者遵循指标指示。</p><h3 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h3><ul><li>投票，事务协调器询问参与者是否能提交</li><li>预提交</li><li>真实的提交</li></ul><h2 id="分布式系统设计策略"><a href="#分布式系统设计策略" class="headerlink" title="分布式系统设计策略"></a>分布式系统设计策略</h2><ul><li>如何检测你还活着？</li><li>如何保障高可用</li><li>容错处理</li><li>重试机制</li><li>负载均衡</li></ul><h3 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a>心跳检测</h3><ul><li>周期检测心跳机制</li><li>累计失效检测机制</li></ul><h3 id="高可用设计"><a href="#高可用设计" class="headerlink" title="高可用设计"></a>高可用设计</h3><h4 id="主备"><a href="#主备" class="headerlink" title="主备"></a>主备</h4><p>当主机宕机的时候，备机接管主机一切工作。</p><h3 id="互备"><a href="#互备" class="headerlink" title="互备"></a>互备</h3><p>2台机器同时运行各自的服务工作且相互监测情况</p><h3 id="集群-1"><a href="#集群-1" class="headerlink" title="集群"></a>集群</h3><p>多个节点在运行，同时可以通过主控节点分担服务请求</p><h3 id="容错性"><a href="#容错性" class="headerlink" title="容错性"></a>容错性</h3><p>容故障能力。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>关键在于使用多台集群服务器共同分担计算任务，把网络请求及计算分配到集群可用的服务器上去，从而达到可以用性及较好的用户体验操作。</p><p>以nginx为例负载均衡的策略：</p><ul><li>轮询</li><li>最少连接</li><li>IP地址哈希</li><li>基于权重</li></ul><h2 id="分布式系统设计实践"><a href="#分布式系统设计实践" class="headerlink" title="分布式系统设计实践"></a>分布式系统设计实践</h2><h3 id="全局ID的生成"><a href="#全局ID的生成" class="headerlink" title="全局ID的生成"></a>全局ID的生成</h3><ul><li>UUID</li><li>ID生成表模式</li><li>Snowflake,64位，时间序列（41）+机器标志（10）+计数顺序号（12）</li><li>结合缓存方案，将生成的ID放到本地缓存</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.读书笔记《深入分布式缓存》-缓存为王</title>
      <link href="/2017/08/02/cache-1-introduce/"/>
      <url>/2017/08/02/cache-1-introduce/</url>
      <content type="html"><![CDATA[<h2 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h2><p>缓存：存储在计算机上的一个原始数据复制集，以便于访问。</p><ul><li>CPU缓存，L1,L2,L3是指位于CPU与内存之间的临时存储器，解决CPU运算速度要比内存读写速度不匹配的矛盾。</li></ul><h2 id="为什么使用缓存"><a href="#为什么使用缓存" class="headerlink" title="为什么使用缓存"></a>为什么使用缓存</h2><h3 id="从用户体验说起"><a href="#从用户体验说起" class="headerlink" title="从用户体验说起"></a>从用户体验说起</h3><h4 id="用户体验的定义"><a href="#用户体验的定义" class="headerlink" title="用户体验的定义"></a>用户体验的定义</h4><p>人们对正在使用或期望使用的产品，系统或者服务的认知印象和回应。</p><h3 id="关于系统的性能"><a href="#关于系统的性能" class="headerlink" title="关于系统的性能"></a>关于系统的性能</h3><p>系统新能的指标一般包括，响应时间，延迟时间，吞吐量，并发用户数和资源利用率等几个方面。</p><ul><li>响应时间是指系统对用户请求做出的响应的时间，所有功能的平均响应时间或最大的响应时间。</li><li>吞吐量指系统在单位时间内处理请求的数量。</li></ul><h3 id="从网站的架构发展看缓存"><a href="#从网站的架构发展看缓存" class="headerlink" title="从网站的架构发展看缓存"></a>从网站的架构发展看缓存</h3><ul><li>数据缓存，将系统中重复获取的数据信息从数据库加载到本地，同时降低了数据库的负载</li><li>缓存同步机制以及共享文件系统或共享存储</li><li>数据库调优，优化数据库自身缓存，采用数据库集群以及分库分表策略</li><li>数据量太大，导致现在不太可能将缓存存储在本地后再同步了，于是分布式缓存来了。</li></ul><h3 id="客户端缓存"><a href="#客户端缓存" class="headerlink" title="客户端缓存"></a>客户端缓存</h3><h4 id="页面缓存"><a href="#页面缓存" class="headerlink" title="页面缓存"></a>页面缓存</h4><ul><li>页面自身对某些元素或全部元素进行缓存</li><li>服务端将静态页面或动态页面的元素进行缓存</li><li>HTML5支持离线缓存和本地存储</li></ul><h4 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h4><p>根据一套与服务器的约定的规则进行工作的，工作的规则很简单：检查以确保副本是最新的，通常只要一次会话。浏览器会在硬盘上开辟一个空间来存储资源副本做为缓存。</p><h3 id="网络中的缓存"><a href="#网络中的缓存" class="headerlink" title="网络中的缓存"></a>网络中的缓存</h3><p>位于客户端和服务端之间，代理或响应客户端的网络请求，从而对重复的请求返回缓存中的数据资源。</p><h4 id="web代理缓存"><a href="#web代理缓存" class="headerlink" title="web代理缓存"></a>web代理缓存</h4><p>将web代理作为一种缓存技术，常用的有正向代理，反向代理和透明代理。</p><h3 id="服务端缓存"><a href="#服务端缓存" class="headerlink" title="服务端缓存"></a>服务端缓存</h3><h4 id="数据库缓存"><a href="#数据库缓存" class="headerlink" title="数据库缓存"></a>数据库缓存</h4><ul><li>MYSQL查询缓存</li></ul><p>QueryCache作用于整个MySQL实例，主要用缓存MySQL中的ResultSet<br>主要query_cache_size(设置缓存的内存大小)和query_cahe_type()</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like 'Qcache%';</span><br><span class="line">+-------------------------+---------+</span><br><span class="line">|<span class="string"> Variable_name           </span>|<span class="string"> Value   </span>|</span><br><span class="line">+-------------------------+---------+</span><br><span class="line">|<span class="string"> Qcache_free_blocks      </span>|<span class="string"> 1       </span>|<span class="string">  碎片 </span></span><br><span class="line">|<span class="string"> Qcache_free_memory      </span>|<span class="string"> 1031872 </span>|<span class="string">  空余内存</span></span><br><span class="line">|<span class="string"> Qcache_hits             </span>|<span class="string"> 0       </span>|<span class="string">  命中次数</span></span><br><span class="line">|<span class="string"> Qcache_inserts          </span>|<span class="string"> 0       </span>|<span class="string">  多次未命中查询次数</span></span><br><span class="line">|<span class="string"> Qcache_lowmem_prunes    </span>|<span class="string"> 0       </span>|<span class="string">  因为内存不足被清除的QueryCache</span></span><br><span class="line">|<span class="string"> Qcache_not_cached       </span>|<span class="string"> 410     </span>|<span class="string">  </span></span><br><span class="line">|<span class="string"> Qcache_queries_in_cache </span>|<span class="string"> 0       </span>|</span><br><span class="line">|<span class="string"> Qcache_total_blocks     </span>|<span class="string"> 1       </span>|</span><br><span class="line">+-------------------------+---------+</span><br><span class="line">8 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure><ul><li>InnoDB的缓存性能</li></ul><p>当使用InnoDB存储引擎的时候，innodb_buffer_pool_size参数可能是影响性能最为关键的一个参数，用来设置用于缓存InnoDB索引和数据块的内存区域大小。</p><p>table_cache用来限制缓存表的最大数目。</p><h3 id="平台级缓存"><a href="#平台级缓存" class="headerlink" title="平台级缓存"></a>平台级缓存</h3><p>缓存框架，ehcache等框架</p><h3 id="应用级缓存"><a href="#应用级缓存" class="headerlink" title="应用级缓存"></a>应用级缓存</h3><p>应用级缓存需要开发者通过代码来实现缓存机制，</p><h4 id="缓存算法"><a href="#缓存算法" class="headerlink" title="缓存算法"></a>缓存算法</h4><ul><li>LRU，替换到最近被请求最少的对象</li><li>LFU,替换掉访问次数最少的对象</li><li>SIZE，替换占用空间最大的</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4.读书笔记《深入分布式缓存》-ehcache</title>
      <link href="/2017/08/02/cache-4-ehcache/"/>
      <url>/2017/08/02/cache-4-ehcache/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ehcache.org/about/" target="_blank" rel="noopener">http://www.ehcache.org/about/</a></p><h2 id="Ehcache的主要特点"><a href="#Ehcache的主要特点" class="headerlink" title="Ehcache的主要特点"></a>Ehcache的主要特点</h2><ul><li>快速轻量，过去几年，众多的测试表明ehcache是最快的java缓存之一，ehcache的线程机制是为大型高并发系统设计的，大量性能测试用例保证ehcache在不同版本间性能表现的一致性，很多用户都不知道他们正在用ehcache，因此不需要什么特别的配置，api易于使用，这就很容易部署上线和运行。</li><li>伸缩性，缓存在内存和硬盘存储可以伸缩到数G，ehcache为大数据存储做过优化，大内存的情况下，所有进程可以支持数百G的吞吐，为高并发和大型多CPU服务器做优化，线程安全和性能总是一些矛盾，ehcache的线程机制设计采用了Doug lea的想法来获得较高的性能，单台虚拟机上支持多缓存管理器通过Terracotta服务器矩阵，可以伸缩到数百个节点。</li><li>灵活性，ehcache具备对象api接口和可序列化api接口，不能序列化的对象可以使用出磁盘存储外ehcache的所有功能。</li><li>标准型，支持JSR107</li><li>可扩展性, 监听器可以插件化.ehcache1.2提供了cacheManageEventListener和cacheEventListener接口，实现了可插件化。并且可以在ehcache。xml配置节点发现，冗余器和监听器都可以插件化。</li><li>应用持久化，在vm重启后，持久化到磁盘的存储可以复原数据，Ehcache是第一个引入缓存数据持久化存储的开源java缓存框架，缓存的数据可以在机器重启后从磁盘上重新获得，根据需要将缓存刷到磁盘。将缓存条目刷到磁盘的操作可以通过cache.fiush方法执行,这大大方便了ehcache的使用。</li><li>监听器，缓存管理器监听器。允许注册实现了CacheManagerEventListener接口的监听器：<br>notifyCacheAdded()，notifyCacheRemoved()，缓存事件监听器。允许注册实现了CacheEventListener接口的监听器，它提供了许多对缓存事件发生后的处理机制：notifyElementRemoved/Put/Updated/Expired 。</li><li>开启JMX，Ehcache的JMX功能是默认开启的，你可以监控和管理如下的MBean：CacheManager、Cache、CacheConfiguration、CacheStatistics </li><li>分布式缓存，通过Terracotta的缓存集群：设定和使用Terracotta模式的Ehcache缓存。缓存发现是自动完成的，并且有很多选项可以用来调试缓存行为和性能。使用RMI、JGroups或者JMS来冗余缓存数据</li></ul><h2 id="Ehcache主要模块"><a href="#Ehcache主要模块" class="headerlink" title="Ehcache主要模块"></a>Ehcache主要模块</h2><ul><li>ehcache-core：API，标准缓存引擎，RMI复制和Hibernate支持</li><li>ehcache：分布式Ehcache，包括Ehcache的核心和Terracotta的库</li><li>ehcache-monitor：企业级监控和管理</li><li>ehcache-web：为Java Servlet Container提供缓存、gzip压缩支持的filters</li><li>ehcache-jcache：JSR107 JCACHE的实现</li><li>ehcache-jgroupsreplication：使用JGroup的复制</li><li>ehcache-jmsreplication：使用JMS的复制</li><li>ehcache-openjpa：OpenJPA插件</li><li>ehcache-server：war内部署或者单独部署的RESTful cache server</li><li>ehcache-unlockedreadsview：允许Terracotta cache的无锁读</li><li>ehcache-debugger：记录RMI分布式调用事件</li><li>Ehcache for Ruby：Jruby and Rails支持</li></ul><h2 id="核心定义"><a href="#核心定义" class="headerlink" title="核心定义"></a>核心定义</h2><ul><li>CacheManager,缓存管理器，以前是只允许单例的，不过现在也可以多实例了</li><li>Cache缓存管理器内可以放置若干cache，存放数据的实质，所有cache都实现了Ehcache接口</li><li>element,单条缓存数据的组成单位</li><li>system of record（SOR）：可以取到真实数据的组件，可以是真正的业务逻辑、外部接口调用、存放真实数据的数据库等等，缓存就是从SOR中读取或者写入到SOR中去的。</li></ul><h2 id="一致性模型"><a href="#一致性模型" class="headerlink" title="一致性模型"></a>一致性模型</h2><h3 id="数据库隔离级别"><a href="#数据库隔离级别" class="headerlink" title="数据库隔离级别"></a>数据库隔离级别</h3><ul><li>未提交读（Read Uncommitted）：在读数据时不会检查或使用任何锁。因此，在这种隔离级别中可能读取到没有提交的数据。会出现脏读、不可重复读、幻象读。</li><li>已提交读（Read Committed）：只读取提交的数据并等待其他事务释放排他锁。读数据的共享锁在读操作完成后立即释放。已提交读是数据库的默认隔离级别。会出现不可重复读、幻象读。</li><li>可重复读（Repeatable Read）：像已提交读级别那样读数据，但会保持共享锁直到事务结束。会出现幻象读。</li><li>可序列化（Serializable）：工作方式类似于可重复读。但它不仅会锁定受影响的数据，还会锁定这个范围，这就阻止了新数据插入查询所涉及的范围。</li></ul><h3 id="再来对比思考下面的一致性模型："><a href="#再来对比思考下面的一致性模型：" class="headerlink" title="再来对比思考下面的一致性模型："></a>再来对比思考下面的一致性模型：</h3><ul><li>强一致性模型：系统中的某个数据被成功更新(事务成功返回)后，后续任何对该数据的读取操作都得到更新后的值。这是传统关系数据库提供的一致性模型，也是关系数据库深受人们喜爱的原因之一。强一致性模型下的性能消耗通常是最大的。</li><li>弱一致性模型：系统中的某个数据被更新后，后续对该数据的读取操作得到的不一定是更新后的值，这种情况下通常有个“不一致性时间窗口”存在：即数据更新完成后在经过这个时间窗口，后续读取操作就能够得到更新后的值。</li><li>最终一致性模型：属于弱一致性的一种，即某个数据被更新后，如果该数据后续没有被再次更新，那么最终所有的读取操作都会返回更新后的值。</li></ul><p>原子方法（Atomic methods），</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cache.putIfAbsent(<span class="keyword">Element</span> <span class="keyword">element</span>);  </span><br><span class="line">cache.replace(<span class="keyword">Element</span> oldOne, <span class="keyword">Element</span> newOne);  </span><br><span class="line">cache.remove(<span class="keyword">Element</span>);</span><br></pre></td></tr></table></figure><h2 id="缓存拓扑类型"><a href="#缓存拓扑类型" class="headerlink" title="缓存拓扑类型"></a>缓存拓扑类型</h2><ul><li>独立缓存（Standalone Ehcache）：这样的缓存应用节点都是独立的，互相不通信。</li><li>分布式缓存（Distributed Ehcache）：数据存储在Terracotta的服务器阵列（Terracotta Server Array，TSA）中，但是最近使用的数据，可以存储在各个应用节点中。</li><li>复制式缓存（Replicated Ehcache）：缓存数据时同时存放在多个应用节点的，数据复制和失效的事件以同步或者异步的形式在各个集群节点间传播。上述事件到来时，会阻塞写线程的操作。在这种模式下，只有弱一致性模型。</li></ul><h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><ul><li>堆内存储：速度快，但是容量有限。</li><li>堆外（OffHeapStore）存储：被称为BigMemory，只在企业版本的Ehcache中提供，原理是利用nio的DirectByteBuffers实现，比存储到磁盘上快，而且完全不受GC的影响，可以保证响应时间的稳定性；但是direct buffer的在分配上的开销要比heap buffer大，而且要求必须以字节数组方式存储，因此对象必须在存储过程中进行序列化，读取则进行反序列化操作，它的速度大约比堆内存储慢一个数量级。</li><li>磁盘存储。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>比较少的更新数据表的情况</li><li>对并发要求不是很严格的，多台服务器中的缓存不能进行实时同步的</li><li>对一致性要求不高的情况下</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.linux-centos7</title>
      <link href="/2017/07/10/linux-1/"/>
      <url>/2017/07/10/linux-1/</url>
      <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>笔记本win10</li><li>VMware Workstation 64位_14.1.2.33210.exe(360软件管理里面下载的)</li><li><a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1804.iso" target="_blank" rel="noopener">CentOS-7-x86_64-Minimal-1804.iso</a></li></ul><h2 id="软件安装（略）"><a href="#软件安装（略）" class="headerlink" title="软件安装（略）"></a>软件安装（略）</h2><ul><li><p><a href="https://blog.csdn.net/hui_2016/article/details/68927487" target="_blank" rel="noopener">参考地址，写的很详细</a></p></li><li><p>注意需要开启BIOS的虚拟技术，我电脑是T430，启动的时候按F1进入BIOS设置后</p></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/61603149.jpg" alt=""></p><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/52426729.jpg" alt=""></p><h2 id="虚拟机联网模式化"><a href="#虚拟机联网模式化" class="headerlink" title="虚拟机联网模式化"></a>虚拟机联网模式化</h2><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><ul><li><p>桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。</p></li><li><p>在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。</p></li><li><p>桥接模式配置简单，但如果你的网络环境是ip资源很缺少或对ip管理比较严格(公司一般都是固定IP)的话，那桥接模式就不太适用了。</p></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/9853526.jpg" alt=""></p><h3 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h3><ul><li><p>主机网卡直接与虚拟NAT设备相连，然后虚拟NAT设备与虚拟DHCP服务器一起连接在虚拟交换机VMnet8上，这样就实现了虚拟机联网。</p></li><li><p>VMware Network Adapter VMnet8虚拟网卡主要是为了实现主机与虚拟机之间的通信。</p></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/87104523.jpg" alt=""></p><h3 id="Host模式"><a href="#Host模式" class="headerlink" title="Host模式"></a>Host模式</h3><ul><li><p>Host-Only模式其实就是NAT模式去除了虚拟NAT设备，然后使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的</p></li><li><p>Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。</p></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/28725056.jpg" alt=""></p><h3 id="如何设置虚拟机"><a href="#如何设置虚拟机" class="headerlink" title="如何设置虚拟机"></a>如何设置虚拟机</h3><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/27786180.jpg" alt=""></p><h2 id="ifconfig命令找不到的问题"><a href="#ifconfig命令找不到的问题" class="headerlink" title="ifconfig命令找不到的问题"></a>ifconfig命令找不到的问题</h2><p>用vmware安装了一个centos7的mini版本，安装完成后，用root用户登了进去，于是乎不想再虚拟机上直接操作centos，想用xShell来操作，<br>于是要看哈ip，使用ifconfig命令结果没有找到，就是下面的错误</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@192</span> ~]<span class="meta"># ifconfig</span></span><br><span class="line">-bash: ifconfig: command <span class="literal">not</span> found</span><br></pre></td></tr></table></figure><p>一脸懵逼的啊，后来各种百度后才发现，命令变了，变成下面这个了<strong>ip address show</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192</span> ~]<span class="comment"># ip address show</span></span><br><span class="line"><span class="number">1</span>: lo: <span class="variable">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> mtu <span class="number">65536</span> qdisc noqueue <span class="keyword">state</span> UNKNOWN qlen <span class="number">1</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    <span class="keyword">inet</span> <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    <span class="keyword">inet6</span> ::<span class="number">1</span>/<span class="number">128</span> scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: ens33: <span class="variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="number">1500</span> qdisc pfifo_fast <span class="keyword">state</span> UP qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">1</span>c:<span class="number">5</span>c:<span class="number">8</span>c brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    <span class="keyword">inet</span> <span class="number">192.168</span>.<span class="number">192.128</span>/<span class="number">24</span> brd <span class="number">192.168</span>.<span class="number">192.255</span> scope <span class="keyword">global</span> dynamic ens33</span><br><span class="line">       valid_lft <span class="number">1098</span>sec preferred_lft <span class="number">1098</span>sec</span><br><span class="line">    <span class="keyword">inet6</span> fe80::f7e:<span class="number">6001</span>:ad6d:ad8a/<span class="number">64</span> scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>上面可以看出一共2个网卡，lo这个是配置的循环地址，那ens33就是我的网卡。</p><p>其中上面这几句是没有的<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inet <span class="number">192.168</span><span class="number">.192</span><span class="number">.128</span>/<span class="number">24</span> brd <span class="number">192.168</span><span class="number">.192</span><span class="number">.255</span> scope <span class="built_in">global</span> dynamic ens33</span><br><span class="line">       valid_lft <span class="number">1098</span><span class="built_in">sec</span> preferred_lft <span class="number">1098</span><span class="built_in">sec</span></span><br><span class="line">    inet6 fe80::f7e:<span class="number">6001</span>:ad6d:ad8a/<span class="number">64</span> scope link </span><br><span class="line">       valid_lft <span class="keyword">forever</span> preferred_lft <span class="keyword">forever</span></span><br></pre></td></tr></table></figure></p><p>是我改动了网卡的配置文件才出现的，配置文件在什么地方了</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@192</span> ~]<span class="meta"># </span></span><br><span class="line">[root<span class="symbol">@192</span> ~]<span class="meta"># ls /etc/sysconfig/network-scripts/</span></span><br><span class="line">ifcfg-ens33  ifdown-bnep  ifdown-ippp  ifdown-post    ifdown-sit       ifdown-tunnel  ifup-bnep  ifup-ippp  ifup-plip   ifup-ppp     ifup-Team      ifup-wireless      network-functions-ipv6</span><br><span class="line">ifcfg-lo     ifdown-eth   ifdown-ipv6  ifdown-ppp     ifdown-Team      ifup           ifup-eth   ifup-ipv6  ifup-plusb  ifup-routes  ifup-TeamPort  init.ipv6-<span class="keyword">global</span></span><br><span class="line">ifdown       ifdown-ib    ifdown-isdn  ifdown-routes  ifdown-TeamPort  ifup-aliases   ifup-ib    ifup-isdn  ifup-post   ifup-sit     ifup-tunnel    network-functions</span><br></pre></td></tr></table></figure><p>其中ifcfg-ens33就是我的网卡的配置文件，用编辑器打开看一哈</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[root@192 ~]</span><span class="comment"># vi /etc/sysconfig/network-scripts/ifcfg-ens33 </span></span><br><span class="line"></span><br><span class="line"><span class="attr">TYPE</span>=Ethernet</span><br><span class="line"><span class="attr">BOOTPROTO</span>=dhcp</span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">PEERDNS</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">PEERROUTES</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV6_PEERDNS</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV6_PEERROUTES</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="literal">no</span></span><br><span class="line"><span class="attr">IPV6_ADDR_GEN_MODE</span>=stable-privacy</span><br><span class="line"><span class="attr">NAME</span>=ens33</span><br><span class="line"><span class="attr">UUID</span>=b9deebc6-cce5-<span class="number">413</span>d-b3fb-<span class="number">447</span>bc682f85e</span><br><span class="line"><span class="attr">DEVICE</span>=ens33</span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="literal">no</span></span><br></pre></td></tr></table></figure><ul><li>其中ONBOOT是no,这就尴尬了，onboot的意思就是系统启动的时候是否激活网卡，原来如此，网卡都没有激活，怎么会有网</li><li>于是改ONBOOT=yes</li><li>然后重启系统,再输入<strong>ip address show</strong>就可以看到ipv4和ipv6的地址了，如上所示，此时也就可以ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li></ul><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙的状态（root用户下操作）</span></span><br><span class="line">[root@localhost bin]<span class="comment"># firewall-cmd --state</span></span><br><span class="line">running</span><br><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">[root@localhost bin]<span class="comment"># systemctl stop firewalld.service</span></span><br><span class="line">[root@localhost bin]<span class="comment"># firewall-cmd --state</span></span><br><span class="line"><span class="keyword">not</span> running</span><br><span class="line"><span class="comment"># 禁止开机启动防火墙</span></span><br><span class="line">[root@localhost bin]<span class="comment"># systemctl disable firewalld.service</span></span><br><span class="line">Removed <span class="keyword">symlink</span> /etc/systemd/<span class="keyword">system</span>/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line">Removed <span class="keyword">symlink</span> /etc/systemd/<span class="keyword">system</span>/basic.target.wants/firewalld.service.</span><br><span class="line">[root@localhost bin]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="Linux安装gcc"><a href="#Linux安装gcc" class="headerlink" title="Linux安装gcc"></a>Linux安装gcc</h2><ul><li><p>yum install -y gcc</p></li><li><p>gcc -v</p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@192 ~]# gcc -v</span><br><span class="line">Using built-in specs.</span><br><span class="line"><span class="attribute">COLLECT_GCC</span>=gcc</span><br><span class="line"><span class="attribute">COLLECT_LTO_WRAPPER</span>=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper</span><br><span class="line">Target: x86_64-redhat-linux</span><br><span class="line">Configured with: <span class="built_in">..</span>/configure <span class="attribute">--prefix</span>=/usr <span class="attribute">--mandir</span>=/usr/share/man <span class="attribute">--infodir</span>=/usr/share/info <span class="attribute">--with-bugurl</span>=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared <span class="attribute">--enable-threads</span>=posix <span class="attribute">--enable-checking</span>=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id <span class="attribute">--with-linker-hash-style</span>=gnu <span class="attribute">--enable-languages</span>=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj <span class="attribute">--with-isl</span>=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install <span class="attribute">--with-cloog</span>=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function <span class="attribute">--with-tune</span>=generic <span class="attribute">--with-arch_32</span>=x86-64 <span class="attribute">--build</span>=x86_64-redhat-linux</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC)</span><br></pre></td></tr></table></figure><ul><li>编写c语言文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"hello c"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译</li></ul><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@192</span> testc]<span class="comment"># gcc hello.c </span></span><br><span class="line">[root<span class="symbol">@192</span> testc]<span class="comment"># ls</span></span><br><span class="line">a.out  hello.c</span><br><span class="line">[root<span class="symbol">@192</span> testc]<span class="comment"># ./a.out</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.linux centos安装pyton3.6</title>
      <link href="/2017/07/06/linux-python/"/>
      <url>/2017/07/06/linux-python/</url>
      <content type="html"><![CDATA[<h2 id="检测linux自带python环境"><a href="#检测linux自带python环境" class="headerlink" title="检测linux自带python环境"></a>检测linux自带python环境</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@iZwz9cfts3rjkrsqm8buxyZ opt]</span># <span class="selector-tag">python</span> <span class="selector-tag">-V</span></span><br><span class="line"><span class="selector-tag">Python</span> 2<span class="selector-class">.7</span><span class="selector-class">.5</span></span><br></pre></td></tr></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@iZwz9cfts3rjkrsqm8buxyZ opt]</span># <span class="selector-tag">wget</span> <span class="selector-tag">-c</span> <span class="selector-tag">https</span>:<span class="comment">//www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz</span></span><br><span class="line"><span class="selector-tag">--2017-07-06</span> <span class="selector-tag">11</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:34--</span>  <span class="selector-tag">https</span>:<span class="comment">//www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz</span></span><br><span class="line">正在解析主机 <span class="selector-tag">www</span><span class="selector-class">.python</span><span class="selector-class">.org</span> (www.python.org)... <span class="selector-tag">151</span><span class="selector-class">.101</span><span class="selector-class">.72</span><span class="selector-class">.223</span>, <span class="selector-tag">2a04</span><span class="selector-pseudo">:4e42</span><span class="selector-pseudo">:11</span><span class="selector-pseudo">::223</span></span><br><span class="line">正在连接 <span class="selector-tag">www</span><span class="selector-class">.python</span><span class="selector-class">.org</span> (www.python.org)|<span class="selector-tag">151</span><span class="selector-class">.101</span><span class="selector-class">.72</span><span class="selector-class">.223</span>|<span class="selector-pseudo">:443...</span> 已连接。</span><br><span class="line">已发出 <span class="selector-tag">HTTP</span> 请求，正在等待回应... <span class="selector-tag">200</span> <span class="selector-tag">OK</span></span><br><span class="line">长度：<span class="selector-tag">16872064</span> (<span class="number">16</span>M) <span class="selector-attr">[application/octet-stream]</span></span><br><span class="line">正在保存至: “<span class="selector-tag">Python-3</span><span class="selector-class">.6</span><span class="selector-class">.1</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span>”</span><br><span class="line"><span class="selector-tag">100%</span><span class="selector-attr">[==================================================================&gt;]</span> <span class="selector-tag">16</span>,<span class="selector-tag">872</span>,<span class="selector-tag">064</span>  <span class="selector-tag">44</span><span class="selector-class">.7KB</span>/<span class="selector-tag">s</span> 用时 <span class="selector-tag">7m</span> <span class="selector-tag">26s</span> </span><br><span class="line"><span class="selector-tag">2017-07-06</span> <span class="selector-tag">11</span><span class="selector-pseudo">:08</span><span class="selector-pseudo">:01</span> (<span class="number">37.0</span> KB/s) <span class="selector-tag">-</span> 已保存 “<span class="selector-tag">Python-3</span><span class="selector-class">.6</span><span class="selector-class">.1</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span>” <span class="selector-attr">[16872064/16872064]</span>)</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">Jxvf</span>  <span class="selector-tag">Python-3</span><span class="selector-class">.6</span><span class="selector-class">.1</span><span class="selector-class">.tar</span><span class="selector-class">.xz</span></span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line">[root<span class="meta">@iZwz</span>9cfts3rjkrsqm8buxyZ opt]<span class="comment"># cd Python-3.6.1</span></span><br><span class="line">./configure --prefix=/<span class="keyword">var</span>/<span class="keyword">local</span>/python3</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 安装出错，缺少zlib包，需要安装</span></span><br><span class="line">yum -y install zlib*</span><br></pre></td></tr></table></figure><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>安装的目录在/var/local/python3/<br>此时已经安装到了/var/local/python3中了，但输入#python –version显示的还是原来的python，原来的python文件在/usr/local/bin中。<br>有两种方法：软连接和直接替换。这里我是直接替换的<br>代码如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ bin]# <span class="keyword">ln</span> -s /var/local/<span class="keyword">python3</span>/bin/<span class="keyword">python3</span> /usr/bin/<span class="keyword">python3</span></span><br><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ bin]# <span class="keyword">python3</span> -V</span><br><span class="line">Python <span class="number">3.6</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python基础语法</title>
      <link href="/2017/07/03/python-basic/"/>
      <url>/2017/07/03/python-basic/</url>
      <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="基本的输出和输入"><a href="#基本的输出和输入" class="headerlink" title="基本的输出和输入"></a>基本的输出和输入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试打印和输出</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestIO</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_print</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 在括号的中加上字符串就可以向屏幕输出指定的文字</span></span><br><span class="line">        print(<span class="string">"Hello Python"</span>)</span><br><span class="line">        <span class="comment"># 可以接受多个字符串，用逗号隔开,输出的打印的时候，遇到逗号会输出一个空格</span></span><br><span class="line">        print(<span class="string">"hello"</span>, <span class="string">"hi"</span>, <span class="string">"how do you do"</span>)</span><br><span class="line">        <span class="comment"># 也可以打印整数和计算结果</span></span><br><span class="line">        print(<span class="number">100</span>)</span><br><span class="line">        print(<span class="number">100</span>+<span class="number">200</span>)</span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_input</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 测试输入,注意此程序无法执行</span></span><br><span class="line">        name = input()</span><br><span class="line">        print(<span class="string">'hi'</span>, name)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="定义变量，常量，除法"><a href="#定义变量，常量，除法" class="headerlink" title="定义变量，常量，除法"></a>定义变量，常量，除法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以#开头的语句是注释</span></span><br><span class="line"><span class="comment"># 区分大小写</span></span><br><span class="line"><span class="comment"># 4个空格的缩进</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBasic</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_variable</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 变量在程序中就是用一个变量名表示，变量名字必须是大小写英文，数字和_组合，且不能用数字开头</span></span><br><span class="line">        a = <span class="number">123</span></span><br><span class="line">        print(a)</span><br><span class="line">        a_007 = <span class="string">'a_007'</span></span><br><span class="line">        print(a_007)</span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_const</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量</span></span><br><span class="line">        PI = <span class="number">3.1415926</span></span><br><span class="line">        print(PI)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_divide</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># /除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数</span></span><br><span class="line">        print(<span class="number">10</span> / <span class="number">3</span>)</span><br><span class="line">        <span class="comment"># //，称为地板除，两个整数的除法仍然是整数</span></span><br><span class="line">        print(<span class="number">10</span> // <span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="字符串unicode，编码-解码，长度"><a href="#字符串unicode，编码-解码，长度" class="headerlink" title="字符串unicode，编码/解码，长度"></a>字符串unicode，编码/解码，长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestString</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_string_unicode</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符</span></span><br><span class="line">        print(ord(<span class="string">'A'</span>))</span><br><span class="line">        print(chr(<span class="number">65</span>))</span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_string_encode</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        print(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_len</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 计算的字符串长度</span></span><br><span class="line">        print(len(<span class="string">'中文'</span>))</span><br><span class="line">        <span class="comment"># 计算的字节数</span></span><br><span class="line">        print(len(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="有序可变list"><a href="#有序可变list" class="headerlink" title="有序可变list"></a>有序可变list</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list是一种有序的集合，可以随时和添加其中的元素</span></span><br><span class="line"><span class="comment"># list里面的元素数据类型也可以不同</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestList</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_list_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 定义一个list</span></span><br><span class="line">        classmates = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">"王五"</span>]</span><br><span class="line">        print(classmates)</span><br><span class="line">        <span class="comment"># 使用索引进行访问,如果获取最后一个元素，索引还可以直接设置为-1,依次类推倒数第二索引为-2...</span></span><br><span class="line">        print(classmates[<span class="number">2</span>])</span><br><span class="line">        print(classmates[<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># 添加元素到末尾</span></span><br><span class="line">        classmates.append(<span class="string">'李达康'</span>)</span><br><span class="line">        print(classmates[<span class="number">-1</span>])</span><br><span class="line">        <span class="comment"># 把元素插入到指定的位置</span></span><br><span class="line">        classmates.insert(<span class="number">1</span>, <span class="string">'成都'</span>)</span><br><span class="line">        print(classmates[<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># 删除list末尾元素</span></span><br><span class="line">        print(<span class="string">'删除末尾元素为:'</span>, classmates.pop())</span><br><span class="line">        print(classmates)</span><br><span class="line">        <span class="comment"># 删除指定位置的元素</span></span><br><span class="line">        print(<span class="string">'删除索引为2的元素为:'</span>, classmates.pop(<span class="number">2</span>))</span><br><span class="line">        <span class="comment"># 获取list的长度</span></span><br><span class="line">        print(<span class="string">'当前classmates的长度：'</span>, classmates.__len__())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="不可变的tuple"><a href="#不可变的tuple" class="headerlink" title="不可变的tuple"></a>不可变的tuple</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple相对于list而言，是不可变的</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestTuple</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_tuple_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 使用小括号定义</span></span><br><span class="line">        classmates = (<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>)</span><br><span class="line">        print(classmates)</span><br><span class="line">        <span class="comment"># 访问元素</span></span><br><span class="line">        print(classmates[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="没有重复元素的set"><a href="#没有重复元素的set" class="headerlink" title="没有重复元素的set"></a>没有重复元素的set</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSet</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_set_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 定义set</span></span><br><span class="line">        s = set([<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">56</span>])</span><br><span class="line">        print(s)</span><br><span class="line">        <span class="comment"># 添加元素,添加重复的会被忽略掉</span></span><br><span class="line">        s.add(<span class="number">1</span>)</span><br><span class="line">        print(s)</span><br><span class="line">        s.add(<span class="number">1</span>)</span><br><span class="line">        print(s)</span><br><span class="line">        <span class="comment"># 移除元素</span></span><br><span class="line">        s.remove(<span class="number">1</span>)</span><br><span class="line">        print(s)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_set_02</span><span class="params">(self)</span>:</span></span><br><span class="line">        s1 = set([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">        s2 = set([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">        <span class="comment"># 交集</span></span><br><span class="line">        s3 = s1 &amp; s2</span><br><span class="line">        print(<span class="string">'s1和s2的交集为:'</span>, s3)</span><br><span class="line">        <span class="comment"># 并集</span></span><br><span class="line">        s4 = s1 | s2</span><br><span class="line">        print(<span class="string">'s1和s2的并集为:'</span>, s4)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="键值对集合map-俗称字典dict"><a href="#键值对集合map-俗称字典dict" class="headerlink" title="键值对集合map,俗称字典dict"></a>键值对集合map,俗称字典dict</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDict</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_dict_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 定义一个Map,使用花括号，采用键值对的形式</span></span><br><span class="line">        d = &#123;<span class="string">'张三'</span>: <span class="number">56</span>, <span class="string">'李四'</span>: <span class="number">77</span>, <span class="string">'王五'</span>: <span class="number">98</span>&#125;</span><br><span class="line">        <span class="comment"># 获取元素</span></span><br><span class="line">        print(d[<span class="string">'张三'</span>])</span><br><span class="line">        print(d[<span class="string">'李四'</span>])</span><br><span class="line">        <span class="comment"># 声明元素</span></span><br><span class="line">        d[<span class="string">'李达康'</span>] = <span class="number">87</span></span><br><span class="line">        print(d)</span><br><span class="line">        <span class="comment"># 如果key不存在的话，就要报错，需要重新的避免key不存在的情况</span></span><br><span class="line">        <span class="comment"># 判断key存在字典中</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'李四'</span> <span class="keyword">in</span> d:</span><br><span class="line">            print(d[<span class="string">'李四'</span>])</span><br><span class="line">        <span class="comment"># 或者可以通过dict的get方法，如果key不存在的话，就显示None不会出错</span></span><br><span class="line">        print(d.get(<span class="string">'李书记'</span>))</span><br><span class="line">        <span class="comment"># 删除key和value</span></span><br><span class="line">        print(<span class="string">'删除元素的value:'</span>, d.pop(<span class="string">'李四'</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestIf</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_if_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        age = <span class="number">20</span></span><br><span class="line">        <span class="keyword">if</span> age &lt; <span class="number">10</span>:</span><br><span class="line">            print(<span class="string">'已经不是小孩子了'</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="number">10</span> &lt; age &lt; <span class="number">15</span>:</span><br><span class="line">            print(<span class="string">'青少年'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'大人了'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestFor</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_for_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>]</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="comment"># for循环遍历list</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            print(num)</span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_for_02</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 通过range函数生成的0-4的整数，再通过list函数转换成集合</span></span><br><span class="line">        nums = list(range(<span class="number">5</span>))</span><br><span class="line">        print(nums)</span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_for_03</span><span class="params">(self)</span>:</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> list(range(<span class="number">101</span>)):</span><br><span class="line">            num += i</span><br><span class="line">        print(<span class="string">'1-100的和为'</span>, num)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_while_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> num &lt; <span class="number">10</span>:</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        print(num)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="python的内置函数"><a href="#python的内置函数" class="headerlink" title="python的内置函数"></a>python的内置函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestInnerFunction</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_inner_function_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'绝对值函数abs()'</span>, abs(<span class="number">-2</span>))</span><br><span class="line">        print(<span class="string">'取最大值函数max()'</span>, max(<span class="number">1</span>, <span class="number">2456</span>, <span class="number">6789</span>))</span><br><span class="line">        print(<span class="string">'数据类型转换int()'</span>, int(<span class="string">'-1'</span>))</span><br><span class="line">        print(<span class="string">'数据类型转换int()'</span>, int(<span class="number">12.34</span>))</span><br><span class="line">        print(<span class="string">'数据类型转换float()'</span>, float(<span class="string">'12.34'</span>))</span><br><span class="line">        print(<span class="string">'数据类型转换str()'</span>, str(<span class="number">123</span>))</span><br><span class="line">        print(<span class="string">'数据类型转换bool()'</span>, bool(<span class="number">1</span>))</span><br><span class="line">        print(<span class="string">'数据类型转换bool()'</span>, bool(<span class="string">''</span>))</span><br><span class="line">    <span class="comment"># 定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:</span></span><br><span class="line">    <span class="comment"># 然后，在缩进块中编写函数体，函数的返回值用return语句返回</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_define_function</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">10</span> &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">11</span></span><br><span class="line">    <span class="comment"># 定义一个空函数，使用pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 返回多个值，其实结果就是一个tuple</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>+x, y+<span class="number">10</span></span><br><span class="line">    <span class="comment"># 位置参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> x*x</span><br><span class="line">    <span class="comment"># 默认参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n =<span class="number">2</span>)</span>:</span></span><br><span class="line">        s = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            n = n - <span class="number">1</span></span><br><span class="line">            s = s * x</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="comment"># 可变参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(numbers)</span>:</span></span><br><span class="line">        sums = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">            sums += x</span><br><span class="line">        <span class="keyword">return</span> sums</span><br><span class="line">    <span class="comment"># 关键字参数 *args是可变参数，args接收的是一个tuple</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(x, y, *args)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> args:</span><br><span class="line">            print(i)</span><br><span class="line">    <span class="comment"># **kw是关键字参数，kwargs接收的是一个dict</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(x, y, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'李四'</span> <span class="keyword">in</span> kwargs:</span><br><span class="line">            print(kwargs.get(<span class="string">'李四'</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="高级特性-切片等"><a href="#高级特性-切片等" class="headerlink" title="高级特性,切片等"></a>高级特性,切片等</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHighCharacter</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_slice_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 截取list</span></span><br><span class="line">        names = [<span class="string">'李四'</span>, <span class="string">'张三'</span>, <span class="string">'王五'</span>]</span><br><span class="line">        <span class="comment"># 切片</span></span><br><span class="line">        print(names[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">        <span class="comment"># 截取字符串</span></span><br><span class="line">        print(names[<span class="number">0</span>][<span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_iterable_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        names = [<span class="string">'李四'</span>, <span class="string">'张三'</span>, <span class="string">'王五'</span>]</span><br><span class="line">        <span class="comment"># 判断names对象是否可以迭代</span></span><br><span class="line">        print(isinstance(names, Iterable))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_for_i</span><span class="params">(self)</span>:</span></span><br><span class="line">        names = [<span class="string">'李四'</span>, <span class="string">'张三'</span>, <span class="string">'王五'</span>]</span><br><span class="line">        <span class="keyword">for</span> i, y <span class="keyword">in</span> enumerate(names):</span><br><span class="line">            print(i, y)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="comment"># 高阶函数:把函数作为参数传入，这样的函数称为高阶函数,函数式编程就是指这种高度抽象的编程范式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestHighOrderFunction</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_high_order_function</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'取绝对值的函数:'</span>, abs(<span class="number">-10</span>))</span><br><span class="line">        <span class="comment"># 变量可以指向函数,函数本身也可以指向变量</span></span><br><span class="line">        f = abs</span><br><span class="line">        <span class="comment"># 调用f</span></span><br><span class="line">        print(f(<span class="number">-11</span>))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_high_order_function_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 定义个一个函数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line">        <span class="comment"># 调用函数,传入函数参数</span></span><br><span class="line">        print(<span class="string">'传入函数:'</span>, add(<span class="number">-1</span>, <span class="number">-2</span>, abs))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMap</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># map()函数接收2个参数，一个是函数，一个是Iterable,map将传入的函数依次作用于序列的每个元素，把结果作为新的map返回</span></span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_map_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 定义函数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> x * x</span><br><span class="line">        <span class="comment"># 定义序列</span></span><br><span class="line">        nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8.8</span>, <span class="number">9.0</span>]</span><br><span class="line">        <span class="comment"># 调用map</span></span><br><span class="line">        r = map(f, nums)</span><br><span class="line">        print(<span class="string">'执行map()函数'</span>, list(r))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_map_02</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 定义整数序列</span></span><br><span class="line">        nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8.8</span>, <span class="number">9.0</span>]</span><br><span class="line">        <span class="comment"># 利用map()函数转换成字符串序列</span></span><br><span class="line">        r = map(str, nums)</span><br><span class="line">        print(list(r))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h4 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># reduce把一个函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestReduce</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_reduce_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 定义一个函数，必须是2个参数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> x + y</span><br><span class="line">        <span class="comment"># 调用reduce函数</span></span><br><span class="line">        print(reduce(add, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h3 id="模块，安装第三方模块"><a href="#模块，安装第三方模块" class="headerlink" title="模块，安装第三方模块"></a>模块，安装第三方模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="string">'模块的文档注释 '</span></span><br><span class="line"><span class="comment"># 在Python中，一个.py文件就称之为一个模块（Module）。</span></span><br><span class="line"><span class="comment"># 请注意，每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，</span></span><br><span class="line"><span class="comment"># 否则，Python就把这个目录当成普通目录，而不是一个包。</span></span><br><span class="line"><span class="comment"># 安装第三方模块 pip install</span></span><br><span class="line"><span class="comment"># [d:\~]$ pip install Pillow</span></span><br><span class="line"><span class="comment"># Collecting Pillow</span></span><br><span class="line"><span class="comment">#   Downloading Pillow-4.2.0-cp36-cp36m-win32.whl (1.3MB)</span></span><br><span class="line"><span class="comment"># Collecting olefile (from Pillow)</span></span><br><span class="line"><span class="comment">#   Downloading olefile-0.44.zip (74kB)</span></span><br><span class="line"><span class="comment"># Installing collected packages: olefile, Pillow</span></span><br><span class="line"><span class="comment">#   Running setup.py install for olefile: started</span></span><br><span class="line"><span class="comment">#     Running setup.py install for olefile: finished with status 'done'</span></span><br><span class="line"><span class="comment"># Successfully installed Pillow-4.2.0 olefile-0.44</span></span><br><span class="line">_author_ = <span class="string">'Chilam'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestModule</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_module_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'001'</span>)</span><br><span class="line"><span class="meta">    @unittest.skip</span></span><br><span class="line">    <span class="comment"># 作用域</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_module_02</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_module_03</span><span class="params">(self)</span>:</span></span><br><span class="line">        im = Image.open(<span class="string">'bd_logo1.png'</span>)</span><br><span class="line">        print(im.format, im.size, im.mode)</span><br><span class="line">        <span class="comment"># 压缩图片</span></span><br><span class="line">        im.thumbnail((<span class="number">20</span>, <span class="number">10</span>))</span><br><span class="line">        im.save(<span class="string">'thumb.jpg'</span>, <span class="string">'PNG'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.学习笔记-vue</title>
      <link href="/2017/07/02/node-vue/"/>
      <url>/2017/07/02/node-vue/</url>
      <content type="html"><![CDATA[<h1 id="Vue组件开发文档"><a href="#Vue组件开发文档" class="headerlink" title="Vue组件开发文档"></a>Vue组件开发文档</h1><h2 id="1-开发环境搭建"><a href="#1-开发环境搭建" class="headerlink" title="1.开发环境搭建"></a>1.开发环境搭建</h2><h3 id="第一步：nodejs安装"><a href="#第一步：nodejs安装" class="headerlink" title="第一步：nodejs安装"></a>第一步：nodejs安装</h3><p>从官网：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a> 下载与电脑匹配的node.js版本的.msi文件，</p><p><img src="https://i.imgur.com/EOFDAhZ.png" alt=""></p><p>下载完成后进行傻瓜式一键安装</p><h3 id="第二步：检验node-js安装是否成功"><a href="#第二步：检验node-js安装是否成功" class="headerlink" title="第二步：检验node.js安装是否成功"></a>第二步：检验node.js安装是否成功</h3><p>打开Windows命令工具，win+r，</p><p><img src="https://i.imgur.com/jBC2c3C.png" alt=""></p><p>依次输入npm -v和node -v出现版本号，则表明安装成功</p><p><img src="https://i.imgur.com/WK54bK5.png" alt=""></p><h3 id="第三步：安装cnpm"><a href="#第三步：安装cnpm" class="headerlink" title="第三步：安装cnpm"></a>第三步：安装cnpm</h3><p>由于有些npm的资源被屏蔽或者是国外资源的时候安装速度慢，经常会导致用npm安装依赖包的时候失败，因此需要安装npm的国内镜像cnpm，在此采用的是淘宝NPM镜像，在命令行输入：                             npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a> 然后等待，安装完成如下图<img src="https://i.imgur.com/8wq0aDI.png" alt=""></p><h3 id="第四步：安装vue-cli脚手架构建工具"><a href="#第四步：安装vue-cli脚手架构建工具" class="headerlink" title="第四步：安装vue-cli脚手架构建工具"></a>第四步：安装vue-cli脚手架构建工具</h3><p>在命令行输入npm install -g vue-cli等待安装完成即可</p><p><img src="https://i.imgur.com/RMr5kYb.png" alt="">，</p><p>在此开发环境已经搭建完成</p><h2 id="2-vue-cli构建项目"><a href="#2-vue-cli构建项目" class="headerlink" title="2.vue-cli构建项目"></a>2.vue-cli构建项目</h2><h3 id="第一步：选择构建项目的位置"><a href="#第一步：选择构建项目的位置" class="headerlink" title="第一步：选择构建项目的位置"></a>第一步：选择构建项目的位置</h3><p>首先选择创建项目的位置，在命令行将目录转到相应的位置下，在此事例中我们选择将项目建立在桌面上，则我们需要把目录cd到桌面上，即cd desktop，如下图所示</p><p><img src="https://i.imgur.com/Jc73ynf.png" alt=""></p><h3 id="第二步：创建Vue项目"><a href="#第二步：创建Vue项目" class="headerlink" title="第二步：创建Vue项目"></a>第二步：创建Vue项目</h3><p>在当前项目位置下，在命令行输入vue init webpack testVue，即初始化一个项目，它会在你选择的目录下生成一个项目，在该事例中会在桌面生成该文件夹</p><p><img src="https://i.imgur.com/ZowDNot.png" alt=""></p><h3 id="第三步：下载项目所需要的依赖"><a href="#第三步：下载项目所需要的依赖" class="headerlink" title="第三步：下载项目所需要的依赖"></a>第三步：下载项目所需要的依赖</h3><p>先把路径定位到testVue,在命令行输入cd desktop/testvue,然后在输入cnpm install安装项目所需要的依赖包</p><p><img src="https://i.imgur.com/yPsiUki.png" alt=""></p><p>安装完成后在我们的项目下会有一个node_modules文件夹，这里面就是我们需要的依赖</p><p><img src="https://i.imgur.com/yr4Gzox.png" alt=""></p><h3 id="第四步：运行项目"><a href="#第四步：运行项目" class="headerlink" title="第四步：运行项目"></a>第四步：运行项目</h3><p>在命令行输入npm run dev,运行结果如下</p><p><img src="https://i.imgur.com/WowdySh.png" alt=""></p><p>在浏览器中输入该地址出现如下图画面，说明项目创建完成</p><p><img src="https://i.imgur.com/43wRWTk.png" alt=""></p><h2 id="3-Vue组件开发"><a href="#3-Vue组件开发" class="headerlink" title="3.Vue组件开发"></a>3.Vue组件开发</h2><p>用idea打开刚新建的项目，目录结构如下所示</p><p><img src="https://i.imgur.com/I5eAr6P.png" alt=""></p><p>###第一步：建立新的组件</p><p>在src下的component文件夹下创建firstComponent.vue文件作为第一个组件</p><p><img src="https://i.imgur.com/tvqmg5S.png" alt=""></p><h3 id="第二步：组件注册"><a href="#第二步：组件注册" class="headerlink" title="第二步：组件注册"></a>第二步：组件注册</h3><p>在src下router文件夹下的index.js文件中进行组件注册，首先引入刚刚创建的组件，然后再进行路由注册，具体请看下图</p><p><img src="https://i.imgur.com/tZYBYBQ.png" alt=""></p><p>###第三步：组件查看</p><p>在index.html中使用<router-view></router-view>标签即可将组件引入，</p><p><img src="https://i.imgur.com/5vtZXD4.png" alt=""></p><p>通过访问index.js中注册的path进行访问</p><p><img src="https://i.imgur.com/Upb6Es0.png" alt=""></p><p>我们会发现在组件中多了一个Vue的图标，这是因为在main.js中实例化Vue时添加了app模板，所以在main.js中删掉new Vue中的template即可，如下图所示</p><p><img src="https://i.imgur.com/Vwk0Voz.png" alt=""></p><h3 id="第四步：组件跳转"><a href="#第四步：组件跳转" class="headerlink" title="第四步：组件跳转"></a>第四步：组件跳转</h3><p>首先按照第一，第二步依次建立并注册SecondComponent.vue和ThirdComponent.vue两个组件，在index.html中采用<router-link></router-link>标签跳转到其他组件，</p><p><img src="https://i.imgur.com/ndIvTmS.png" alt=""></p><p>访问效果图如下所示：点击go to second 和 go to third 分别能跳到不同组件</p><p><img src="https://i.imgur.com/rEoF1fF.png" alt=""></p><p><img src="https://i.imgur.com/BREUNAR.png" alt=""></p><h2 id="4-项目打包"><a href="#4-项目打包" class="headerlink" title="4.项目打包"></a>4.项目打包</h2><p>首先在config文件夹下的index.js文件中，修改资源文件保存路径，</p><p><img src="https://i.imgur.com/iDFm9SZ.png" alt=""></p><p>其次在控制台输入Ctrl+c停止程序</p><p><img src="https://i.imgur.com/HI5zKdK.png" alt=""></p><p>最后在控制台输入npm run build,</p><p><img src="https://i.imgur.com/DHR4Urc.png" alt=""></p><p>打包成功后将在项目中生成一个dist文件夹，</p><p><img src="https://i.imgur.com/0uCNnqY.png" alt=""></p><h2 id="5-安装过程中可能遇到的问题"><a href="#5-安装过程中可能遇到的问题" class="headerlink" title="5.安装过程中可能遇到的问题"></a>5.安装过程中可能遇到的问题</h2><ul><li>初始化项目时出现乱码</li></ul><p><img src="https://i.imgur.com/FmxUZb7.png" alt=""></p><p>解决方案：设置控制台的编码方式，在控制台输入CHCP 65001，结果如图所示</p><p><img src="https://i.imgur.com/FveWp83.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python单元测试unittest</title>
      <link href="/2017/06/30/python-unittest/"/>
      <url>/2017/06/30/python-unittest/</url>
      <content type="html"><![CDATA[<h2 id="一个简单的测试示例"><a href="#一个简单的测试示例" class="headerlink" title="一个简单的测试示例"></a>一个简单的测试示例</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import unittest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义的测试类(注意类名和文件名必须一致哈)，继承unittest.TestCase父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="title">unittest</span>.<span class="title">TestCase</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义测试方法必须以test_开头，才会被unittest测试框架识别</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_stringMethod</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'-----hello'</span>)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(<span class="string">'foo'</span>.upper(), <span class="string">'FOO'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">@unittest</span>.skip 跳过测试</span></span><br><span class="line">    @unittest.skip</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_stringMethod1</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        print(<span class="string">'sss'</span>)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(<span class="string">'sss'</span>.upper(), <span class="string">'SSS'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># main方法入口</span></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell脚本语言</title>
      <link href="/2017/06/29/shell-script/"/>
      <url>/2017/06/29/shell-script/</url>
      <content type="html"><![CDATA[<h2 id="shell的基本元素"><a href="#shell的基本元素" class="headerlink" title="shell的基本元素"></a>shell的基本元素</h2><h3 id="命令与参数"><a href="#命令与参数" class="headerlink" title="命令与参数"></a>命令与参数</h3><ul><li>内建命令</li><li>shell函数</li><li>外部命令</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>shell变量的名称是一个字母或下划线符号，后面可以接任意长度的字母，数字或下划线符号。</li><li>变量的赋值的方式为，先写变量名称，紧跟着=符号，最后是新值，中间完全没有任何空格。</li><li>当使用变量的时候请加上$符号。</li><li>当赋予的值有空格的时候请加上引号。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ shell]<span class="comment"># vi test-variable </span></span><br><span class="line"></span><br><span class="line">name=<span class="string">"张 安"</span></span><br><span class="line">name1=<span class="variable">$name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name1</span></span><br></pre></td></tr></table></figure><h3 id="简单的echo输出"><a href="#简单的echo输出" class="headerlink" title="简单的echo输出"></a>简单的echo输出</h3><ul><li>简单的echo输出，命令与参数之间以空格隔开</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ <span class="keyword">shell</span><span class="bash">]<span class="comment"># echo  echo</span></span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span></span></span><br><span class="line"><span class="bash">[root@iZwz9cfts3rjkrsqm8buxyZ shell]<span class="comment"># echo hello are you </span></span></span><br><span class="line"><span class="bash">hello are you</span></span><br><span class="line"><span class="bash">[root@iZwz9cfts3rjkrsqm8buxyZ shell]<span class="comment"># echo "hello"</span></span></span><br><span class="line"><span class="bash">hello</span></span><br><span class="line"><span class="bash">[root@iZwz9cfts3rjkrsqm8buxyZ shell]<span class="comment"># echo -n 'hi'</span></span></span><br><span class="line"><span class="bash">hi[root@iZwz9cfts3rjkrsqm8buxyZ shell]<span class="comment"># echo -n "hey"</span></span></span><br><span class="line"><span class="bash">hey[root@iZwz9cfts3rjkrsqm8buxyZ shell]<span class="comment">#</span></span></span><br></pre></td></tr></table></figure><h3 id="华丽的printf输出"><a href="#华丽的printf输出" class="headerlink" title="华丽的printf输出"></a>华丽的printf输出</h3><ul><li>printf必须显示指定的换行，使用\n </li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ <span class="keyword">shell</span><span class="bash">]<span class="comment"># printf hello</span></span></span><br><span class="line"><span class="bash">hello[root@iZwz9cfts3rjkrsqm8buxyZ shell]<span class="comment"># printf 'hello'</span></span></span><br><span class="line"><span class="bash">hello[root@iZwz9cfts3rjkrsqm8buxyZ shell]<span class="comment"># printf "hello"</span></span></span><br><span class="line"><span class="bash">hello[root@iZwz9cfts3rjkrsqm8buxyZ shell]<span class="comment"># printf "hello\n"</span></span></span><br><span class="line"><span class="bash">hello</span></span><br></pre></td></tr></table></figure><h3 id="基本IO重定向"><a href="#基本IO重定向" class="headerlink" title="基本IO重定向"></a>基本IO重定向</h3><ul><li>以&lt;(小于符号)表示标准的输入</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出test-variable的内容</span></span><br><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ <span class="keyword">shell</span><span class="bash">]<span class="comment"># tr -d '\r' &lt; test-variable </span></span></span><br><span class="line"><span class="bash"><span class="built_in">echo</span></span></span><br><span class="line"><span class="bash">echo1</span></span><br></pre></td></tr></table></figure><ul><li><p>以&gt;(大于符号)表示标准的输出，完全覆盖输出</p></li><li><p>以&gt;&gt;表示标准的附加</p></li></ul><h3 id="基本查找命令"><a href="#基本查找命令" class="headerlink" title="基本查找命令"></a>基本查找命令</h3><p>shell会依照$PATH路径来寻找命令。$PATH是一个以冒号分隔的目录列表</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ shell]<span class="comment"># echo $PATH</span></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/sbin:/u</span>sr<span class="regexp">/local/</span>bin:<span class="regexp">/usr/</span>sbin:<span class="regexp">/usr/</span>bin:<span class="regexp">/root/</span>bin</span><br></pre></td></tr></table></figure><p>若果要编写自己的脚本，想要被执行，最好时准备自己的bin目录，并且让shell能过自动识别他们，建立自己的Bin目录，并加入到$PATH中。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ opt]# <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:/opt/bin</span><br></pre></td></tr></table></figure><h3 id="简单的执行跟踪-sh-x"><a href="#简单的执行跟踪-sh-x" class="headerlink" title="简单的执行跟踪(sh -x)"></a>简单的执行跟踪(sh -x)</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ opt]<span class="comment"># sh -x hello</span></span><br><span class="line">+ echo <span class="regexp">/usr/</span>local<span class="regexp">/sbin:/u</span>sr<span class="regexp">/local/</span>bin:<span class="regexp">/usr/</span>sbin:<span class="regexp">/usr/</span>bin:<span class="regexp">/root/</span>bin</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/sbin:/u</span>sr<span class="regexp">/local/</span>bin:<span class="regexp">/usr/</span>sbin:<span class="regexp">/usr/</span>bin:<span class="regexp">/root/</span>bin</span><br></pre></td></tr></table></figure><h2 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h2><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 一直查看日志，需要使用ctrl+c来中断额</span><br><span class="line">tail -<span class="built_in">n</span> <span class="number">25</span> -f /<span class="built_in">var</span>/<span class="built_in">log</span>/message</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.mysql-sql</title>
      <link href="/2017/06/26/mysql-2/"/>
      <url>/2017/06/26/mysql-2/</url>
      <content type="html"><![CDATA[<h2 id="SQL语句主要分类可以划分为3个类别："><a href="#SQL语句主要分类可以划分为3个类别：" class="headerlink" title="SQL语句主要分类可以划分为3个类别："></a>SQL语句主要分类可以划分为3个类别：</h2><h3 id="DDL-Data-Definition-Languages"><a href="#DDL-Data-Definition-Languages" class="headerlink" title="DDL(Data Definition Languages)"></a>DDL(Data Definition Languages)</h3><p>数据定义语言，定义了不同的数据段，数据库，表，列，索引等数据库对象的定义，常用的关键字主要包括create,drop,alter等。</p><h3 id="Data-Manipulation-Languages"><a href="#Data-Manipulation-Languages" class="headerlink" title="Data Manipulation Languages"></a>Data Manipulation Languages</h3><p>DML数据操作语句，用于添加，删除，更新和查询数据库记录，并检查数据完整性，常用的语句关键字有insert,update,delete,select。</p><h3 id="DCL-Data-Control-Languages"><a href="#DCL-Data-Control-Languages" class="headerlink" title="DCL(Data Control Languages)"></a>DCL(Data Control Languages)</h3><p>数据控制语句，用于控制不同数据段直接的许可和访问级别的语句，这些语句定义了数据库，表，字段，用户的访问权限和安全级别，主要关键字包括grant,invoke等。</p><h2 id="SQL语句基础"><a href="#SQL语句基础" class="headerlink" title="SQL语句基础"></a>SQL语句基础</h2><h3 id="查看数据库创建语句"><a href="#查看数据库创建语句" class="headerlink" title="查看数据库创建语句"></a>查看数据库创建语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> database_name;</span><br></pre></td></tr></table></figure><h3 id="查看表结构定义语句："><a href="#查看表结构定义语句：" class="headerlink" title="查看表结构定义语句："></a>查看表结构定义语句：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> table_name;</span><br></pre></td></tr></table></figure><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改字段类型</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> alter table <span class="built_in">test</span> modify USER_NAME varchar(100);</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加字段</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> alter table <span class="built_in">test</span> add loginid int(10);</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除字段</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> alter table <span class="built_in">test</span> drop loginid;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改字段名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> alter table <span class="built_in">test</span> change loginid LOGINID int(12);</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改字段排列顺序,增加isok字段到USER_NAME字段之后</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> alter table <span class="built_in">test</span> add isok varchar(1) after USER_NAME;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改表名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> alter table <span class="built_in">test</span> rename test1;</span></span><br><span class="line">desc test1;</span><br></pre></td></tr></table></figure><h2 id="SQL优化策略"><a href="#SQL优化策略" class="headerlink" title="SQL优化策略"></a>SQL优化策略</h2><h3 id="不使用子查询"><a href="#不使用子查询" class="headerlink" title="不使用子查询"></a>不使用子查询</h3><p>采用join关联方式对其进行了优化，</p><h3 id="避免函数索引"><a href="#避免函数索引" class="headerlink" title="避免函数索引"></a>避免函数索引</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例：<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> YEAR(d) &gt;= <span class="number">2016</span>;</span><br><span class="line">由于MySQL不像Oracle那样支持函数索引，即使d字段有索引，也会直接全表扫描。</span><br><span class="line">应改为—–&gt;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> d &gt;= ‘<span class="number">2016</span><span class="number">-01</span><span class="number">-01</span>’;</span><br></pre></td></tr></table></figure><h3 id="用IN来替换OR"><a href="#用IN来替换OR" class="headerlink" title="用IN来替换OR"></a>用IN来替换OR</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">低效查询</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> LOC_ID = <span class="number">10</span> <span class="keyword">OR</span> LOC_ID = <span class="number">20</span> <span class="keyword">OR</span> LOC_ID = <span class="number">30</span>;</span><br><span class="line">—–&gt;</span><br><span class="line">高效查询</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> LOC_IN <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure><h3 id="LIKE双百分号无法使用到索引"><a href="#LIKE双百分号无法使用到索引" class="headerlink" title="LIKE双百分号无法使用到索引"></a>LIKE双百分号无法使用到索引</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> ‘%de%’;</span><br><span class="line">—–&gt;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> ‘de%’;</span><br><span class="line">目前只有MySQL5.7支持全文索引（支持中文）</span><br></pre></td></tr></table></figure><h3 id="批量INSERT插入"><a href="#批量INSERT插入" class="headerlink" title="批量INSERT插入"></a>批量INSERT插入</h3><p>INSERT INTO t (id, name) VALUES(1,’Bea’);<br>INSERT INTO t (id, name) VALUES(2,’Belle’);<br>INSERT INTO t (id, name) VALUES(3,’Bernice’);<br>—–&gt;<br>INSERT INTO t (id, name) VALUES(1,’Bea’), (2,’Belle’),(3,’Bernice’);</p><h3 id="表关联顺序"><a href="#表关联顺序" class="headerlink" title="表关联顺序"></a>表关联顺序</h3><p>Oracle的解析器按照从右到左的顺序处理from子句中的表名，from子句中写在最后的表(基础表 driving table)将被最先处理，在from子句中包含多个表的情况下,你必须选择记录条数最少的表作为基础表。如果有3个以上的表连接查询, 那就需要选择交叉表(intersection table)作为基础表, 交叉表是指那个被其他表所引用的表。</p><h3 id="exists代替in"><a href="#exists代替in" class="headerlink" title="exists代替in"></a>exists代替in</h3><p>Oracle中In子查询返回的结果不能超过1000条，使用exists为替代方案。</p><p>### </p><p>当模糊匹配以%开头时，该列索引将失效，若不以%开头，该列索引有效。</p><p>###</p><ol><li>在where语句或者order by语句中避免对索引字段进行计算操作</li><li>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。 </li><li>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描</li><li>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描</li><li>.in 和 not in 也要慎用，否则会导致全表扫描，</li><li>尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。 </li><li>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。 </li></ol><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h3><p>InnoDB是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键，上图也看到了，InnoDB是默认的MySQL引擎。InnoDB主要特性有：</p><ul><li>InnoDB给MySQL提供了具有提交、回滚和崩溃恢复能力的事物安全（ACID兼容）存储引擎。InnoDB锁定在行级并且也在SELECT语句中提供一个类似Oracle的非锁定读。这些功能增加了多用户部署和性能。在SQL查询中，可以自由地将InnoDB类型的表和其他MySQL的表类型混合起来，甚至在同一个查询中也可以混合</li><li>InnoDB是为处理巨大数据量的最大性能设计。它的CPU效率可能是任何其他基于磁盘的关系型数据库引擎锁不能匹敌的</li><li>InnoDB存储引擎完全与MySQL服务器整合，InnoDB存储引擎为在主内存中缓存数据和索引而维持它自己的缓冲池。InnoDB将它的表和索引在一个逻辑表空间中，表空间可以包含数个文件（或原始磁盘文件）</li><li>InnoDB支持外键完整性约束，存储表中的数据时，每张表的存储都按主键顺序存放，如果没有显示在表定义时指定主键，InnoDB会为每一行生成一个6字节的ROWID，并以此作为主键</li><li>InnoDB被用在众多需要高性能的大型数据库站点上</li></ul><h3 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a>MyISAM存储引擎</h3><p>MyISAM基于ISAM存储引擎，并对其进行扩展。它是在Web、数据仓储和其他应用环境下最常使用的存储引擎之一。MyISAM拥有较高的插入、查询速度，但不支持事物。MyISAM主要特性有：</p><ul><li>大文件（达到63位文件长度）在支持大文件的文件系统和操作系统上被支持</li><li>当把删除和更新及插入操作混合使用的时候，动态尺寸的行产生更少碎片。这要通过合并相邻被删除的块，以及若下一个块被删除，就扩展到下一块自动完成</li><li>每个MyISAM表最大索引数是64，这可以通过重新编译来改变。每个索引最大的列数是16</li><li>最大的键长度是1000字节，这也可以通过编译来改变，对于键长度超过250字节的情况，一个超过1024字节的键将被用上</li><li>BLOB和TEXT列可以被索引</li><li>NULL被允许在索引的列中，这个值占每个键的0~1个字节</li></ul><h3 id="MEMORY存储引擎"><a href="#MEMORY存储引擎" class="headerlink" title="MEMORY存储引擎"></a>MEMORY存储引擎</h3><p>MEMORY存储引擎将表中的数据存储到内存中，未查询和引用其他表数据提供快速访问。MEMORY主要特性有：</p><ul><li>MEMORY表的每个表可以有多达32个索引，每个索引16列，以及500字节的最大键长度</li><li>MEMORY存储引擎执行HASH和BTREE缩影</li><li>可以在一个MEMORY表中有非唯一键值</li><li>MEMORY表使用一个固定的记录长度格式</li><li>MEMORY不支持BLOB或TEXT列</li><li>MEMORY支持AUTO_INCREMENT列和对可包含NULL值的列的索引</li><li>MEMORY表在所由客户端之间共享（就像其他任何非TEMPORARY表）</li><li>MEMORY表内存被存储在内存中，内存是MEMORY表和服务器在查询处理时的空闲中，创建的内部表共享</li><li>当不再需要MEMORY表的内容时，要释放被MEMORY表使用的内存，应该执行DELETE FROM或TRUNCATE TABLE，或者删除整个表（使用DROP TABLE）</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS上RPM安装JAVA</title>
      <link href="/2017/06/26/server-java/"/>
      <url>/2017/06/26/server-java/</url>
      <content type="html"><![CDATA[<h3 id="检查是都已经安装JAVA"><a href="#检查是都已经安装JAVA" class="headerlink" title="检查是都已经安装JAVA"></a>检查是都已经安装JAVA</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@xxb001 Downloads]# rpm -qa | grep java*</span><br><span class="line">java<span class="number">-1.6</span><span class="number">.0</span>-openjdk-devel<span class="number">-1.6</span><span class="number">.0</span><span class="number">.0</span><span class="number">-1.45</span><span class="number">.1</span><span class="number">.11</span><span class="number">.1</span>.el6.x86_64</span><br><span class="line">java<span class="number">-1.6</span><span class="number">.0</span>-openjdk<span class="number">-1.6</span><span class="number">.0</span><span class="number">.0</span><span class="number">-1.45</span><span class="number">.1</span><span class="number">.11</span><span class="number">.1</span>.el6.x86_64</span><br><span class="line">tzdata-java<span class="number">-2012</span>c<span class="number">-1.</span>el6.noarch</span><br></pre></td></tr></table></figure><h3 id="下载跟系统位数相同的RPM的java安装包"><a href="#下载跟系统位数相同的RPM的java安装包" class="headerlink" title="下载跟系统位数相同的RPM的java安装包"></a>下载跟系统位数相同的RPM的java安装包</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查看操作OS位数</span><br><span class="line">[root<span class="title">@xxb001</span> Downloads]# uname -a</span><br><span class="line">Linux xxb<span class="number">001</span> <span class="number">2.6</span>.<span class="number">39</span><span class="number">-200.24</span>.<span class="number">1</span>.el<span class="number">6</span>uek.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="symbol">#1</span> SMP Sat Jun <span class="number">23</span> <span class="number">02</span>:<span class="number">39</span>:<span class="number">07</span> EDT <span class="number">2012</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> GNU/Linux</span><br></pre></td></tr></table></figure><ul><li><strong>jdk-7u79-linux-x64.rpm</strong></li></ul><h3 id="卸载已经安装的java"><a href="#卸载已经安装的java" class="headerlink" title="卸载已经安装的java"></a>卸载已经安装的java</h3><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@xxb001 opt]# rpm -e java<span class="number">-1.6</span><span class="number">.0</span>-openjdk-devel<span class="number">-1.6</span><span class="number">.0</span><span class="number">.0</span><span class="number">-1.45</span><span class="number">.1</span><span class="number">.11</span><span class="number">.1</span>.el6.x86_64</span><br><span class="line">[root@xxb001 opt]# rpm -qa | grep java</span><br><span class="line">java<span class="number">-1.6</span><span class="number">.0</span>-openjdk<span class="number">-1.6</span><span class="number">.0</span><span class="number">.0</span><span class="number">-1.45</span><span class="number">.1</span><span class="number">.11</span><span class="number">.1</span>.el6.x86_64</span><br><span class="line">tzdata-java<span class="number">-2012</span>c<span class="number">-1.</span>el6.noarch</span><br><span class="line">[root@xxb001 opt]# rpm -e java<span class="number">-1.6</span><span class="number">.0</span>-openjdk<span class="number">-1.6</span><span class="number">.0</span><span class="number">.0</span><span class="number">-1.45</span><span class="number">.1</span><span class="number">.11</span><span class="number">.1</span>.el6.x86_64</span><br><span class="line">[root@xxb001 opt]#</span><br></pre></td></tr></table></figure><h3 id="安装jdk-7u79-linux-x64-rpm"><a href="#安装jdk-7u79-linux-x64-rpm" class="headerlink" title="安装jdk-7u79-linux-x64.rpm"></a>安装jdk-7u79-linux-x64.rpm</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@xxb001 opt]# rpm -ivh jdk<span class="number">-7</span>u79-linux-x64.rpm </span><br><span class="line">Preparing...                ########################################### [<span class="number">100</span>%]</span><br><span class="line">   <span class="number">1</span>:jdk                    ########################################### [<span class="number">100</span>%]</span><br><span class="line">Unpacking JAR files...</span><br><span class="line">rt.jar...</span><br><span class="line">jsse.jar...</span><br><span class="line">charsets.jar...</span><br><span class="line">tools.jar...</span><br><span class="line">localedata.jar...</span><br><span class="line">jfxrt.jar...</span><br></pre></td></tr></table></figure><h3 id="添加JAVA-HOME到环境变量"><a href="#添加JAVA-HOME到环境变量" class="headerlink" title="添加JAVA_HOME到环境变量"></a>添加JAVA_HOME到环境变量</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑文件</span></span><br><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ bin]# vi /etc/profile</span><br><span class="line"><span class="comment"># 添加如下2句代码到文件末尾</span></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/java/jdk1.8.0_111</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$JAVA_HOME</span>/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让配置立即生效</span></span><br><span class="line">[root@iZwz9cfts3rjkrsqm8buxyZ jdk1.8.0_111]# source /etc/profile</span><br></pre></td></tr></table></figure><p>在这里安装完后，其实就可以java -version了</p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4.maven-archetype</title>
      <link href="/2017/06/24/maven-4/"/>
      <url>/2017/06/24/maven-4/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/CasperMXP/maven-archetype-usage" target="_blank" rel="noopener">点这里</a></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.maven-nexus</title>
      <link href="/2017/06/23/maven-3/"/>
      <url>/2017/06/23/maven-3/</url>
      <content type="html"><![CDATA[<h2 id="私服环境搭建"><a href="#私服环境搭建" class="headerlink" title="私服环境搭建"></a>私服环境搭建</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">下载地址</a></p><ul><li>解压下载安装包nexus-2.11.2-04-bundle.zip</li></ul><h3 id="JVM配置"><a href="#JVM配置" class="headerlink" title="JVM配置"></a>JVM配置</h3><p>/opt/nexus/nexus-2.11.2-04/bin/jsw/conf/wrapper.conf</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Size Java memory, in MB (-Xms)</span></span><br><span class="line">wrapper.java.<span class="attribute">initmemory</span>=256</span><br><span class="line"><span class="comment"># Size Java memory, in MB (-Xmx). This option only supports a setting up to 4000 (4Gb).</span></span><br><span class="line"><span class="comment"># If you need more, comment this option out and use an explicit wrapper.java.additional option with -Xmx</span></span><br><span class="line">wrapper.java.<span class="attribute">maxmemory</span>=2048</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>/opt/nexus/nexus-2.11.2-04/conf/nexus.properties</li><li>可以更改私服的端口，其他的不建议修改</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Jetty section</span></span><br><span class="line"><span class="attribute">application-port</span>=8081</span><br><span class="line"><span class="attribute">application-host</span>=0.0.0.0</span><br><span class="line"><span class="attribute">nexus-webapp</span>=<span class="variable">$&#123;bundleBasedir&#125;</span>/nexus</span><br><span class="line"><span class="attribute">nexus-webapp-context-path</span>=/nexus</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nexus section</span></span><br><span class="line"><span class="attribute">nexus-work</span>=<span class="variable">$&#123;bundleBasedir&#125;</span>/../sonatype-work/nexus</span><br><span class="line"><span class="attribute">runtime</span>=<span class="variable">$&#123;bundleBasedir&#125;</span>/nexus/WEB-INF</span><br><span class="line">org.sonatype.nexus.proxy.maven.routing.Config.prefixFileMaxSize = 500000</span><br></pre></td></tr></table></figure><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><ul><li>/opt/nexus/nexus-2.11.2-04/conf/nexus.properties</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;"yyyy-MM-dd HH:mm:ss,SSSZ"&#125;</span><span class="xml"> %-5p [%thread] %X</span><span class="template-variable">&#123;userId&#125;</span><span class="xml"> %c - %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"Sisu"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.eclipse.jetty.webapp"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.eclipse.jetty.webapp.StandardDescriptorProcessor"</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;nexus.log.level:-INFO&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="启动maven私服"><a href="#启动maven私服" class="headerlink" title="启动maven私服"></a>启动maven私服</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">RUN_AS_USER</span>=root</span><br><span class="line">cd /opt/nexus/nexus-2.11.2-04/bin</span><br><span class="line">./nexus start</span><br></pre></td></tr></table></figure><ul><li>第一次启动，默认账户名/密码：admin/123</li></ul><h3 id="注意防火墙限制端口"><a href="#注意防火墙限制端口" class="headerlink" title="注意防火墙限制端口"></a>注意防火墙限制端口</h3><ul><li>查看防火墙开放端口</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# firewall-cmd --zone=public --<span class="type">list</span>-ports</span><br><span class="line"><span class="number">8090</span>/tcp <span class="number">80</span>/tcp <span class="number">8011</span>/tcp <span class="number">2181</span>/tcp <span class="number">8888</span>/tcp <span class="number">8080</span>/tcp <span class="number">3306</span>/tcp <span class="number">23000</span>/tcp <span class="number">6379</span>/tcp <span class="number">22122</span>/tcp <span class="number">18082</span>/tcp <span class="number">18082</span>/udp</span><br></pre></td></tr></table></figure><ul><li>添加开放端口到防火墙</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> bin]<span class="meta"># firewall-cmd --add-port=8081/tcp --permanent</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure><ul><li>重载生效开放端口</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@localhost</span> bin]<span class="meta"># firewall-cmd --reload</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure><h2 id="私服的使用"><a href="#私服的使用" class="headerlink" title="私服的使用"></a>私服的使用</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ul><li>访问部署好的地址<a href="http://ip:8081/nexus" target="_blank" rel="noopener">http://ip:8081/nexus</a></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/25559449.jpg" alt=""></p><h3 id="更改密码"><a href="#更改密码" class="headerlink" title="更改密码"></a>更改密码</h3><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/88207751.jpg" alt=""></p><h3 id="新建用户并分配权限"><a href="#新建用户并分配权限" class="headerlink" title="新建用户并分配权限"></a>新建用户并分配权限</h3><ul><li>新建用户</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/5857941.jpg" alt=""></p><ul><li>分配权限</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/43875864.jpg" alt=""></p><h3 id="新建仓库并设置访问权限"><a href="#新建仓库并设置访问权限" class="headerlink" title="新建仓库并设置访问权限"></a>新建仓库并设置访问权限</h3><ul><li>Hosted Repository:本机资源库，将来的jar包都在本机服务器</li><li>Proxy Repository：代理库，很多开源的仓库，只需要设置代理去关联即可访问他们的jar包</li><li>Repository Group:将建好的仓库进行分组</li></ul><h4 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h4><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/72858624.jpg" alt=""></p><ul><li>Repository Policy有snapshot和release2个值，注意将来deploy的时候，包名称是是snapshot结尾还是relaes结尾，要与之对应。</li></ul><h4 id="新建代理仓库"><a href="#新建代理仓库" class="headerlink" title="新建代理仓库"></a>新建代理仓库</h4><ul><li><p>问题描述：</p><p>  现有2个私服，一台是内网(192.168.XX.XX这台是可以访问外网)，一台是外网(120.76.XXX.XXX)，<br>  现在很多时候我们上传第三方的jar包到了外网maven私服，于是内网maven私服需要同步。</p></li><li><p>解决思路</p><p>  在内网私服添加外网私服代理。</p></li><li><p>进入内网私服管理界面如下所示</p></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/3030737.jpg" alt=""></p><p>如上如所示点击【Add】选择【Proxy Repository】会出现【New Proxy Repository]界面</p><ul><li>配置Proxy Repository</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/81172169.jpg" alt=""></p><p>其中【Repositroy ID】和【Repository Name】必填项目而且唯一【Remote Stroage Location】为代理仓库地址，也就是外网仓库地址【Username]和【Password】是外网仓库的用户验证信息，必填最后点击【save】就好了。</p><h4 id="将新建仓库加入public组"><a href="#将新建仓库加入public组" class="headerlink" title="将新建仓库加入public组"></a>将新建仓库加入public组</h4><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/39577055.jpg" alt=""></p><h3 id="手动上传第三方jar包"><a href="#手动上传第三方jar包" class="headerlink" title="手动上传第三方jar包"></a>手动上传第三方jar包</h3><ol><li>点击【Select Artififacts to Upload】会弹出如图所示的框，选择需要上传的jar包</li><li>填写好【group】、【Artifacet】、【Version】、【Package】信息</li><li>点击【Add Artifact】按钮后，【Artifacts】框会出现添加的jar包</li><li>点击【Upload Artifact(s)】就完成上传。</li></ol><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/44749469.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.maven-release</title>
      <link href="/2017/06/22/maven-2/"/>
      <url>/2017/06/22/maven-2/</url>
      <content type="html"><![CDATA[<h2 id="maven的版本号约定："><a href="#maven的版本号约定：" class="headerlink" title="maven的版本号约定："></a>maven的版本号约定：</h2><p><strong>&lt;主版本&gt;.&lt;次版本&gt;.&lt;增量版本&gt;-&lt;里程碑版本&gt;</strong></p><ul><li>主版本:表示项目的重大架构变更</li><li>次版本：较大范围的功能增加和变化 </li><li>增量版本: 一般表示重大bug修复</li><li>里程碑版本: 一般就是重大里程碑</li></ul><h2 id="自动化版本发布"><a href="#自动化版本发布" class="headerlink" title="自动化版本发布"></a>自动化版本发布</h2><h3 id="使用maven-release-plugin插件进行自定义发布"><a href="#使用maven-release-plugin插件进行自定义发布" class="headerlink" title="使用maven-release-plugin插件进行自定义发布"></a>使用maven-release-plugin插件进行自定义发布</h3><h4 id="release-prepare-准备版本发布，并依次进行以下的操作"><a href="#release-prepare-准备版本发布，并依次进行以下的操作" class="headerlink" title="release:prepare 准备版本发布，并依次进行以下的操作"></a>release:prepare 准备版本发布，并依次进行以下的操作</h4><ul><li>检查项目是否有为提交代码</li><li>检查项目是否有快照版本依赖</li><li>根据用户输入将快照版本升级为发布版本</li><li>将POM中的SCM信息更新为标签地址</li><li>基于修改后POM执行Maven构建</li><li>提交POM变更</li><li>基于用户输入为代码打标签</li><li>将代码从发布版本升级为最新的快照版本</li><li>提交POM变更</li></ul><h4 id="release-rollback-回退release-prepare所执行的操作"><a href="#release-rollback-回退release-prepare所执行的操作" class="headerlink" title="release:rollback 回退release:prepare所执行的操作"></a>release:rollback 回退release:prepare所执行的操作</h4><p>将POM回退到release:prepare之前的状态，并提交。需要注意的是，该步骤不会删除release:prepare生成的标签，因此用户需要手动删除。</p><h4 id="release：preform-执行版本发布"><a href="#release：preform-执行版本发布" class="headerlink" title="release：preform 执行版本发布"></a>release：preform 执行版本发布</h4><p>签出release:prepare生成的标签中源代码，并在此基础上执行mvn deploy命令打包部署构件到仓库中。因此在pom.xml里需要配置部署地址。</p><h4 id="为版本发布配置SCM信息"><a href="#为版本发布配置SCM信息" class="headerlink" title="为版本发布配置SCM信息"></a>为版本发布配置SCM信息</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">   &lt;project<span class="selector-class">.build</span><span class="selector-class">.sourceEncoding</span>&gt;UTF-<span class="number">8</span>&lt;/project<span class="selector-class">.build</span><span class="selector-class">.sourceEncoding</span>&gt;</span><br><span class="line">   &lt;test<span class="selector-class">.release</span><span class="selector-class">.url</span>&gt;git@github<span class="selector-class">.com</span>:CasperMXP/test-release.git&lt;/test<span class="selector-class">.release</span><span class="selector-class">.url</span>&gt;</span><br><span class="line"> &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line"> &lt;scm&gt;</span><br><span class="line">   &lt;connection&gt;scm:git:$&#123;test<span class="selector-class">.release</span><span class="selector-class">.url</span>&#125;&lt;/connection&gt;</span><br><span class="line">   &lt;url&gt;scm:git:$&#123;test<span class="selector-class">.release</span><span class="selector-class">.url</span>&#125;&lt;/url&gt;</span><br><span class="line">   &lt;developerConnection&gt;scm:git:$&#123;test<span class="selector-class">.release</span><span class="selector-class">.url</span>&#125;&lt;/developerConnection&gt;</span><br><span class="line"> &lt;/scm&gt;</span><br></pre></td></tr></table></figure><ul><li>其中<strong>connection</strong>元素表示一个只读的URL地址</li><li>其中<strong>developerConnection</strong>表示一个可写的地址</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-release-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tagNameFormat</span>&gt;</span>v@</span><span class="template-variable">&#123;project.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">tagNameFormat</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">autoVersionSubmodules</span>&gt;</span>true<span class="tag">&lt;/<span class="name">autoVersionSubmodules</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>tagNameFormat 设置tag的标签</li><li>autoVersionSubmodules 自动管理多模块项目版本</li></ul><h4 id="执行插件的命令"><a href="#执行插件的命令" class="headerlink" title="执行插件的命令"></a>执行插件的命令</h4><ul><li>执行release:clean，进行清除上一次发布版本的信息</li><li>发布版本的准备:release:prepare</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Checking dependencies and plugins for snapshots ...</span><br><span class="line">What is the <span class="keyword">release</span> <span class="keyword">version</span> <span class="keyword">for</span> <span class="string">"test-release"</span>? (me.chilam:<span class="keyword">test</span>-<span class="keyword">release</span>) <span class="number">2.0</span><span class="number">.1</span>: : </span><br><span class="line">What <span class="keyword">is</span> SCM <span class="keyword">release</span> tag <span class="keyword">or</span> label <span class="keyword">for</span> <span class="string">"test-release"</span>? (me.chilam:<span class="keyword">test</span>-<span class="keyword">release</span>) v2<span class="number">.0</span><span class="number">.1</span>: : </span><br><span class="line">What <span class="keyword">is</span> the <span class="keyword">new</span> development <span class="keyword">version</span> <span class="keyword">for</span> <span class="string">"test-release"</span>? (me.chilam:<span class="keyword">test</span>-<span class="keyword">release</span>) <span class="number">2.0</span><span class="number">.2</span>-<span class="keyword">SNAPSHOT</span>: :</span><br></pre></td></tr></table></figure><p>一般回车就可以了，除非你自己要填写的自己的版本号</p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.webloglic-introduce</title>
      <link href="/2017/06/21/webloglic-1/"/>
      <url>/2017/06/21/webloglic-1/</url>
      <content type="html"><![CDATA[<h2 id="Weblogic介绍"><a href="#Weblogic介绍" class="headerlink" title="Weblogic介绍"></a>Weblogic介绍</h2><ul><li><p>WebLogic是oracle公司出品的一个application server，确切的说是一个基于Javaee架构的中间件，纯java开发的。</p></li><li><p>WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。</p></li><li><p>将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。完全遵循J2EE规范。</p></li><li><p>WebLogic与Tomcat的区别：</p><ul><li><p>WebLogic更加强大。weblogic是j2ee的应用服务器（application server），包括ejb ,jsp,servlet,jms等等，全能型的。</p></li><li><p>而Tomcat只能算Web Container，是官方指定的JSP&amp;Servlet容器。只实现了JSP/Servlet的相关规范，不支持EJB。</p></li></ul></li></ul><h2 id="weblogic下载安装启动"><a href="#weblogic下载安装启动" class="headerlink" title="weblogic下载安装启动"></a>weblogic下载安装启动</h2><ul><li><a href="http://www.oracle.com/technetwork/middleware/weblogic/downloads/index.html" title="weblogic下载地址" target="_blank" rel="noopener">weblogic12.2.1.3下载地址</a></li></ul><p><img src="https://i.imgur.com/8bmHlgC.png" alt=""></p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol><li><p>别忘记点击上面的“同意”条款。</p></li><li><p>点击下拉框选择下载的版本，分别为简版、普通和完全版。</p></li></ol><ul><li><p>下载完毕之后，会有一个压缩包fmw_12.2.1.3.0_wls_quick_Disk1_1of1.zip</p></li><li><p>解压后会有3个文件</p><ul><li>fmw_12.2.1.3.0_wls_quick.jar 安装执行的文件</li><li>fmw_12213_readme.htm 说明</li><li>README.txt 安装步骤说明</li></ul></li><li><p>README.txt内容如下：</p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">Oracle WebLogic<span class="built_in"> Server </span>12.2.1.3  Quick Installer</span><br><span class="line">==========================================================================================</span><br><span class="line"></span><br><span class="line">The Oracle WebLogic<span class="built_in"> Server </span>12.2.1.3 Quick Installer is a lightweight installer that contains all the necessary artifacts <span class="keyword">to</span> develop <span class="keyword">and</span> test applications on Oracle WebLogic<span class="built_in"> Server </span>12.2.1.3.  The Quick Installer does <span class="keyword">not</span> have a<span class="built_in"> user interface </span><span class="keyword">and</span> is <span class="builtin-name">run</span> directly <span class="keyword">from</span> command line. The Quick Installer is supported on Windows, Linux <span class="keyword">and</span> Mac OS X systems. Installations performed with the Quick Installer can be patched using standard Oracle Patching tool, OPatch.</span><br><span class="line"></span><br><span class="line">An optional supplemental quick installer (fmw_12.2.1.3.0_wls_supplemental_quick.jar) is available as a separate download <span class="keyword">and</span> contains additional, non essential components such as the sample set, the Http Pub-Sub<span class="built_in"> server </span><span class="keyword">and</span> L10N<span class="built_in"> console </span>help files.</span><br><span class="line">This version of Oracle WebLogic<span class="built_in"> Server </span><span class="keyword">and</span> the Quick Installer require the use of JDK 1.8.  Ensure that you have the proper JDK version installed <span class="keyword">and</span> ready <span class="keyword">for</span> use before starting.</span><br><span class="line"></span><br><span class="line">- 需要JDK1.8以上</span><br><span class="line"></span><br><span class="line">QUICKSTART</span><br><span class="line"></span><br><span class="line">1. Setup JAVA_HOME <span class="keyword">for</span> the target platform.-设置JAVA_HOME环境变量</span><br><span class="line"></span><br><span class="line">2. <span class="keyword">If</span> running on Windows you will need <span class="keyword">to</span> <span class="builtin-name">run</span> as Administrator.-windows系统需要管理员模式运行</span><br><span class="line"></span><br><span class="line">3. <span class="builtin-name">Run</span> the Quick Installer jar file <span class="keyword">and</span> specify values are desired <span class="keyword">to</span> define where the installation will be performed.  Some examples of running the Quick Installer are:</span><br><span class="line"></span><br><span class="line">   $ java -jar fmw_12.2.1.3.0_wls_quick.jar</span><br><span class="line"></span><br><span class="line">   This will use the current working directory as the ORACLE_HOME <span class="keyword">in</span> which <span class="keyword">to</span> install WebLogic Server. You must make sure that the current working directory (ORACLE_HOME) does <span class="keyword">not</span> contain an existing wls12210 directory.</span><br><span class="line"></span><br><span class="line">   $ java -jar fmw_12.2.1.3.0_wls_quick.jar <span class="attribute">ORACLE_HOME</span>=&lt;location&gt; -安装到指定的目录</span><br><span class="line"></span><br><span class="line">  This will use the specified ORACLE_HOME as the directory <span class="keyword">in</span> which <span class="keyword">to</span> install WebLogic Server.</span><br><span class="line">  </span><br><span class="line">4. <span class="keyword">To</span> see the full <span class="builtin-name">set</span> of options available <span class="keyword">to</span> <span class="builtin-name">run</span> the Quick Installer specify the -help command when running it:</span><br><span class="line"></span><br><span class="line">    $ java -jar fmw_12.2.1.3.0_wls_quick.jar -help</span><br><span class="line"></span><br><span class="line">CONFIGURE AN ORACLE WEBLOGIC<span class="built_in"> SERVER </span>DOMAIN -配置server域</span><br><span class="line"></span><br><span class="line">Once the Quick Install has completed <span class="keyword">and</span> installed Oracle WebLogic Server, a domain will need <span class="keyword">to</span> be manually created. A domain can be created directly <span class="keyword">from</span> the command line <span class="keyword">or</span> it can be created using the Configuration Wizard.</span><br><span class="line"></span><br><span class="line">CREATING A DOMAIN WITH THE CONFIGURATION WIZARD</span><br><span class="line"></span><br><span class="line">Launch the Configuration Wizard</span><br><span class="line"></span><br><span class="line">Linux $ . &lt;ORACLE_HOME&gt;/oracle_common/common/bin/config.sh</span><br><span class="line"></span><br><span class="line">Mac $ . &lt;ORACLE_HOME&gt;/oracle_common/common/bin/config.sh</span><br><span class="line"></span><br><span class="line">Windows &gt; &lt;ORACLE_HOME&gt;\oracle_common\common\bin\config.cmd</span><br><span class="line"></span><br><span class="line">CREATING A DOMAIN <span class="keyword">FROM</span> THE COMMAND LINE - 创建domain</span><br><span class="line"></span><br><span class="line">1.Setup WebLogic<span class="built_in"> Server </span>environment <span class="keyword">in</span> the current shell.</span><br><span class="line"></span><br><span class="line">Linux $ . &lt;ORACLE_HOME&gt;/wlserver/server/bin/setWLSEnv.sh</span><br><span class="line"></span><br><span class="line">Mac $ . &lt;ORACLE_HOME&gt;/wlserver/server/bin/setWLSEnv.sh</span><br><span class="line"></span><br><span class="line">Windows &gt; &lt;ORACLE_HOME&gt;\wlserver\server\bin\setWLSEnv.cmd</span><br><span class="line"></span><br><span class="line">2. Create a new directory <span class="keyword">to</span> store the domain <span class="keyword">and</span> start the server.</span><br><span class="line"></span><br><span class="line">Linux  </span><br><span class="line">$ mkdir domain</span><br><span class="line">$ cd domain</span><br><span class="line">$ JAVA_HOME/bin/java weblogic.Server</span><br><span class="line"></span><br><span class="line">Mac</span><br><span class="line">$ mkdir domain</span><br><span class="line">$ cd domain</span><br><span class="line">$ <span class="variable">$JAVA_HOME</span>/bin/java weblogic.Server</span><br><span class="line"></span><br><span class="line">Windows</span><br><span class="line">&gt;  mkdir domain</span><br><span class="line">&gt;  cd domain</span><br><span class="line">&gt; %JAVA_HOME%\bin\java.exe  weblogic.Server</span><br><span class="line"></span><br><span class="line">Once the domain is created, you should shutdown the<span class="built_in"> server </span><span class="keyword">and</span> restart it with the scripts provided <span class="keyword">in</span> the newly created domain.  This will start the associated Derby database<span class="built_in"> instance </span>that is provided <span class="keyword">to</span> make development easier with the Java EE 7<span class="built_in"> default </span>datasource definition <span class="keyword">and</span> operate as a<span class="built_in"> default </span>Job Repository <span class="keyword">for</span> the Batch API.</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">REMOVE</span> INSTALLATION -移除安装</span><br><span class="line"></span><br><span class="line">Delete the ORACLE_HOME directory.  <span class="keyword">If</span> you have created domains <span class="keyword">or</span> extracted Supplemental Quick Install, those files will be removed as well. </span><br><span class="line"></span><br><span class="line">WHAT IS <span class="keyword">NOT</span> INCLUDED <span class="keyword">IN</span> THE QUICK INSTALLER</span><br><span class="line"></span><br><span class="line">- Native JNI libraries <span class="keyword">for</span> unsupported platforms.</span><br><span class="line">- Samples, non-english<span class="built_in"> console </span>help (can be added by using the WLS supplemental Quick Install)</span><br><span class="line">- Oracle Configuration Manager (OCM) is <span class="keyword">not</span> included <span class="keyword">in</span> the Quick installer</span><br><span class="line">- SCA is <span class="keyword">not</span> included <span class="keyword">in</span> the Quick Installer</span><br></pre></td></tr></table></figure><ul><li>具体安装：java -jar fmw_12.2.1.3.0_wls_quick.jar ORACLE_HOME=D:/weblogic</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Windows [Version 10.0.17134.112]</span><br><span class="line">(c) 2018 Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">F:\software\weblogic&gt;java -version</span><br><span class="line">java version <span class="string">"1.8.0_162"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_162-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit<span class="built_in"> Server </span>VM (build 25.162-b12, mixed mode)</span><br><span class="line"></span><br><span class="line">F:\software\weblogic&gt;java -jar fmw_12.2.1.3.0_wls_quick.jar <span class="attribute">ORACLE_HOME</span>=D:/weblogic</span><br><span class="line"></span><br><span class="line">Launcher log file is C:\Users\maxp\AppData\Local\Temp\OraInstall2018-06-21_09-50-25AM\launcher2018-06-21_09-50-25AM.log.</span><br><span class="line">Extracting the installer . . . . . . . Done</span><br><span class="line">Checking <span class="keyword">if</span> CPU speed is above 300 MHz.   Actual 2893    Passed</span><br><span class="line">Checking swap space: must be greater than 512 MB    Passed</span><br><span class="line">Checking <span class="keyword">if</span> this platform requires a 64-bit JVM.   Actual 64    Passed (64-bit <span class="keyword">not</span> required)</span><br><span class="line">Checking temp space: must be greater than 300 MB.   Actual 26586 MB    Passed</span><br><span class="line">Preparing <span class="keyword">to</span> launch the Oracle Universal Installer <span class="keyword">from</span> C:\Users\maxp\AppData\Local\Temp\OraInstall2018-06-21_09-50-25AM</span><br><span class="line">Log: C:\Users\maxp\AppData\Local\Temp\OraInstall2018-06-21_09-50-25AM\install2018-06-21_09-50-25AM.log</span><br><span class="line">Setting ORACLE_HOME <span class="keyword">to</span> D:/weblogic</span><br><span class="line"></span><br><span class="line">*****************************************************</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Distribution Name : Oracle Fusion Middleware 12c WebLogic <span class="keyword">and</span> Coherence Developer</span><br><span class="line">Distribution Version : 12.2.1.3.0</span><br><span class="line"></span><br><span class="line">Oracle Home : D:/weblogic</span><br><span class="line">Java Home : C:\Program Files\Java\jdk1.8.0_162</span><br><span class="line"></span><br><span class="line">*****************************************************</span><br><span class="line"></span><br><span class="line">Copyright (c) 1996, 2017, Oracle <span class="keyword">and</span>/<span class="keyword">or</span> its affiliates. All rights reserved.</span><br><span class="line">Skipping Software Updates</span><br><span class="line">Starting check : CertifiedVersions</span><br><span class="line">Expected result: One of Windows 7, Windows<span class="built_in"> Server </span>2012, Windows<span class="built_in"> Server </span>2012 R2, Windows 8.1, Windows 10, Windows<span class="built_in"> Server </span>2016</span><br><span class="line">Actual Result: Windows 10 Pro</span><br><span class="line">Check complete. The overall result of this check is: Passed</span><br><span class="line">CertifiedVersions Check: Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting check : CheckJDKVersion</span><br><span class="line">Expected result: 1.8.0_131</span><br><span class="line">Actual Result: 1.8.0_162</span><br><span class="line">Check complete. The overall result of this check is: Passed</span><br><span class="line">CheckJDKVersion Check: Success.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Validations are enabled <span class="keyword">for</span> this session.</span><br><span class="line">Verifying data</span><br><span class="line">Copying Files</span><br><span class="line">Percent Complete : 10</span><br><span class="line">Percent Complete : 20</span><br><span class="line">Percent Complete : 30</span><br><span class="line">Percent Complete : 40</span><br><span class="line">Percent Complete : 50</span><br><span class="line">Percent Complete : 60</span><br><span class="line">Percent Complete : 70</span><br><span class="line">Percent Complete : 80</span><br><span class="line">Percent Complete : 90</span><br><span class="line">Percent Complete : 100</span><br><span class="line"></span><br><span class="line">The installation of Oracle Fusion Middleware 12c WebLogic <span class="keyword">and</span> Coherence Developer 12.2.1.3.0 completed successfully.</span><br><span class="line">Logs successfully copied <span class="keyword">to</span> D:\weblogic\cfgtoollogs\oui.</span><br></pre></td></tr></table></figure><h3 id="创建domain"><a href="#创建domain" class="headerlink" title="创建domain"></a>创建domain</h3><ul><li><p>D:\weblogic\oracle_common\common\bin&gt;config.cmd</p></li><li><p>图形界面点击next即可 </p></li></ul><h3 id="启动weblogic"><a href="#启动weblogic" class="headerlink" title="启动weblogic"></a>启动weblogic</h3><ul><li>D:\weblogic\user_projects\domains\base_domain&gt;startWebLogic.cmd</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">D:\weblogic\user_projects\domains\base_domain&gt;startWebLogic.cmd</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">JAVA Memory arguments: -Xms256m -Xmx512m -XX:CompileThreshold=8000</span><br><span class="line">.</span><br><span class="line">CLASSPATH=C:\PROGRA~1\Java\JDK18~1.0_1\lib\tools.jar;D:\weblogic\wlserver\server\lib\weblogic.jar;D:\weblogic\oracle_common\modules\thirdparty\ant-contrib-1.0b3.jar;D:\weblogic\wlserver\modules\features\oracle.wls.common.nodemanager.jar;D:\weblogic\wlserver\common\derby\lib\derbynet.jar;D:\weblogic\wlserver\common\derby\lib\derbyclient.jar;D:\weblogic\wlserver\common\derby\lib\derby.jar</span><br><span class="line">.</span><br><span class="line">PATH=D:\weblogic\user_projects\domains\base_domain\bin;;D:\weblogic\wlserver\server\native\win\x64;D:\weblogic\wlserver\server\bin;D:\weblogic\oracle_common\modules\thirdparty\org.apache.ant\1.9.8.0.0\apache-ant-1.9.8\bin;C:\PROGRA~1\Java\JDK18~1.0_1\jre\bin;C:\PROGRA~1\Java\JDK18~1.0_1\bin;D:\weblogic\wlserver\server\native\win\x64\oci920_8;C:\PROGRA~1\Java\JDK18~1.0_1\bin;C:\PROGRA~3\Oracle\Java\javapath;C:\Windows\System32;C:\Windows;C:\Windows\System32\wbem;C:\Windows\System32\WINDOW~1\v1.0\;C:\Windows\System32\OpenSSH\;C:\PROGRA~1\Git\cmd;C:\PROGRA~1\nodejs\;D:\apache-maven-3.5.3\bin;C:\Users\maxp\AppData\Local\MICROS~1\WINDOW~1;C:\Users\maxp\AppData\Roaming\npm</span><br><span class="line">.</span><br><span class="line">***************************************************</span><br><span class="line">*  To start WebLogic Server, use a username and   *</span><br><span class="line">*  password assigned to an admin-level user.  For *</span><br><span class="line">*  server administration, use the WebLogic Server *</span><br><span class="line">*  console at http:\\hostname:port\console        *</span><br><span class="line">***************************************************</span><br><span class="line">Starting WLS with line:</span><br><span class="line">C:\PROGRA~1\Java\JDK18~1.0_1\bin\java -server   -Xms256m -Xmx512m -XX:CompileThreshold=8000 -cp D:\weblogic\wlserver\server\lib\weblogic-launcher.jar -Dlaunch.use.env.classpath=true -Dweblogic.Name=AdminServer -Djava.security.policy=D:\weblogic\wlserver\server\lib\weblogic.policy -Djava.system.class.loader=com.oracle.classloader.weblogic.LaunchClassLoader  -javaagent:D:\weblogic\wlserver\server\lib\debugpatch-agent.jar -da -Dwls.home=D:\weblogic\wlserver\server -Dweblogic.home=D:\weblogic\wlserver\server      weblogic.Server</span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:39</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Info</span>&gt;</span> <span class="tag">&lt;<span class="name">Security</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-090905</span>&gt;</span> <span class="tag">&lt;<span class="name">Disabling</span> <span class="attr">the</span> <span class="attr">CryptoJ</span> <span class="attr">JCE</span> <span class="attr">Provider</span> <span class="attr">self-integrity</span> <span class="attr">check</span> <span class="attr">for</span> <span class="attr">better</span> <span class="attr">startup</span> <span class="attr">performance.</span> <span class="attr">To</span> <span class="attr">enable</span> <span class="attr">this</span> <span class="attr">check</span>, <span class="attr">specify</span> <span class="attr">-Dweblogic.security.allowCryptoJDefaultJCEVerification</span>=<span class="string">true.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:39</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Info</span>&gt;</span> <span class="tag">&lt;<span class="name">Security</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-090906</span>&gt;</span> <span class="tag">&lt;<span class="name">Changing</span> <span class="attr">the</span> <span class="attr">default</span> <span class="attr">Random</span> <span class="attr">Number</span> <span class="attr">Generator</span> <span class="attr">in</span> <span class="attr">RSA</span> <span class="attr">CryptoJ</span> <span class="attr">from</span> <span class="attr">ECDRBG128</span> <span class="attr">to</span> <span class="attr">HMACDRBG.</span> <span class="attr">To</span> <span class="attr">disable</span> <span class="attr">this</span> <span class="attr">change</span>, <span class="attr">specify</span> <span class="attr">-Dweblogic.security.allowCryptoJDefaultPRNG</span>=<span class="string">true.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:40</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Info</span>&gt;</span> <span class="tag">&lt;<span class="name">WebLogicServer</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-000377</span>&gt;</span> <span class="tag">&lt;<span class="name">Starting</span> <span class="attr">WebLogic</span> <span class="attr">Server</span> <span class="attr">with</span> <span class="attr">Java</span> <span class="attr">HotSpot</span>(<span class="attr">TM</span>) <span class="attr">64-Bit</span> <span class="attr">Server</span> <span class="attr">VM</span> <span class="attr">Version</span> <span class="attr">25.162-b12</span> <span class="attr">from</span> <span class="attr">Oracle</span> <span class="attr">Corporation.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:40</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Info</span>&gt;</span> <span class="tag">&lt;<span class="name">RCM</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-2165021</span>&gt;</span> <span class="tag">&lt;<span class="name">"ResourceManagement"</span> <span class="attr">is</span> <span class="attr">not</span> <span class="attr">enabled</span> <span class="attr">in</span> <span class="attr">this</span> <span class="attr">JVM.</span> <span class="attr">Enable</span> "<span class="attr">ResourceManagement</span>" <span class="attr">to</span> <span class="attr">use</span> <span class="attr">the</span> <span class="attr">WebLogic</span> <span class="attr">Server</span> "<span class="attr">Resource</span> <span class="attr">Consumption</span> <span class="attr">Management</span>" <span class="attr">feature.</span> <span class="attr">To</span> <span class="attr">enable</span> "<span class="attr">ResourceManagement</span>", <span class="attr">you</span> <span class="attr">must</span> <span class="attr">specify</span> <span class="attr">the</span> <span class="attr">following</span> <span class="attr">JVM</span> <span class="attr">options</span> <span class="attr">in</span> <span class="attr">the</span> <span class="attr">WebLogic</span> <span class="attr">Server</span> <span class="attr">instance</span> <span class="attr">in</span> <span class="attr">which</span> <span class="attr">the</span> <span class="attr">JVM</span> <span class="attr">runs:</span> <span class="attr">-XX:</span>+<span class="attr">UnlockCommercialFeatures</span> <span class="attr">-XX:</span>+<span class="attr">ResourceManagement.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:40</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Info</span>&gt;</span> <span class="tag">&lt;<span class="name">Management</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-141107</span>&gt;</span> <span class="tag">&lt;<span class="name">Version:</span> <span class="attr">WebLogic</span> <span class="attr">Server</span> <span class="attr">12.2.1.3.0</span> <span class="attr">Thu</span> <span class="attr">Aug</span> <span class="attr">17</span> <span class="attr">13:39:49</span> <span class="attr">PDT</span> <span class="attr">2017</span> <span class="attr">1882952</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:42</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">WebLogicServer</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-000365</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span> <span class="attr">state</span> <span class="attr">changed</span> <span class="attr">to</span> <span class="attr">STARTING.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:42</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Info</span>&gt;</span> <span class="tag">&lt;<span class="name">WorkManager</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002900</span>&gt;</span> <span class="tag">&lt;<span class="name">Initializing</span> <span class="attr">self-tuning</span> <span class="attr">thread</span> <span class="attr">pool.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:42</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Info</span>&gt;</span> <span class="tag">&lt;<span class="name">WorkManager</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002942</span>&gt;</span> <span class="tag">&lt;<span class="name">CMM</span> <span class="attr">memory</span> <span class="attr">level</span> <span class="attr">becomes</span> <span class="attr">0.</span> <span class="attr">Setting</span> <span class="attr">standby</span> <span class="attr">thread</span> <span class="attr">pool</span> <span class="attr">size</span> <span class="attr">to</span> <span class="attr">256.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:43</span>,<span class="attr">671</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Log</span> <span class="attr">Management</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-170019</span>&gt;</span> <span class="tag">&lt;<span class="name">The</span> <span class="attr">server</span> <span class="attr">log</span> <span class="attr">file</span> <span class="attr">weblogic.logging.FileStreamHandler</span> <span class="attr">instance</span>=<span class="string">1128909723</span></span></span><br><span class="line"><span class="tag"><span class="attr">Current</span> <span class="attr">log</span> <span class="attr">file</span>=<span class="string">D:\weblogic\user_projects\domains\base_domain\servers\AdminServer\logs\AdminServer.log</span></span></span><br><span class="line"><span class="tag"><span class="attr">Rotation</span> <span class="attr">dir</span>=<span class="string">D:\weblogic\user_projects\domains\base_domain\servers\AdminServer\logs</span></span></span><br><span class="line"><span class="tag"> <span class="attr">is</span> <span class="attr">opened.</span> <span class="attr">All</span> <span class="attr">server</span> <span class="attr">side</span> <span class="attr">log</span> <span class="attr">events</span> <span class="attr">will</span> <span class="attr">be</span> <span class="attr">written</span> <span class="attr">to</span> <span class="attr">this</span> <span class="attr">file.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:43</span>,<span class="attr">934</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Security</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-090946</span>&gt;</span> <span class="tag">&lt;<span class="name">Security</span> <span class="attr">pre-initializing</span> <span class="attr">using</span> <span class="attr">security</span> <span class="attr">realm:</span> <span class="attr">myrealm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:44</span>,<span class="attr">623</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Security</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-090947</span>&gt;</span> <span class="tag">&lt;<span class="name">Security</span> <span class="attr">post-initializing</span> <span class="attr">using</span> <span class="attr">security</span> <span class="attr">realm:</span> <span class="attr">myrealm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:45</span>,<span class="attr">860</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Security</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-090082</span>&gt;</span> <span class="tag">&lt;<span class="name">Security</span> <span class="attr">initialized</span> <span class="attr">using</span> <span class="attr">administrative</span> <span class="attr">security</span> <span class="attr">realm:</span> <span class="attr">myrealm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:47</span>,<span class="attr">421</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">JMX</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-149512</span>&gt;</span> <span class="tag">&lt;<span class="name">JMX</span> <span class="attr">Connector</span> <span class="attr">Server</span> <span class="attr">started</span> <span class="attr">at</span> <span class="attr">service:jmx:iiop:</span>//<span class="attr">192.168.79.1:7001</span>/<span class="attr">jndi</span>/<span class="attr">weblogic.management.mbeanservers.domainruntime.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:47</span>,<span class="attr">421</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">JMX</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-149512</span>&gt;</span> <span class="tag">&lt;<span class="name">JMX</span> <span class="attr">Connector</span> <span class="attr">Server</span> <span class="attr">started</span> <span class="attr">at</span> <span class="attr">service:jmx:iiop:</span>//<span class="attr">192.168.79.1:7001</span>/<span class="attr">jndi</span>/<span class="attr">weblogic.management.mbeanservers.runtime.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:47</span>,<span class="attr">442</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">JMX</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-149512</span>&gt;</span> <span class="tag">&lt;<span class="name">JMX</span> <span class="attr">Connector</span> <span class="attr">Server</span> <span class="attr">started</span> <span class="attr">at</span> <span class="attr">service:jmx:iiop:</span>//<span class="attr">192.168.79.1:7001</span>/<span class="attr">jndi</span>/<span class="attr">weblogic.management.mbeanservers.edit.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:48</span>,<span class="attr">496</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">WebLogicServer</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-000365</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span> <span class="attr">state</span> <span class="attr">changed</span> <span class="attr">to</span> <span class="attr">STANDBY.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:48</span>,<span class="attr">499</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">WebLogicServer</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-000365</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span> <span class="attr">state</span> <span class="attr">changed</span> <span class="attr">to</span> <span class="attr">STARTING.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:48</span>,<span class="attr">561</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Log</span> <span class="attr">Management</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-170036</span>&gt;</span> <span class="tag">&lt;<span class="name">The</span> <span class="attr">Logging</span> <span class="attr">monitoring</span> <span class="attr">service</span> <span class="attr">timer</span> <span class="attr">has</span> <span class="attr">started</span> <span class="attr">to</span> <span class="attr">check</span> <span class="attr">for</span> <span class="attr">logged</span> <span class="attr">message</span> <span class="attr">counts</span> <span class="attr">every</span> <span class="attr">30</span> <span class="attr">seconds.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:48</span>,<span class="attr">956</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Log</span> <span class="attr">Management</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-170027</span>&gt;</span> <span class="tag">&lt;<span class="name">The</span> <span class="attr">server</span> <span class="attr">has</span> <span class="attr">successfully</span> <span class="attr">established</span> <span class="attr">a</span> <span class="attr">connection</span> <span class="attr">with</span> <span class="attr">the</span> <span class="attr">Domain</span> <span class="attr">level</span> <span class="attr">Diagnostic</span> <span class="attr">Service.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">075</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">WebLogicServer</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-000365</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span> <span class="attr">state</span> <span class="attr">changed</span> <span class="attr">to</span> <span class="attr">ADMIN.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">160</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">WebLogicServer</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-000365</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span> <span class="attr">state</span> <span class="attr">changed</span> <span class="attr">to</span> <span class="attr">RESUMING.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">224</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002613</span>&gt;</span> <span class="tag">&lt;<span class="name">Channel</span> "<span class="attr">Default</span>[<span class="attr">3</span>]" <span class="attr">is</span> <span class="attr">now</span> <span class="attr">listening</span> <span class="attr">on</span> <span class="attr">127.0.0.1:7001</span> <span class="attr">for</span> <span class="attr">protocols</span> <span class="attr">iiop</span>, <span class="attr">t3</span>, <span class="attr">ldap</span>, <span class="attr">snmp</span>, <span class="attr">http.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">228</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Warning</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002611</span>&gt;</span> <span class="tag">&lt;<span class="name">The</span> <span class="attr">hostname</span> "<span class="attr">maxp</span>", <span class="attr">maps</span> <span class="attr">to</span> <span class="attr">multiple</span> <span class="attr">IP</span> <span class="attr">addresses:</span> <span class="attr">192.168.79.1</span>, <span class="attr">192.168.188.1</span>, <span class="attr">192.168.0.108</span>, <span class="attr">fe80:0:0:0:21f7:5469:c7e4:52e7</span>%<span class="attr">5</span>, <span class="attr">fe80:0:0:0:e0b4:e568:fb86:f32b</span>%<span class="attr">8</span>, <span class="attr">fe80:0:0:0:f0f6:4548:7f51:1933</span>%<span class="attr">13.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">232</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002613</span>&gt;</span> <span class="tag">&lt;<span class="name">Channel</span> "<span class="attr">Default</span>" <span class="attr">is</span> <span class="attr">now</span> <span class="attr">listening</span> <span class="attr">on</span> <span class="attr">192.168.79.1:7001</span> <span class="attr">for</span> <span class="attr">protocols</span> <span class="attr">iiop</span>, <span class="attr">t3</span>, <span class="attr">ldap</span>, <span class="attr">snmp</span>, <span class="attr">http.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">234</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002613</span>&gt;</span> <span class="tag">&lt;<span class="name">Channel</span> "<span class="attr">Default</span>[<span class="attr">1</span>]" <span class="attr">is</span> <span class="attr">now</span> <span class="attr">listening</span> <span class="attr">on</span> <span class="attr">192.168.188.1:7001</span> <span class="attr">for</span> <span class="attr">protocols</span> <span class="attr">iiop</span>, <span class="attr">t3</span>, <span class="attr">ldap</span>, <span class="attr">snmp</span>, <span class="attr">http.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">240</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002613</span>&gt;</span> <span class="tag">&lt;<span class="name">Channel</span> "<span class="attr">Default</span>[<span class="attr">2</span>]" <span class="attr">is</span> <span class="attr">now</span> <span class="attr">listening</span> <span class="attr">on</span> <span class="attr">192.168.0.108:7001</span> <span class="attr">for</span> <span class="attr">protocols</span> <span class="attr">iiop</span>, <span class="attr">t3</span>, <span class="attr">ldap</span>, <span class="attr">snmp</span>, <span class="attr">http.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">243</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">WebLogicServer</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-000331</span>&gt;</span> <span class="tag">&lt;<span class="name">Started</span> <span class="attr">the</span> <span class="attr">WebLogic</span> <span class="attr">Server</span> <span class="attr">Administration</span> <span class="attr">Server</span> "<span class="attr">AdminServer</span>" <span class="attr">for</span> <span class="attr">domain</span> "<span class="attr">base_domain</span>" <span class="attr">running</span> <span class="attr">in</span> <span class="attr">development</span> <span class="attr">mode.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">244</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002613</span>&gt;</span> <span class="tag">&lt;<span class="name">Channel</span> "<span class="attr">Default</span>[<span class="attr">4</span>]" <span class="attr">is</span> <span class="attr">now</span> <span class="attr">listening</span> <span class="attr">on</span> <span class="attr">0:0:0:0:0:0:0:1:7001</span> <span class="attr">for</span> <span class="attr">protocols</span> <span class="attr">iiop</span>, <span class="attr">t3</span>, <span class="attr">ldap</span>, <span class="attr">snmp</span>, <span class="attr">http.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">245</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002613</span>&gt;</span> <span class="tag">&lt;<span class="name">Channel</span> "<span class="attr">Default</span>[<span class="attr">3</span>]" <span class="attr">is</span> <span class="attr">now</span> <span class="attr">listening</span> <span class="attr">on</span> <span class="attr">127.0.0.1:7001</span> <span class="attr">for</span> <span class="attr">protocols</span> <span class="attr">iiop</span>, <span class="attr">t3</span>, <span class="attr">ldap</span>, <span class="attr">snmp</span>, <span class="attr">http.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">246</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002613</span>&gt;</span> <span class="tag">&lt;<span class="name">Channel</span> "<span class="attr">Default</span>" <span class="attr">is</span> <span class="attr">now</span> <span class="attr">listening</span> <span class="attr">on</span> <span class="attr">192.168.79.1:7001</span> <span class="attr">for</span> <span class="attr">protocols</span> <span class="attr">iiop</span>, <span class="attr">t3</span>, <span class="attr">ldap</span>, <span class="attr">snmp</span>, <span class="attr">http.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">247</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">WebLogicServer</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-000360</span>&gt;</span> <span class="tag">&lt;<span class="name">The</span> <span class="attr">server</span> <span class="attr">started</span> <span class="attr">in</span> <span class="attr">RUNNING</span> <span class="attr">mode.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">248</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002613</span>&gt;</span> <span class="tag">&lt;<span class="name">Channel</span> "<span class="attr">Default</span>[<span class="attr">1</span>]" <span class="attr">is</span> <span class="attr">now</span> <span class="attr">listening</span> <span class="attr">on</span> <span class="attr">192.168.188.1:7001</span> <span class="attr">for</span> <span class="attr">protocols</span> <span class="attr">iiop</span>, <span class="attr">t3</span>, <span class="attr">ldap</span>, <span class="attr">snmp</span>, <span class="attr">http.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">251</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002613</span>&gt;</span> <span class="tag">&lt;<span class="name">Channel</span> "<span class="attr">Default</span>[<span class="attr">2</span>]" <span class="attr">is</span> <span class="attr">now</span> <span class="attr">listening</span> <span class="attr">on</span> <span class="attr">192.168.0.108:7001</span> <span class="attr">for</span> <span class="attr">protocols</span> <span class="attr">iiop</span>, <span class="attr">t3</span>, <span class="attr">ldap</span>, <span class="attr">snmp</span>, <span class="attr">http.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">254</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-002613</span>&gt;</span> <span class="tag">&lt;<span class="name">Channel</span> "<span class="attr">Default</span>[<span class="attr">4</span>]" <span class="attr">is</span> <span class="attr">now</span> <span class="attr">listening</span> <span class="attr">on</span> <span class="attr">0:0:0:0:0:0:0:1:7001</span> <span class="attr">for</span> <span class="attr">protocols</span> <span class="attr">iiop</span>, <span class="attr">t3</span>, <span class="attr">ldap</span>, <span class="attr">snmp</span>, <span class="attr">http.</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Jun</span> <span class="attr">21</span>, <span class="attr">2018</span> <span class="attr">10:18:49</span>,<span class="attr">266</span> <span class="attr">AM</span> <span class="attr">CST</span>&gt;</span> <span class="tag">&lt;<span class="name">Notice</span>&gt;</span> <span class="tag">&lt;<span class="name">WebLogicServer</span>&gt;</span> <span class="tag">&lt;<span class="name">BEA-000365</span>&gt;</span> <span class="tag">&lt;<span class="name">Server</span> <span class="attr">state</span> <span class="attr">changed</span> <span class="attr">to</span> <span class="attr">RUNNING.</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动浏览器访问weblogic控制台<a href="http://IP:7001/console，用户名默认是weblogic，密码是创建域时设置的。" target="_blank" rel="noopener">http://IP:7001/console，用户名默认是weblogic，密码是创建域时设置的。</a></li></ul><h2 id="IDEA中如何配置weblogic"><a href="#IDEA中如何配置weblogic" class="headerlink" title="IDEA中如何配置weblogic"></a>IDEA中如何配置weblogic</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-21/37949341.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weblogic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5.idea-remote-tomcat</title>
      <link href="/2017/06/20/idea-5/"/>
      <url>/2017/06/20/idea-5/</url>
      <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>远程电脑,linux-centos7，ip:192.168.29.128，jdk1.8.0_131，apache-tomcat-8.5.31</li><li>本机电脑,win10，ip:192.168.0.108，jdk1.8.0_162，IntelliJ IDEA 2018.1</li></ul><h2 id="远程tomcat设置"><a href="#远程tomcat设置" class="headerlink" title="远程tomcat设置"></a>远程tomcat设置</h2><h3 id="编辑catalina-sh"><a href="#编辑catalina-sh" class="headerlink" title="编辑catalina.sh"></a>编辑catalina.sh</h3><ul><li>将下面这代码，加到catalina.sh的最前面</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">JAVA_OPTS</span>=<span class="string">'-agentlib:jdwp=transport=dt_socket,address=44444,suspend=n,server=y'</span></span><br></pre></td></tr></table></figure><ul><li>检查哈44444端口是否占用，占用了就换一个端口</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="number">192</span> bin]# netstat -anp | grep <span class="number">44444</span></span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">44444</span>           <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN      <span class="number">4110</span>/java</span><br></pre></td></tr></table></figure><ul><li>将要部署的war包放好，就可以启动了tomcat</li></ul><h2 id="本地idea设置"><a href="#本地idea设置" class="headerlink" title="本地idea设置"></a>本地idea设置</h2><ul><li><p>idea里面打开刚才部署的war的源代码</p></li><li><p>添加Tomcat Server Remote</p></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/9944404.jpg" alt=""></p><ul><li>设置远程电脑部署应用的信息</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/57155993.jpg" alt=""></p><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/89409778.jpg" alt=""></p><h2 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h2><ul><li>点击Debug运行按钮，出现如下就可以</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/56631227.jpg" alt=""> </p><ul><li>接下来就可以在源码里打断点了，然后访问部署在远程电脑应用进行远程调试</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.win10-remote desktop</title>
      <link href="/2017/06/20/win10-1/"/>
      <url>/2017/06/20/win10-1/</url>
      <content type="html"><![CDATA[<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><ul><li>家里局域网</li><li>台式电脑(win10 pro)-ip:192.168.0.106,默认账户和密码chilam/chilam，充当远程电脑</li><li>笔记本-ip:192.168.0.108</li></ul><h2 id="远程电脑设置"><a href="#远程电脑设置" class="headerlink" title="远程电脑设置"></a>远程电脑设置</h2><ul><li>【Win+R】快捷键打开Run框，输入【control】打开控制面板</li><li>点击【System and Security】-【System】-【Remote Settings】-【Remote】</li><li>点击【Select Users】会发现【chilam already has access】</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/91621760.jpg" alt=""></p><h2 id="连接电脑设置"><a href="#连接电脑设置" class="headerlink" title="连接电脑设置"></a>连接电脑设置</h2><ul><li>【Win+R】快捷键打开Run框，输入【mstsc】打开远程桌面连接，输入远程主机IP</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/7472821.jpg" alt=""></p><ul><li>输入密码chilam</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/81815072.jpg" alt=""></p><ul><li>凭证信息，点击【YES】</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/63910570.jpg" alt=""></p><ul><li>就连进去了</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/9920160.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> win10 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.mysql-install</title>
      <link href="/2017/06/20/mysql-1/"/>
      <url>/2017/06/20/mysql-1/</url>
      <content type="html"><![CDATA[<h2 id="安装的时候遇见的错误"><a href="#安装的时候遇见的错误" class="headerlink" title="安装的时候遇见的错误"></a>安装的时候遇见的错误</h2><p><a href="https://blog.csdn.net/xx_star1204/article/details/76762175" target="_blank" rel="noopener">https://blog.csdn.net/xx_star1204/article/details/76762175</a></p><h2 id="允许root用户远程访问"><a href="#允许root用户远程访问" class="headerlink" title="允许root用户远程访问"></a>允许root用户远程访问</h2><ul><li><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘123456’ WITH GRANT OPTION;</p></li><li><p>FLUSH PRIVILEGES;</p></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.maven</title>
      <link href="/2017/06/15/maven-1/"/>
      <url>/2017/06/15/maven-1/</url>
      <content type="html"><![CDATA[<h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><p>Apache Maven is a <strong>software project management and comprehension tool</strong>.<br>Based on the concept of a <strong>project object model (POM)</strong>,<br>Maven can manage <strong>a project’s build, reporting and documentation</strong> from a central piece of information.</p><h2 id="Download-Maven"><a href="#Download-Maven" class="headerlink" title="Download Maven"></a><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">Download Maven</a></h2><h3 id="System-Requirements"><a href="#System-Requirements" class="headerlink" title="System Requirements"></a>System Requirements</h3><ul><li>JDK 1.7 or above</li></ul><h2 id="Installing-Apache-Maven"><a href="#Installing-Apache-Maven" class="headerlink" title="Installing Apache Maven"></a>Installing Apache Maven</h2><ul><li>确保配置<strong>JAVA_HOME</strong>环境变量</li><li>解压Maven安装文件，添加bin目录到系统环境PATH，以后就可以到处执行<strong>mvn</strong>命令（最优秀的是%MAVEN_HOME%\bin）</li><li>检查安装<strong>mvn -v</strong> </li></ul><h2 id="Configuring-Apache-Maven"><a href="#Configuring-Apache-Maven" class="headerlink" title="Configuring Apache Maven"></a>Configuring Apache Maven</h2><ul><li>MAVEN_OPTS环境变量，设置JVM的内存大小</li></ul><p><img src="https://ooo.0o0.ooo/2017/06/15/5942324fa3477.png" alt="MAVEN_OPTS"></p><h2 id="Maven入门"><a href="#Maven入门" class="headerlink" title="Maven入门"></a>Maven入门</h2><h3 id="编写POM-xml文件"><a href="#编写POM-xml文件" class="headerlink" title="编写POM.xml文件"></a>编写POM.xml文件</h3><p>创建一个test的文件夹,创建pom.xml文件，并粘贴如下显示内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Quick Start Archetype<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>project</strong>元素是pom.xml的根元素，其中声明命名空间以及xsd元素</li><li><strong>modelVersion</strong>元素只能是4.0.0</li><li><strong>groupId</strong>元素定义项目属于哪个组，一般为域名的倒写</li><li><strong>artifactId</strong>元素定义当前项目在组中的唯一ID,一般为项目名称</li><li><strong>version</strong>元素定义当前项目的版本号</li><li><em>name</em>元素更为友好的项目名称(中文名称)</li><li><em>url</em>元素一般是该项目发布网站地址</li></ul><h3 id="编写主代码"><a href="#编写主代码" class="headerlink" title="编写主代码"></a>编写主代码</h3><ul><li>默认情况下,Maven约定的项目代码位于<strong>src/main/java</strong>,所以首先建立目录</li><li>默认情况下，创建的Java类的包名应该是<strong>groupId.artifactId</strong>(com.mycompany.app.myapp)</li></ul><h3 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><ul><li>默认情况下，Maven约定的测试代码位于<strong>src/test/java</strong></li><li>默认情况下，创建的包名与要测试的Java代码类的包名一致</li></ul><h3 id="打包与运行"><a href="#打包与运行" class="headerlink" title="打包与运行"></a>打包与运行</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean <span class="class"><span class="keyword">package</span></span></span><br></pre></td></tr></table></figure><h3 id="使用IDEA和工具创建Maven项目"><a href="#使用IDEA和工具创建Maven项目" class="headerlink" title="使用IDEA和工具创建Maven项目"></a>使用IDEA和工具创建Maven项目</h3><h3 id="Maven常见的约定目录"><a href="#Maven常见的约定目录" class="headerlink" title="Maven常见的约定目录"></a>Maven常见的约定目录</h3><ul><li><strong>src/main/java</strong>存放Java代码</li><li><strong>src/test/java</strong>存放测试代码</li><li><strong>src/main/resources</strong>存放项目资源文件，一般为配置文件(spring,hibernate等)</li><li><strong>src/test/resources</strong>存放项目测试资源文件</li></ul><h2 id="坐标-Coordinate"><a href="#坐标-Coordinate" class="headerlink" title="坐标(Coordinate)"></a>坐标(Coordinate)</h2><p>怎么样引用第三方的Jar包或war包，相对于传统的复制粘贴到lib目录下，在使用maven的时候可以使用坐标来引入第三方的jar或war</p><h3 id="坐标的基本元素"><a href="#坐标的基本元素" class="headerlink" title="坐标的基本元素"></a>坐标的基本元素</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.chilam<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>groupId</strong> 定义当前Maven项目隶属的实际项目，一般为域名的倒写</li><li><strong>artifactId</strong> 定义当前实际项目中的一个Maven项目(模块)</li><li><strong>version</strong> 定义Maven项目所处的当前版本</li><li><strong>packaging</strong> 定义Maven项目的打包方式，当不定义的时候，默认值是jar</li></ul><h3 id="依赖的基本元素"><a href="#依赖的基本元素" class="headerlink" title="依赖的基本元素"></a>依赖的基本元素</h3><p>依赖可以简单理解为就是我们项目开发中要引用的第三方的jar或war包，下面代码就是怎么引入一个junit的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>dependency</strong> 定义一个基本的依赖(三方jar或war包)</li><li><strong>groupId，artifactId，version</strong>为坐标的基本依赖</li><li><strong>type</strong> 依赖的类型，对应坐标的packaging元素，不定义的时候，该元素的默认值是jar,<strong>切记依赖是jar or war</strong></li><li><strong>scope</strong> 依赖的范围（见下一小节）</li></ul><h3 id="依赖的范围"><a href="#依赖的范围" class="headerlink" title="依赖的范围"></a>依赖的范围</h3><p>简单的理解依赖范围，就是我们开发的项目的时候，对于的我们的功能代码，用到spring-core.xx.jar的类，如果不引用该jar包，编译的<br>时候就会出错，这种就是常说的编译的classpath,还有针对的功能的测试代码，只是作为测试使用，针对JUNIT的jar包就是属于测试classpath,</p><ul><li><strong>compile</strong>编译依赖范围，如果没有指定，默认会使用该依赖。简答的理解打包的时候会打包到代码里。</li><li><strong>test</strong>测试依赖范围，只是针对测试代码有效，简单的理解就是不会打包到发布的包里，典型的例子就是JUNIT。</li><li><strong>provided</strong>已提供的依赖范围，对编译和测试有效，但是对于运行时无效，典型的例子就是servelt-api，运行时容器已经提供。</li><li><strong>runtime</strong>运行时依赖范围，对测试和运行时有效，对编译无效，典型的是JDBC驱动，只有在运行和测试的时候才需要JDBC驱动的实现类。</li></ul><h3 id="Maven本地仓库-依赖存储"><a href="#Maven本地仓库-依赖存储" class="headerlink" title="Maven本地仓库-依赖存储"></a>Maven本地仓库-依赖存储</h3><ul><li>默认配置</li></ul><p>我们配置的依赖(第三方的jar)到底保存在什么地方了，区别以前的java工程，第三方jar包都是放在项目工程的lib下的。<br>在maven的安装路径下<strong>${MAVNE_HOME}\conf\settings.xml</strong>是maven的配置文件。文件中<strong>localRepository</strong>元素用于定义<br>本地仓库位置，如果是新安装的maven的可以看见如下代码：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- localRepository</span></span></span><br><span class="line"><span class="xml">| The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="xml">|</span></span><br><span class="line"><span class="xml">| Default: $</span><span class="template-variable">&#123;user.home&#125;</span><span class="xml">/.m2/repository</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line"><span class="xml"># 默认的仓库路径在用户目录下/.me/repositroy</span></span><br></pre></td></tr></table></figure></p><ul><li>自定义配置本地仓库地址<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>E:\maven_repos\<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="传递性依赖"><a href="#传递性依赖" class="headerlink" title="传递性依赖"></a>传递性依赖</h3><p>简单的理解就是，一个A项目依赖spring-core.xxx.jar，而spring-core.jar又依赖commons-logging.jar,此时相对于A项目就传递依赖<br>commons-logging.jar</p><h3 id="依赖范围影响传递性依赖"><a href="#依赖范围影响传递性依赖" class="headerlink" title="依赖范围影响传递性依赖"></a>依赖范围影响传递性依赖</h3><table><thead><tr><th style="text-align:center">依赖范围</th><th style="text-align:center">compile</th><th style="text-align:center">test</th><th style="text-align:center">provided</th><th style="text-align:center">runtime</th></tr></thead><tbody><tr><td style="text-align:center">compile</td><td style="text-align:center">compile</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">runtime</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center">test</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">test</td></tr><tr><td style="text-align:center">provided</td><td style="text-align:center">provided</td><td style="text-align:center">-</td><td style="text-align:center">provided</td><td style="text-align:center">provided</td></tr><tr><td style="text-align:center">runtime</td><td style="text-align:center">runtime</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">runtime</td></tr></tbody></table><h3 id="依赖调解"><a href="#依赖调解" class="headerlink" title="依赖调解"></a>依赖调解</h3><ul><li>路径最近者优先，A-&gt;B-&gt;C-&gt;D(1.0), A-&gt;E-&gt;D(2.0),最终D(2.0)会被解析使用。</li><li>第一声明优先，路径相同情况下，在POM.xml中定义的先后顺序在前面的会被解析使用。</li></ul><h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><p>在很多的时候，传递性依赖会隐式引入很多依赖，这样极大的简化了项目管理，但是有些时候会带来其他的影响。<br>排除依赖主要就是排除传递性依赖在依赖定义的时候使用<strong>exclusions</strong>元素，其中可以包含多个<strong>exclusion</strong>元素<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Maven常量定义"><a href="#Maven常量定义" class="headerlink" title="Maven常量定义"></a>Maven常量定义</h3><p>在我们项目中遇到过这种情况，我们引入spring一些列的jar包，其中<strong>version</strong>元素是具体的版本号，很多时候升级的时候需要手动去替换<br>版本号。在这里提供定义Maven常量的方式，方便引入的这些常量值。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span><span class="comment">&lt;!-- 自定义spring版本号常量--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;spring.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>其实maven中有很内置的常量可以供使用，后面会依次介绍。</p></blockquote><h3 id="优化依赖"><a href="#优化依赖" class="headerlink" title="优化依赖"></a>优化依赖</h3><ul><li>查看依赖列表</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 执行 <span class="selector-tag">mvn</span> <span class="selector-tag">dependency</span><span class="selector-pseudo">:list</span> 出现如下信息(局部)</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[INFO]</span> <span class="selector-tag">The</span> <span class="selector-tag">following</span> <span class="selector-tag">files</span> <span class="selector-tag">have</span> <span class="selector-tag">been</span> <span class="selector-tag">resolved</span>:</span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">commons-logging</span><span class="selector-pseudo">:commons-logging</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.2</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-core</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.7.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-aop</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.7.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-beans</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.7.RELEASE</span><span class="selector-pseudo">:compile</span></span><br></pre></td></tr></table></figure><ul><li>查看依赖树形结构</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 执行 <span class="selector-tag">mvn</span> <span class="selector-tag">dependency</span><span class="selector-pseudo">:tree</span> 出现如下信息(局部)</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[INFO]</span> <span class="selector-tag">me</span><span class="selector-class">.chilam</span><span class="selector-pseudo">:test-maven</span><span class="selector-pseudo">:war</span><span class="selector-pseudo">:1.0-SNAPSHOT</span></span><br><span class="line"><span class="selector-attr">[INFO]</span> +<span class="selector-tag">-</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-core</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.7.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span> |  \<span class="selector-tag">-</span> <span class="selector-tag">commons-logging</span><span class="selector-pseudo">:commons-logging</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:1.2</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span> \<span class="selector-tag">-</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-aop</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.7.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[INFO]</span>    \<span class="selector-tag">-</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-beans</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.7.RELEASE</span><span class="selector-pseudo">:compile</span></span><br></pre></td></tr></table></figure><ul><li>分析依赖</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 执行 <span class="selector-tag">mvn</span> <span class="selector-tag">dependency</span><span class="selector-pseudo">:analyze</span> 出现如下信息(局部)</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[WARNING]</span> <span class="selector-tag">Unused</span> <span class="selector-tag">declared</span> <span class="selector-tag">dependencies</span> <span class="selector-tag">found</span>:</span><br><span class="line"><span class="selector-attr">[WARNING]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-core</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.7.RELEASE</span><span class="selector-pseudo">:compile</span></span><br><span class="line"><span class="selector-attr">[WARNING]</span>    <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-pseudo">:spring-aop</span><span class="selector-pseudo">:jar</span><span class="selector-pseudo">:4.3.7.RELEASE</span><span class="selector-pseudo">:compile</span></span><br></pre></td></tr></table></figure><h2 id="生命周期和插件"><a href="#生命周期和插件" class="headerlink" title="生命周期和插件"></a>生命周期和插件</h2><h3 id="三套生命周期"><a href="#三套生命周期" class="headerlink" title="三套生命周期"></a>三套生命周期</h3><p>maven的生命周期就是为了对所有的构建过程进行抽象和统一。这个生命周期包含了项目清理，初始化，编译，测试，打包，集成测试，验证，<br>部署和站点生成等几乎所有构建的步骤。</p><h4 id="clean生命周期"><a href="#clean生命周期" class="headerlink" title="clean生命周期"></a>clean生命周期</h4><ul><li>pre-clean 执行清理前需要执行的一些工作</li><li>clean 清理上一次构建产生的文件</li><li>post-clean 执行清理后需要执行的一些工作</li></ul><h4 id="default生命周期"><a href="#default生命周期" class="headerlink" title="default生命周期"></a>default生命周期</h4><ul><li>validate</li><li>initialize</li><li>generate-sources</li><li>process-sources 处理项目主资源文件，一般来说，是对src/main/resources目录内容，复制到项目输出的主classpath目录中。</li><li>generate-resources</li><li>process-resources</li><li>compile 编译项目主代码，一般来说就是编译src/main/java到主classpath目录中</li><li>process-classes</li><li>generate-test-sources</li><li>process-test-sources 处理项目测试资源文件</li><li>generate-test-resources</li><li>process-test-resources</li><li>test-compile</li><li>process-test-classes</li><li>test 使用单元测试框架进行测试</li><li>prepare-package</li><li>package 打包</li><li>pre-integration-test</li><li>integration-test</li><li>post-integration-test</li><li>verify</li><li>install 将包安装到本地仓库</li><li>deploy 将包复制到远程仓库</li></ul><h4 id="site生命周期"><a href="#site生命周期" class="headerlink" title="site生命周期"></a>site生命周期</h4><p>略</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>在这之前，我们知道，maven的核心只是抽象了生命周期，而具体的任务是由插件来完成的，而关于插件定义使用<strong>plugin</strong>元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="插件目标-Plugin-Goals"><a href="#插件目标-Plugin-Goals" class="headerlink" title="插件目标(Plugin Goals)"></a>插件目标(Plugin Goals)</h4><p>前面我们了解到<strong>mvn dependency:lsit</strong>分析依赖，其实是利用maven-dependency-plugin插件来完成的</p><ul><li><strong>mvn</strong> maven执行的命令</li><li><strong>dependency</strong>插件的前缀</li><li><strong>list</strong>插件的目标</li></ul><h4 id="maven内置插件绑定"><a href="#maven内置插件绑定" class="headerlink" title="maven内置插件绑定"></a>maven内置插件绑定</h4><p>maven为了简化使用，在很多核心的生命周期已经内置绑定了一些插件</p><table><thead><tr><th style="text-align:center">生命周期阶段</th><th style="text-align:center">插件目标</th><th style="text-align:center">执行任务</th></tr></thead><tbody><tr><td style="text-align:center">pre-clean,clean,post-clean</td><td style="text-align:center">maven-clean-plugin:clean</td><td style="text-align:center">清理项目</td></tr><tr><td style="text-align:center">pre-site,site,post-site</td><td style="text-align:center">maven-site-plugin:site</td><td style="text-align:center">生成站点</td></tr><tr><td style="text-align:center">site-deploy</td><td style="text-align:center">maven-site-plugin:deploy</td><td style="text-align:center">部署站点</td></tr><tr><td style="text-align:center">process-resources</td><td style="text-align:center">maven-resources-plugin:resources</td><td style="text-align:center">复制主资源文件到主输出目录</td></tr><tr><td style="text-align:center">compile</td><td style="text-align:center">maven-compile-plugin:compile</td><td style="text-align:center">编译主代码到主输出目录</td></tr><tr><td style="text-align:center">process-test-resources</td><td style="text-align:center">maven-resources-plugin:testReources</td><td style="text-align:center">复制测试资源文件到测试输出目录</td></tr><tr><td style="text-align:center">test-compile</td><td style="text-align:center">maven-compiler-plugin:testCompile</td><td style="text-align:center">编译测试代码到主输出目录</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center">maven-surefire-plugin:test</td><td style="text-align:center">执行测试用例</td></tr><tr><td style="text-align:center">package</td><td style="text-align:center">maven-jar-plugin:jar</td><td style="text-align:center">创建项目jar包</td></tr><tr><td style="text-align:center">install</td><td style="text-align:center">maven-install-plugin:install</td><td style="text-align:center">将项目输出构件安装到本地仓库</td></tr><tr><td style="text-align:center">deploy</td><td style="text-align:center">maven-deploy-plugin:deploy</td><td style="text-align:center">将项目输出构建部署远程仓库</td></tr></tbody></table><h4 id="自定义绑定"><a href="#自定义绑定" class="headerlink" title="自定义绑定"></a>自定义绑定</h4><p>常见我们打包的时候，可以将java的源代码进行打包,如下配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-source<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span><span class="comment">&lt;!-- 绑定在packag生命周期--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span> <span class="comment">&lt;!-- source:jar-no-fork java源代码打包成sourece.jar --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h4><p>可以配置插件目标的参数，进一步调整插件目标所执行的任务，以满足项目的需求。</p><ul><li>设置不执行test</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>设置java默认编译环境为1.7</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="聚合和继承"><a href="#聚合和继承" class="headerlink" title="聚合和继承"></a>聚合和继承</h2><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>在现在项目分析中我们会对软件划分模块，便于思路清晰的分析代码。接下来就以其中一个例子来分析，做一个用户模块，通常我们会找MVC<br>的模式分为app(控制器层) domain(领域层包括Service,Po,Vo之类) websource(jsp，css,hrml,js之类的)，按照这样设计，在使用<br>maven的情况下，我们会首先建立一个聚合模块user，用于聚合分层的模块，大致示意如下结构。</p><p><img src="https://ooo.0o0.ooo/2017/06/22/594b700fc337e.png" alt=""></p><p>其中user为聚合模块，它的pom.xml如下所示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chilame.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 注意路径此时user-api和pom.xml是属于同级目录下 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-app<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-domain<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-websoource<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>聚合模块的packaging为pom</strong></li><li><strong>使用modules/module元素定义被聚合的元素，注意路径</strong></li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>对于上面的聚合模块user，而项目user-api,user-app,user-domain模块就可以理解为他的子孙模块，可以继承聚合模块，此时user-api的<br>pom.xml如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chilame.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>使用parent元素来声明聚合模块</strong></li><li><strong>再使用artifactId元素来定义自身名称，此时也就说明了当前模块user-api的groupId和version都是继承来自聚合模块</strong></li></ul><h4 id="可以被继承的POM元素"><a href="#可以被继承的POM元素" class="headerlink" title="可以被继承的POM元素"></a>可以被继承的POM元素</h4><table><thead><tr><th style="text-align:center">POM元素</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">groupId</td><td style="text-align:center">项目组ID，项目坐标核心元素</td></tr><tr><td style="text-align:center">version</td><td style="text-align:center">项目版本，项目坐标核心元素</td></tr><tr><td style="text-align:center">description</td><td style="text-align:center">项目描述信息</td></tr><tr><td style="text-align:center">organization</td><td style="text-align:center">项目的组织信息</td></tr><tr><td style="text-align:center">inceptionYear</td><td style="text-align:center">项目创始年份</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">项目URL地址</td></tr><tr><td style="text-align:center">developers</td><td style="text-align:center">项目的开发者信息</td></tr><tr><td style="text-align:center">contributors</td><td style="text-align:center">项目的贡献者信息</td></tr><tr><td style="text-align:center">distributionManagement</td><td style="text-align:center">项目的部署配置信息</td></tr><tr><td style="text-align:center">issueManagement</td><td style="text-align:center">项目的缺陷系统信息</td></tr><tr><td style="text-align:center">ciManagement</td><td style="text-align:center">项目持续集成信息</td></tr><tr><td style="text-align:center">scm</td><td style="text-align:center">项目版本控制信息</td></tr><tr><td style="text-align:center">mailingLists</td><td style="text-align:center">项目邮件列表</td></tr><tr><td style="text-align:center">properties</td><td style="text-align:center">自定义的maven属性</td></tr><tr><td style="text-align:center">dependencies</td><td style="text-align:center">项目的依赖</td></tr><tr><td style="text-align:center">dependencyManagement</td><td style="text-align:center">项目的依赖管理配置</td></tr><tr><td style="text-align:center">repositories</td><td style="text-align:center">项目仓库配置</td></tr><tr><td style="text-align:center">build</td><td style="text-align:center">项目的源码目录配置，输出目录配置，插件配置，插件管理配置等</td></tr><tr><td style="text-align:center">reporting</td><td style="text-align:center">包括项目的报告输出目录配置，报告插件配置等</td></tr></tbody></table><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><ul><li>maven提供的dependencyManagement元素能够让子模块继承父模块的依赖配置。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chilame.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 注意路径此时user-api和pom.xml是属于同级目录下 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-app<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-domain<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-websource<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子模块可以自定义继承到父模块中定义的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chilame.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子模块使用import继承全部父模块中定义的依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chilame.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入user模块中dependencyManagement的全部定义依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.chilame.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h4><ul><li>在父模块中使用pluginManagement元素定义插件，子模块可以继承。演示(略)</li></ul><h3 id="关于测试"><a href="#关于测试" class="headerlink" title="关于测试"></a>关于测试</h3><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">DskipTests，不执行测试用例，但编译测试用例类生成相应的<span class="class"><span class="keyword">class</span>文件至<span class="title">target</span>/<span class="title">test</span>-<span class="title">classes</span>下。</span></span></span><br><span class="line"><span class="ruby">-Dmaven.test.skip=<span class="literal">true</span>，不执行测试用例，也不编译测试用例类</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4.idea-serialVersionUUID</title>
      <link href="/2017/06/07/idea-4/"/>
      <url>/2017/06/07/idea-4/</url>
      <content type="html"><![CDATA[<h2 id="插件下载"><a href="#插件下载" class="headerlink" title="插件下载"></a>插件下载</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/99990340.jpg" alt=""></p><h2 id="设置ID提示"><a href="#设置ID提示" class="headerlink" title="设置ID提示"></a>设置ID提示</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/47454722.jpg" alt=""></p><h2 id="使用-Fn-alt-insert"><a href="#使用-Fn-alt-insert" class="headerlink" title="使用(Fn+alt+insert)"></a>使用(Fn+alt+insert)</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/98307312.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.idea-keymap</title>
      <link href="/2017/06/07/idea-3/"/>
      <url>/2017/06/07/idea-3/</url>
      <content type="html"><![CDATA[<h2 id="界面区"><a href="#界面区" class="headerlink" title="界面区"></a>界面区</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>alt+1</td><td>project工作区</td></tr><tr><td>alt+2</td><td>favourites 显示所有的断点，收藏功能</td></tr><tr><td>alt+4</td><td>Run工作区</td></tr><tr><td>alt+5</td><td>Debug工作区</td></tr><tr><td>alt+6</td><td>TODO工作区</td></tr><tr><td>alt+7</td><td>文件结构</td></tr><tr><td>ctrl+shift+f12</td><td>恢复/隐藏所有窗口</td></tr><tr><td>ctrl+f4</td><td>关闭当前tab页面</td></tr><tr><td>ctrl+tab</td><td>切换tab页面</td></tr></tbody></table><h2 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>shift+F6</td><td>重构文件名</td></tr><tr><td>ctrl+F6</td><td>重构方法，光标需要在方法名字区域</td></tr><tr><td>ctrl+alt+v</td><td>抽取局部变量</td></tr><tr><td>ctrl+alt+c</td><td>抽取静态常量</td></tr><tr><td>ctrl+alt+f</td><td>抽取成员变量</td></tr><tr><td>ctrl+alt+m</td><td>抽取方法</td></tr><tr><td>ctrl+alt+t</td><td>将选中的代码进行包装（捕获异常等）</td></tr></tbody></table><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>ctrl+F8</td><td>将光标所在处打上断点</td></tr><tr><td>ctrl+shift+F8</td><td>查看所有的断点</td></tr><tr><td>F8</td><td>单步运行</td></tr><tr><td>F9</td><td>运行到下一个断点</td></tr><tr><td>alt+F8</td><td>表达式求值</td></tr><tr><td>alt+F9</td><td>运行到光标所在行</td></tr><tr><td>F2</td><td>调试时改变变量的值</td></tr><tr><td>alt+鼠标选中</td><td>查看鼠标选中的变量或表达式的值</td></tr></tbody></table><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>ctrl+n</td><td>查找工程的类</td></tr><tr><td>ctrl+n+n</td><td>查找jar包的类</td></tr><tr><td>ctrl+shift+n</td><td>查找文件</td></tr><tr><td>ctrl+shift+f</td><td>全局搜索</td></tr><tr><td>ctrl+shift+r</td><td>全局替换</td></tr><tr><td>ctrl+e</td><td>显示最近的文件列表</td></tr><tr><td>ctrl+shift+e</td><td>显示最近编辑的文件列表</td></tr><tr><td>ctrl+f</td><td>查找当前文件</td></tr><tr><td>F3</td><td>查找当前文件下一个</td></tr><tr><td>shift+F3</td><td>查找当前文件上一个</td></tr><tr><td>ctrl+r</td><td>替换当前文件</td></tr></tbody></table><h2 id="代码助手"><a href="#代码助手" class="headerlink" title="代码助手"></a>代码助手</h2><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>ctrl+shift+u</td><td>将选中代码大小写切换</td></tr><tr><td>ctrl+alt+l</td><td>代码格式化</td></tr><tr><td>F2</td><td>光标定位到代码错误处</td></tr><tr><td>ctrl+shift+减号</td><td>折叠所有的代码</td></tr><tr><td>ctrl+shift+加号</td><td>展开所有的代码</td></tr><tr><td>ctrl+减号</td><td>折叠一个方法</td></tr><tr><td>ctrl+加号</td><td>展开一个方法</td></tr><tr><td>ctrl+alt+o</td><td>优化导入类和包</td></tr><tr><td>ctrl+w</td><td>选择单词，再按就会选择语句，选择段落</td></tr><tr><td>ctrl+h</td><td>显示类结构</td></tr><tr><td>ctrl+d</td><td>复制上一行</td></tr><tr><td>ctrl+x</td><td>删除一行</td></tr><tr><td>ctrl+o</td><td>复写父类方法</td></tr><tr><td>ctrl+i</td><td>实现接口方法</td></tr><tr><td>Ctrl+Shift+C</td><td>复制路径</td></tr><tr><td>Ctrl+Shift+alt+C</td><td>复制引用路径，必须选择类名</td></tr><tr><td>alt+F7</td><td>查找整个工程中使用地某一个类、方法或者变量的位置</td></tr><tr><td>ctrl+Shift+Up/Down</td><td>上/下移一行</td></tr><tr><td>Ctrl+Shift+Alt+N</td><td>查找类中的方法或变量</td></tr><tr><td>ctrl+g</td><td>定位到代码行</td></tr><tr><td>Fn+alt+insert</td><td>generate代码</td></tr><tr><td>ctrl+shift+v</td><td>粘贴最近的复制的内容</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.idea-live</title>
      <link href="/2017/06/07/idea-2/"/>
      <url>/2017/06/07/idea-2/</url>
      <content type="html"><![CDATA[<h2 id="常用的代码提示"><a href="#常用的代码提示" class="headerlink" title="常用的代码提示"></a>常用的代码提示</h2><ul><li>ctrl+j可以查看所有的快捷提示代码</li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><table><thead><tr><th>快捷提示</th><th>作用</th></tr></thead><tbody><tr><td>psvm</td><td>生成Java类的Main方法</td></tr><tr><td>serr</td><td>System.err.print()</td></tr><tr><td>sout</td><td>System.out.print()</td></tr><tr><td>soutm</td><td>System.out.println(“Test.main”);打印类名和方法名称</td></tr><tr><td>soutp</td><td>System.out.println(“args = [“ + args + “]”);打印方法参数</td></tr><tr><td>soutv</td><td>System.out.println(“args = “ + args);打印变量</td></tr><tr><td>psfs</td><td>public static final String;公共静态字符串常量</td></tr><tr><td>psfi</td><td>public static final int;公共静态整数常量</td></tr></tbody></table><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Test  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"CHILAM"</span>;<span class="comment">//psfs</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">SIZE</span> = <span class="number">1</span>;<span class="comment">//psfi</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;<span class="comment">//psvm</span></span><br><span class="line">        System.err.<span class="keyword">println</span>(<span class="string">""</span>);<span class="comment">//serr</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">""</span>);<span class="comment">//sout</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"Test.main"</span>);<span class="comment">//soutm</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"args = ["</span> + args + <span class="string">"]"</span>);<span class="comment">//soutp</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"args = "</span> + args);<span class="comment">//soutv</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><table><thead><tr><th>快捷提示</th><th>作用</th></tr></thead><tbody><tr><td>.image</td><td>图片链接</td></tr><tr><td>.table</td><td>表格</td></tr><tr><td>.link</td><td>url链接</td></tr><tr><td>.codefence</td><td>代码</td></tr></tbody></table><h2 id="添加自定义的代码提示"><a href="#添加自定义的代码提示" class="headerlink" title="添加自定义的代码提示"></a>添加自定义的代码提示</h2><ul><li>Settings-&gt;Editor-&gt;Live Template</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/34317068.jpg" alt=""></p><ul><li>先添加Template Group,再添加Live Template</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/3015019.jpg" alt=""></p><ul><li>添加PI(私有整数了类型成员变量)</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/95442564.jpg" alt=""></p><ul><li>注意红色框表示的是代码提示用于的范围，比如pi只用于java范围</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/80744912.jpg" alt=""></p><h2 id="后缀自动补全功能"><a href="#后缀自动补全功能" class="headerlink" title="后缀自动补全功能"></a>后缀自动补全功能</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/21850476.jpg" alt=""></p><ul><li>示例：args.for后按tab键就会生成如下代码</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/88618432.jpg" alt=""></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="built_in">for</span> (<span class="keyword">String</span> arg : args) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="常用的后缀补全的功能"><a href="#常用的后缀补全的功能" class="headerlink" title="常用的后缀补全的功能"></a>常用的后缀补全的功能</h3><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/60447811.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.idea-Template</title>
      <link href="/2017/06/07/idea-1/"/>
      <url>/2017/06/07/idea-1/</url>
      <content type="html"><![CDATA[<h2 id="设置类和文件或代码的注释模板"><a href="#设置类和文件或代码的注释模板" class="headerlink" title="设置类和文件或代码的注释模板"></a>设置类和文件或代码的注释模板</h2><h3 id="设置界面"><a href="#设置界面" class="headerlink" title="设置界面"></a>设置界面</h3><ul><li>Settings-&gt;File and Code Templates-&gt;Class(Ctrl+Alt+S)</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/22956161.jpg" alt=""></p><ul><li>其中Class内容如下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">if</span> (<span class="variable">$&#123;PACKAGE_NAME&#125;</span> &amp;&amp; <span class="variable">$&#123;PACKAGE_NAME&#125;</span> != <span class="string">""</span>)package <span class="variable">$&#123;PACKAGE_NAME&#125;</span>;<span class="comment">#end</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">parse(<span class="string">"File Header.java"</span>)</span></span><br><span class="line"></span><br><span class="line">public class $&#123;NAME&#125; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中Interface内容如下</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</span></span><br><span class="line"><span class="comment">#parse("File Header.java")</span></span><br><span class="line">public<span class="built_in"> interface </span><span class="variable">$&#123;NAME&#125;</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改公共的File-Header-java"><a href="#修改公共的File-Header-java" class="headerlink" title="修改公共的File Header.java"></a>修改公共的File Header.java</h3><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-7/72147253.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.hexo使用</title>
      <link href="/2017/06/06/hexo-1/"/>
      <url>/2017/06/06/hexo-1/</url>
      <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li>Node.js</li><li>Git</li><li>一个GitHub账号</li><li>也可以来一个域名方便记忆</li></ol><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="Create-Repository"><a href="#Create-Repository" class="headerlink" title="Create Repository"></a>Create Repository</h3><p>在github创建账户后，新建一个Repository，名字为<strong>github账户名.github.io</strong>即可</p><h3 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> npm安装hexo-cli</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="meta">#</span><span class="bash">查看hexo版本</span></span><br><span class="line">hexo -v</span><br><span class="line"><span class="meta">#</span><span class="bash">新建hexo项目</span></span><br><span class="line">hexo init /DIR</span><br><span class="line">cd /DIR</span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#</span><span class="bash">generate项目</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash">发布服务</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="meta">#</span><span class="bash">此时可以用浏览器打开可以访问http://localhost:4000</span></span><br></pre></td></tr></table></figure><h3 id="关联hexo博客代码到新建github的Repository"><a href="#关联hexo博客代码到新建github的Repository" class="headerlink" title="关联hexo博客代码到新建github的Repository"></a>关联hexo博客代码到新建github的Repository</h3><ul><li>配置git push地址</li></ul><p>在新建的hexo的博客代码里根目录有一个<strong>_config.yml</strong>的文件，其中有如下所示代码就是做git push推送的</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type </span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:CasperMXP/CasperMXP.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装git推送插件</span></span><br><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>然后就进行发布代码，一般发布代码之前最好在本地看哈</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动服务在本地访问localhost:4000查看</span></span><br><span class="line">hexo s </span><br><span class="line"><span class="meta">#</span><span class="bash">生成</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash">发布，部署</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li>使用组合命令</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成并发布部署</span></span><br><span class="line"><span class="attribute">hexo</span> d -g</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p><a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">我博客使用的主题</a></p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JDK内置工具</title>
      <link href="/2017/02/15/java-tool/"/>
      <url>/2017/02/15/java-tool/</url>
      <content type="html"><![CDATA[<h2 id="Java内置工具"><a href="#Java内置工具" class="headerlink" title="Java内置工具"></a>Java内置工具</h2><h3 id="JPS-Java-Virtual-Machine-Process-Status-Tool"><a href="#JPS-Java-Virtual-Machine-Process-Status-Tool" class="headerlink" title="JPS(Java Virtual Machine Process Status Tool)"></a>JPS(Java Virtual Machine Process Status Tool)</h3><p>显示当前所有java进程的pid的命令，JPS工具是在JAVA_HOME/bin目录下，比较常用的参数如下：</p><ul><li>jps -v 输出传递给JVM的参数，一般较为齐全</li><li>jps -l 输出完整的包名和完整的jar</li></ul><p><strong>备注：只能显示当前用户的所有java进程</strong></p><h3 id="JSTACK-Java-Stack-Treace"><a href="#JSTACK-Java-Stack-Treace" class="headerlink" title="JSTACK(Java Stack Treace)"></a>JSTACK(Java Stack Treace)</h3><p>显示给定的Java进程id的或java远程调用服务的java堆栈信息</p><ul><li>jstack -l pid</li></ul><h3 id="JSTAT-Java-Virtual-Machine-Statistics-Monitoring-Tool"><a href="#JSTAT-Java-Virtual-Machine-Statistics-Monitoring-Tool" class="headerlink" title="JSTAT(Java Virtual Machine Statistics Monitoring Tool)"></a>JSTAT(Java Virtual Machine Statistics Monitoring Tool)</h3><ul><li>类的加载和卸载情况</li><li>查看新生代、老年代和持久代的容量以及使用情况</li><li>查看新生代、老生代和持久代的垃圾回收情况</li><li>查看新生代中Eden区及Survior区中容量及分配情况等</li></ul><p>常用命令：</p><ul><li>jstat -class pid:查看当前类加载和卸载情况</li><li>jstat -gc pid:查看当前内存垃圾回收情况</li></ul><p>详细使用文档<a href="http://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jstat.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jstat.html</a></p><h3 id="JMAP-Java-Memory-Map"><a href="#JMAP-Java-Memory-Map" class="headerlink" title="JMAP(Java Memory Map)"></a>JMAP(Java Memory Map)</h3><p>打印java进程的内存的，所有对象的情况。</p><ul><li>jmap -heap pid 查看Heap配置信息以及Heap使用情况</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@xxb001 bin]<span class="comment"># ./jmap -heap 28913</span></span><br><span class="line">Attaching to process ID <span class="number">28913</span>, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is <span class="number">24.79</span>-b02</span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC <span class="keyword">with</span> <span class="number">4</span> thread(s)</span><br><span class="line">Heap Configuration:</span><br><span class="line">   <span class="attr">MinHeapFreeRatio</span> = <span class="number">0</span></span><br><span class="line">   <span class="attr">MaxHeapFreeRatio</span> = <span class="number">100</span></span><br><span class="line">   <span class="attr">MaxHeapSize</span>      = <span class="number">2147483648</span> (<span class="number">2048.0</span>MB)</span><br><span class="line">   <span class="attr">NewSize</span>          = <span class="number">1310720</span> (<span class="number">1.25</span>MB)</span><br><span class="line">   <span class="attr">MaxNewSize</span>       = <span class="number">17592186044415</span> MB</span><br><span class="line">   <span class="attr">OldSize</span>          = <span class="number">5439488</span> (<span class="number">5.1875</span>MB)</span><br><span class="line">   <span class="attr">NewRatio</span>         = <span class="number">2</span></span><br><span class="line">   <span class="attr">SurvivorRatio</span>    = <span class="number">8</span></span><br><span class="line">   <span class="attr">PermSize</span>         = <span class="number">536870912</span> (<span class="number">512.0</span>MB)</span><br><span class="line">   <span class="attr">MaxPermSize</span>      = <span class="number">536870912</span> (<span class="number">512.0</span>MB)</span><br><span class="line">   <span class="attr">G1HeapRegionSize</span> = <span class="number">0</span> (<span class="number">0.0</span>MB)</span><br><span class="line">Heap Usage:</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space:</span><br><span class="line">   <span class="attr">capacity</span> = <span class="number">715128832</span> (<span class="number">682.0</span>MB)</span><br><span class="line">   <span class="attr">used</span>     = <span class="number">57396752</span> (<span class="number">54.73780822753906</span>MB)</span><br><span class="line">   <span class="attr">free</span>     = <span class="number">657732080</span> (<span class="number">627.2621917724609</span>MB)</span><br><span class="line">   <span class="number">8.026071587615698</span>% used</span><br><span class="line">From Space:</span><br><span class="line">   <span class="attr">capacity</span> = <span class="number">524288</span> (<span class="number">0.5</span>MB)</span><br><span class="line">   <span class="attr">used</span>     = <span class="number">131072</span> (<span class="number">0.125</span>MB)</span><br><span class="line">   <span class="attr">free</span>     = <span class="number">393216</span> (<span class="number">0.375</span>MB)</span><br><span class="line">   <span class="number">25.0</span>% used</span><br><span class="line">To Space:</span><br><span class="line">   <span class="attr">capacity</span> = <span class="number">524288</span> (<span class="number">0.5</span>MB)</span><br><span class="line">   <span class="attr">used</span>     = <span class="number">0</span> (<span class="number">0.0</span>MB)</span><br><span class="line">   <span class="attr">free</span>     = <span class="number">524288</span> (<span class="number">0.5</span>MB)</span><br><span class="line">   <span class="number">0.0</span>% used</span><br><span class="line">PS Old Generation</span><br><span class="line">   <span class="attr">capacity</span> = <span class="number">1431830528</span> (<span class="number">1365.5</span>MB)</span><br><span class="line">   <span class="attr">used</span>     = <span class="number">69727160</span> (<span class="number">66.49700164794922</span>MB)</span><br><span class="line">   <span class="attr">free</span>     = <span class="number">1362103368</span> (<span class="number">1299.0029983520508</span>MB)</span><br><span class="line">   <span class="number">4.869791405928174</span>% used</span><br><span class="line">PS Perm Generation</span><br><span class="line">   <span class="attr">capacity</span> = <span class="number">536870912</span> (<span class="number">512.0</span>MB)</span><br><span class="line">   <span class="attr">used</span>     = <span class="number">41325216</span> (<span class="number">39.410797119140625</span>MB)</span><br><span class="line">   <span class="attr">free</span>     = <span class="number">495545696</span> (<span class="number">472.5892028808594</span>MB)</span><br><span class="line">   <span class="number">7.697421312332153</span>% used</span><br><span class="line"><span class="number">17852</span> interned Strings occupying <span class="number">2222800</span> bytes.</span><br></pre></td></tr></table></figure><ul><li>查看当前类-histo[:live] 打印每个class的实例数目,内存占用,类全名信息. VM的内部类名字开头会加上前缀”*”. 如果live子参数加上后,只统计活的对象数量.</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">jmap -histo pid</span></span><br></pre></td></tr></table></figure><ul><li>生成dump文件,供MemoryAnalysisTool分析使用</li></ul><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#jmap -dump:<span class="keyword">format</span>=b,<span class="keyword">file</span>=test.bin pid</span><br><span class="line">[root@xxb001 bin]# ./jmap -dump:<span class="keyword">format</span>=b,<span class="keyword">file</span>=<span class="number">28913.</span>bin <span class="number">28913</span></span><br><span class="line">Dumping heap to /usr/java/jdk1<span class="number">.7</span><span class="number">.0</span>_79/bin/<span class="number">28913.</span>bin ...</span><br><span class="line">Heap dump <span class="keyword">file</span> created</span><br></pre></td></tr></table></figure><h3 id="JINFO-Java-Configuration-Infomation"><a href="#JINFO-Java-Configuration-Infomation" class="headerlink" title="JINFO(Java Configuration Infomation)"></a>JINFO(Java Configuration Infomation)</h3><p>输出java运行参数以及命令行参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@xxb001 bin]# ./jinfo -flag MaxPermSize  28913</span><br><span class="line">-XX:<span class="attribute">MaxPermSize</span>=536870912</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[root@xxb001 bin]# ./jinfo -flags  28913</span><br><span class="line">Attaching <span class="keyword">to</span> process ID 28913, please wait<span class="built_in">..</span>.</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 24.79-b02</span><br><span class="line">-Djava.util.logging.config.<span class="attribute">file</span>=/app/ta3cloud/apache-tomcat-8.5.12/conf/logging.properties -Djava.util.logging.<span class="attribute">manager</span>=org.apache.juli.ClassLoaderLogManager -Djdk.tls.<span class="attribute">ephemeralDHKeySize</span>=2048 -Xms2048m -Xmx2048m -XX:<span class="attribute">PermSize</span>=512M -XX:<span class="attribute">MaxPermSize</span>=512m -Djava.protocol.handler.<span class="attribute">pkgs</span>=org.apache.catalina.webresources -Dcatalina.<span class="attribute">base</span>=/app/ta3cloud/apache-tomcat-8.5.12 -Dcatalina.<span class="attribute">home</span>=/app/ta3cloud/apache-tomcat-8.5.12 -Djava.io.<span class="attribute">tmpdir</span>=/app/ta3cloud/apache-tomcat-8.5.12/temp</span><br><span class="line">[root@xxb001 bin]# ./jinfo -flag MaxPermSize  28913</span><br><span class="line">-XX:<span class="attribute">MaxPermSize</span>=536870912</span><br><span class="line">[root@xxb001 bin]# ^C</span><br><span class="line">[root@xxb001 bin]# ./jinfo -flags  28913</span><br><span class="line">Attaching <span class="keyword">to</span> process ID 28913, please wait<span class="built_in">..</span>.</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 24.79-b02</span><br><span class="line">-Djava.util.logging.config.<span class="attribute">file</span>=/app/ta3cloud/apache-tomcat-8.5.12/conf/logging.properties -Djava.util.logging.<span class="attribute">manager</span>=org.apache.juli.ClassLoaderLogManager -Djdk.tls.<span class="attribute">ephemeralDHKeySize</span>=2048 -Xms2048m -Xmx2048m -XX:<span class="attribute">PermSize</span>=512M -XX:<span class="attribute">MaxPermSize</span>=512m -Djava.protocol.handler.<span class="attribute">pkgs</span>=org.apache.catalina.webresources -Dcatalina.<span class="attribute">base</span>=/app/ta3cloud/apache-tomcat-8.5.12 -Dcatalina.<span class="attribute">home</span>=/app/ta3cloud/apache-tomcat-8.5.12 -Djava.io.<span class="attribute">tmpdir</span>=/app/ta3cloud/apache-tomcat-8.5.12/temp</span><br></pre></td></tr></table></figure><h3 id="JHAT-Java-Head-Analyse-Tool"><a href="#JHAT-Java-Head-Analyse-Tool" class="headerlink" title="JHAT(Java Head Analyse Tool)"></a>JHAT(Java Head Analyse Tool)</h3><p>用来分析java堆的工具，可以将堆的中对象以HTML形式展现出来，包括数量，大小并支持对象查询语言。</p><ul><li>导出堆</li></ul><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@xxb001 bin]# ./jmap -dump:format=b,<span class="keyword">file</span>=a.<span class="keyword">map</span> <span class="number">28913</span></span><br><span class="line">Dumping heap <span class="keyword">to</span> /usr/java/jdk1.<span class="number">7.0_79</span>/bin/a.<span class="keyword">map</span> ...</span><br><span class="line">Heap dump <span class="keyword">file</span> created</span><br></pre></td></tr></table></figure><ul><li>分析堆</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@xxb001 bin]# ./jhat a.map </span><br><span class="line">Reading <span class="keyword">from</span> a.map<span class="built_in">..</span>.</span><br><span class="line">Dump file created Tue Aug 15 14:22:21 CST 2017</span><br><span class="line">Snapshot read, resolving<span class="built_in">..</span>.</span><br><span class="line">Resolving 8502659 objects<span class="built_in">..</span>.</span><br><span class="line">Chasing references, expect 1700 dots<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">Eliminating duplicate references<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line">Snapshot resolved.</span><br><span class="line">Started HTTP<span class="built_in"> server </span>on<span class="built_in"> port </span>7000</span><br><span class="line">Server is ready.</span><br><span class="line"><span class="comment">#备注</span></span><br><span class="line">有时你dump出来的堆很大，在启动时会报堆空间不足的错误，可以使用如下参数：</span><br><span class="line">jhat -J-Xmx512m &lt;heap dump file&gt;</span><br></pre></td></tr></table></figure><ul><li><p>查看HTML</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">All classes including platform</span><br><span class="line">Show all members of the rootset</span><br><span class="line">Show<span class="built_in"> instance </span>counts <span class="keyword">for</span> all classes (including platform)</span><br><span class="line">Show<span class="built_in"> instance </span>counts <span class="keyword">for</span> all classes (excluding platform)</span><br><span class="line">Show heap histogram</span><br><span class="line">Show finalizer summary</span><br><span class="line">Execute Object Query Language (OQL) query</span><br></pre></td></tr></table></figure></li><li><p>jhat中OQL语句</p></li></ul><p>参考博客<a href="http://blog.csdn.net/gtuu0123/article/details/6039592" target="_blank" rel="noopener">http://blog.csdn.net/gtuu0123/article/details/6039592</a></p>]]></content>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.学习笔记-jgroups</title>
      <link href="/2016/09/02/jgroups/"/>
      <url>/2016/09/02/jgroups/</url>
      <content type="html"><![CDATA[<h2 id="jgroups"><a href="#jgroups" class="headerlink" title="jgroups"></a><a href="http://www.jgroups.org/" target="_blank" rel="noopener">jgroups</a></h2><ul><li>Cluster creation and deletion. Cluster nodes can be spread across LANs or WANs</li><li>Joining and leaving of clusters</li><li>Membership detection and notification about joined/left/crashed cluster nodes</li><li>Detection and removal of crashed nodes</li><li>Sending and receiving of node-to-cluster messages (point-to-multipoint)</li><li>Sending and receiving of node-to-node messages (point-to-point)</li></ul><h2 id="基本使用案例"><a href="#基本使用案例" class="headerlink" title="基本使用案例"></a>基本使用案例</h2><ul><li>JGroups 使用 JChannel 作为连接到组、发送和接收消息的主 API，并可通过 JChannel 注册用来处理这些事件（成员加入、退出和发送消息）的侦听器ReceiverAdapter。</li><li>Messages 是发送的消息，它包含一个字节缓冲区、发送和接受者地址。</li><li>Addresses 是 org.jgroups.Address 的子类，通常包含一个 IP 地址和端口。</li><li>组中的节点列表被成为 View，每个实例包含相同的 View，可通过 View.getMembers() 来获取所有节点地址列表。</li><li>节点Node只能在加入组后才能发送和接收消息。当一个节点要离开组时，JChannel.disconnect() 或者JChannel.close() 方法会被调用。</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">JChannel channel=<span class="keyword">new</span> JChannel(<span class="string">"/home/bela/udp.xml"</span>);</span><br><span class="line">channel.setReceiver(<span class="keyword">new</span> ReceiverAdapter() &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> receive(Message msg) &#123;</span><br><span class="line">      System.out.<span class="built_in">println</span>(<span class="string">"received msg from "</span> + msg.getSrc() + <span class="string">": "</span> + msg.getObject());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">channel.<span class="built_in">connect</span>(<span class="string">"MyCluster"</span>);</span><br><span class="line">channel.send(<span class="keyword">new</span> Message(null, <span class="string">"hello world"</span>));</span><br><span class="line">channel.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><h2 id="协议栈简介"><a href="#协议栈简介" class="headerlink" title="协议栈简介"></a>协议栈简介</h2><p>JGroups最强大的功能在于它灵活的协议栈配置，允许开发者调整协议栈中的协议从而适应自己实践的环境和需求。JGroups启动时会根据配置的协议栈，构成一个协议栈Java对象，发送的消息会自顶向下的依次经过各层协议进行处理，直至发送到网络链路层。同样，收到的消息，JGroups也会将消息自底向上的传递，直至回调ReceiverAdapter交由应用程序。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">config</span> <span class="attr">xmlns</span>=<span class="string">"urn:org:jgroups"</span></span></span></span><br><span class="line"><span class="xml">        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">        xsi:schemaLocation="urn:org:jgroups http://www.jgroups.org/schema/jgroups.xsd"&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">UDP</span></span></span></span><br><span class="line"><span class="xml">         mcast_port="$</span><span class="template-variable">&#123;jgroups.udp.mcast_port:45588&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">         ip_ttl="4"</span></span><br><span class="line"><span class="xml">         ucast_recv_buf_size="5M"</span></span><br><span class="line"><span class="xml">         ucast_send_buf_size="5M"</span></span><br><span class="line"><span class="xml">         mcast_recv_buf_size="5M"</span></span><br><span class="line"><span class="xml">         mcast_send_buf_size="5M"</span></span><br><span class="line"><span class="xml">         max_bundle_size="64K"</span></span><br><span class="line"><span class="xml">         enable_diagnostics="true"</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">         thread_pool.min_threads="2"</span></span><br><span class="line"><span class="xml">         thread_pool.max_threads="8"</span></span><br><span class="line"><span class="xml">         thread_pool.keep_alive_time="5000" /&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">PING</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">MERGE3</span> <span class="attr">max_interval</span>=<span class="string">"30000"</span></span></span></span><br><span class="line"><span class="xml">            min_interval="10000"/&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">FD_SOCK</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">FD_ALL</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">VERIFY_SUSPECT</span> <span class="attr">timeout</span>=<span class="string">"1500"</span>  /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">pbcast.NAKACK2</span> <span class="attr">xmit_interval</span>=<span class="string">"500"</span></span></span></span><br><span class="line"><span class="xml">                    xmit_table_num_rows="100"</span></span><br><span class="line"><span class="xml">                    xmit_table_msgs_per_row="2000"</span></span><br><span class="line"><span class="xml">                    xmit_table_max_compaction_time="30000"</span></span><br><span class="line"><span class="xml">                    max_msg_batch_size="500"</span></span><br><span class="line"><span class="xml">                    use_mcast_xmit="false"</span></span><br><span class="line"><span class="xml">                    discard_delivered_msgs="true"/&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">UNICAST3</span> <span class="attr">xmit_interval</span>=<span class="string">"500"</span></span></span></span><br><span class="line"><span class="xml">              xmit_table_num_rows="100"</span></span><br><span class="line"><span class="xml">              xmit_table_msgs_per_row="2000"</span></span><br><span class="line"><span class="xml">              xmit_table_max_compaction_time="60000"</span></span><br><span class="line"><span class="xml">              conn_expiry_timeout="0"</span></span><br><span class="line"><span class="xml">              max_msg_batch_size="500"/&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">pbcast.STABLE</span> <span class="attr">desired_avg_gossip</span>=<span class="string">"50000"</span></span></span></span><br><span class="line"><span class="xml">                   max_bytes="4M"/&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">pbcast.GMS</span> <span class="attr">print_local_addr</span>=<span class="string">"true"</span> <span class="attr">join_timeout</span>=<span class="string">"2000"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">UFC</span> <span class="attr">max_credits</span>=<span class="string">"2M"</span></span></span></span><br><span class="line"><span class="xml">         min_threshold="0.4"/&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">MFC</span> <span class="attr">max_credits</span>=<span class="string">"2M"</span></span></span></span><br><span class="line"><span class="xml">         min_threshold="0.4"/&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">FRAG2</span> <span class="attr">frag_size</span>=<span class="string">"60K"</span>  /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>传输协议（UDP、TCP），消息分块协议（FRAG、FRAG2），可靠传输协议（UNICAST、NAKACK），失败侦测（FD、FD_SOCK、FD_ALL），排序协议（SEQUENCER）、成员协议（GMS）、加密协议（ENCRYPT）</p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.学习笔记-hibernate</title>
      <link href="/2016/08/02/hibernate/"/>
      <url>/2016/08/02/hibernate/</url>
      <content type="html"><![CDATA[<h2 id="Object-Relational-Mapping-简称ORM"><a href="#Object-Relational-Mapping-简称ORM" class="headerlink" title="Object-Relational Mapping,简称ORM"></a>Object-Relational Mapping,简称ORM</h2><p>对象关系映射(Object-Relational Mapping,简称ORM)是一种为了解决面向对象与面向关系数据库存在的互不匹配现象的技术;简单的说,ORM是通过使用描述对象和数据库之间映射的元数据,将Java程序中的对象自动持久化到关系数据库中;本质上就是将数据从一种形式转换到另外一种形式。</p><h2 id="Hibernate5个核心接口"><a href="#Hibernate5个核心接口" class="headerlink" title="Hibernate5个核心接口"></a>Hibernate5个核心接口</h2><ol><li>Configuration 负责加载主配置文件信息,同时也加载映射关系文件信息. </li><li>SessionFactory 负责创建Session对象. </li><li>Session 数据库连接会话,负责执行增删改操作. </li><li>Transaction 负责事务控制. </li><li>Query 负责执行特殊查询.</li></ol><h2 id="Hibernate是如何处理事务的"><a href="#Hibernate是如何处理事务的" class="headerlink" title="Hibernate是如何处理事务的"></a>Hibernate是如何处理事务的</h2><p>Hibernate的事务实际上是底层的JDBC Transaction的封装或者是JTATransaction的封装;默认情况下使用JDBCTransaction</p><h2 id="session-load-和session-get-的区别"><a href="#session-load-和session-get-的区别" class="headerlink" title="session.load()和session.get()的区别"></a>session.load()和session.get()的区别</h2><p> </p><ol><li>get不支持延迟加载,而load支持.换句话说,get方法一定获取实际的对象,而load有可能返回代理对象.</li><li>如果未能发现符合条件的记录,get方法返回null,而load方法会抛出一个ObjectNotFoundException. </li></ol><h2 id="update和saveOrUpdate方法的区别"><a href="#update和saveOrUpdate方法的区别" class="headerlink" title="update和saveOrUpdate方法的区别"></a>update和saveOrUpdate方法的区别</h2><p>update方法跟新数据时,如果不存在该条数据的主键则会报错;saveOrUpdate方法保存或更新,如果不存在主键则执行插入.</p><h2 id="Hibernate中对象有哪几种状态"><a href="#Hibernate中对象有哪几种状态" class="headerlink" title="Hibernate中对象有哪几种状态"></a>Hibernate中对象有哪几种状态</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-4/36851846.jpg" alt=""></p><ol><li>临时状态 <ul><li>临时状态的对象可以被垃圾回收;<br>    - 临时状态的对象为进行过持久化,未与session关联. </li></ul></li><li>持久化状态<br>    - 持久化状态对象垃圾回收器不能回收;<br>    - 持久化状态的对象进行了持久化,与session相关联,即持久化状态就想存在于session缓存中,由session负责管理;<br>    - 持久化状态对象的数据可以自动更新到数据库中,时机是在调用session.flush()时执行.而提交事务时会调用session.flush(),因此提交事务时也会触发同步,可以理解为ts.commit=session.flush()+commit. </li><li>游离状态<br>    - 游离状态的对象可以被垃圾回收;<br>    - 游离状态的对象进行过持久化,但已与session解除了关联.</li></ol><h2 id="Hibernate中哪些查询方法具有延迟加载机制"><a href="#Hibernate中哪些查询方法具有延迟加载机制" class="headerlink" title="Hibernate中哪些查询方法具有延迟加载机制"></a>Hibernate中哪些查询方法具有延迟加载机制</h2><ol><li>session.load(); </li><li>query.iterate(); </li><li>关联映射中对关联属性的加载.</li></ol><h2 id="Hibernate中的关联映射有如下几种"><a href="#Hibernate中的关联映射有如下几种" class="headerlink" title=" Hibernate中的关联映射有如下几种:"></a> Hibernate中的关联映射有如下几种:</h2><p> </p><ol><li>一对一关联 </li><li>一对多关联 </li><li>多对一关联 </li><li>多对多关联</li></ol><h2 id="简述Hibernate一级缓存和二级缓存的区别和联系"><a href="#简述Hibernate一级缓存和二级缓存的区别和联系" class="headerlink" title="简述Hibernate一级缓存和二级缓存的区别和联系"></a>简述Hibernate一级缓存和二级缓存的区别和联系</h2><ul><li> 一级缓存是Session级别的缓存,由Session负责管理,因此一级缓存是Session独享的,即每个Session只能访问自己的一级缓存区. </li><li>  二级缓存是SessionFactory级别的缓存,由SessionFactory负责管理,因此二级缓存是Session间共享的,即不同的Session都可以访问二级缓存区. </li><li>  一级缓存和二级缓存相同的地方是,他们缓存的都是对象数据.</li></ul><h2 id="简谈hibernate的工作原理"><a href="#简谈hibernate的工作原理" class="headerlink" title="简谈hibernate的工作原理"></a>简谈hibernate的工作原理</h2><ul><li>读取并解析hibernate核心配置文件与映射文件 </li><li>hibernate调用API </li><li>创建Configuration对象 </li><li>创建session工厂 </li><li>通过工厂创建会话对象 </li><li>获取事物对象 </li><li>进行操作，提交，结束及关闭Session</li></ul><h2 id="Hibernate中的SessionFactory有什么作用-SessionFactory是线程安全的吗？"><a href="#Hibernate中的SessionFactory有什么作用-SessionFactory是线程安全的吗？" class="headerlink" title="Hibernate中的SessionFactory有什么作用? SessionFactory是线程安全的吗？"></a>Hibernate中的SessionFactory有什么作用? SessionFactory是线程安全的吗？</h2><p>SessionFactory就是一个用于创建Hibernate的Session对象的工厂。SessionFactory通常是在应用启动时创建好的，应用程序中的代码用它来获得Session对象。作为一个单个的数据存储，它也是 线程安全的，所以多个线程可同时使用同一个SessionFactory。Java JEE应用一般只有一个SessionFactory，服务于客户请求的各线程都通过这个工厂来获得Hibernate的Session实例，这也是为什么SessionFactory接口的实现必须是线程安全的原因。</p><h2 id="可不可以将Hibernate的实体类定义为final类"><a href="#可不可以将Hibernate的实体类定义为final类" class="headerlink" title="可不可以将Hibernate的实体类定义为final类?"></a>可不可以将Hibernate的实体类定义为final类?</h2><p>你可以将Hibernate的实体类定义为final类，但这种做法并不好。因为Hibernate会使用代理模式在延迟关联的情况下提高性能，如果你把实体类定义成final类之后，因为 Java不允许对final类进行扩展，所以Hibernate就无法再使用代理了，如此一来就限制了使用可以提升性能的手段</p><h2 id="Hibernate解决n-1问题"><a href="#Hibernate解决n-1问题" class="headerlink" title="Hibernate解决n+1问题"></a>Hibernate解决n+1问题</h2><p>一般而言说n+1意思是，无论在一对多还是多对一当查询出n条数据之后，每条数据会关联的查询1次他的关联对象，这就叫做n+1。</p><h3 id="下面是3中解决方案："><a href="#下面是3中解决方案：" class="headerlink" title="下面是3中解决方案："></a>下面是3中解决方案：</h3><ol><li>延迟加载，当需要的时候才查询，不需要就不查询，但是感觉这种方式治标不治本，尤其是在那种报表统计查询的时候更为明显　　</li><li>fetch=”join”，默认是fetch=”select”，这个其实说白了就是一个做外连接，允许外键为空的情况之下　　</li><li>二级缓存，第一次查询之后存在内存中，后面的相同查询就快了。但是有2个缺点：a.二级缓存首先是有点浪费内存空间，如果多了的话浪费还比较严重，这是一个不好的方面，当然这不是主要的，主要的问题在于，二级缓存的特性决定的，那就是很少的增删改才做二级缓存，而对于普通的CRUD系统，其实不太适合。所以感觉也不是首选。</li></ol>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hibernate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5.读书笔记《Java并发编程艺术》-java中的锁</title>
      <link href="/2016/07/08/jmm-5-lock/"/>
      <url>/2016/07/08/jmm-5-lock/</url>
      <content type="html"><![CDATA[<h2 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h2><ul><li>锁是用来控制多个线程访问共享资源的的方式。</li></ul><h3 id="Lock接口提供的synchronized关键字不具备的主要特性"><a href="#Lock接口提供的synchronized关键字不具备的主要特性" class="headerlink" title="Lock接口提供的synchronized关键字不具备的主要特性"></a>Lock接口提供的synchronized关键字不具备的主要特性</h3><ul><li>尝试非阻塞的获取锁tryLock()</li><li>能被中断地获取锁</li><li>超时获取锁</li></ul><h2 id="队列同步器"><a href="#队列同步器" class="headerlink" title="队列同步器"></a>队列同步器</h2><ul><li>AbstractQueuedSynchronizer是用来构建锁或其他同步组件的基础框架。</li><li>基于模板方法模式来设计的，使用者需要继承同步器并重写指定的方法，</li><li>重写同步器指定方法时，需要使用同步器提供的方法来访问或修改同步状态：<ul><li>getState():获取当前同步状态</li><li>setState(int new State)</li><li>compareAndSetState(int expect,int update)使用CAS设置当前状态，保证原子性</li></ul></li><li>同步器可以重写的方法:<ul><li>tryAcquire(int arg),独占式获取同步状态</li><li>tryRelease(int arg),独占式释放同步状态</li></ul></li></ul><h2 id="队列同步器的实现分析"><a href="#队列同步器的实现分析" class="headerlink" title="队列同步器的实现分析"></a>队列同步器的实现分析</h2>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4.读书笔记《Java并发编程艺术》-线程</title>
      <link href="/2016/07/06/jmm-4-thread/"/>
      <url>/2016/07/06/jmm-4-thread/</url>
      <content type="html"><![CDATA[<h2 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h2><ul><li>现代操作系统的调度的最小单元</li></ul><h3 id="为什么使用多线程"><a href="#为什么使用多线程" class="headerlink" title="为什么使用多线程"></a>为什么使用多线程</h3><ul><li>更多处理器核心</li><li>更快的响应时间</li><li>更好的编程模型</li></ul><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><ul><li>int的整形变量priority来控制优先级，1-10，默认是5</li></ul><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><ul><li>new,初始状态，线程被构建，但是还没有调用start()方法</li><li>runnable,运行状态调用start()方法后</li><li>blocked,阻塞状态</li><li>waiting，等待状态</li><li>time_waiting,超时等待状态，可以在制定的时间自动返回</li><li>terminated,终止状态</li></ul><h4 id="线程状态变迁图"><a href="#线程状态变迁图" class="headerlink" title="线程状态变迁图"></a>线程状态变迁图</h4><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-2/84475752.jpg" alt=""></p><h2 id="线程调度和常用内部方法"><a href="#线程调度和常用内部方法" class="headerlink" title="线程调度和常用内部方法"></a>线程调度和常用内部方法</h2><h3 id="线程交互和协作方法"><a href="#线程交互和协作方法" class="headerlink" title="线程交互和协作方法"></a>线程交互和协作方法</h3><ul><li>wait()：调用一个对象的wait方法，会导致当前持有该对象锁的线程等待，直到该对象的另一个持锁线程调用notify/notifyAll唤醒。</li><li>wait(long timeout)：与wait相似，不过除了被notify/notifyAll唤醒以外，超过long定义的超时时间，也会自动唤醒。</li><li>wait(long timeout, int nanos):与wait(long)相同，不过nanos可以提供纳秒(毫微秒)级别的更精确的超时控制。</li><li>notify()：调用一个对象的notify()方法，会导致当前持有该对象锁的所有线程中的随机某一个线程被唤醒。</li><li>notifyAll()：调用一个对象的notifyAll()，会导致当前持有该对象锁的所有线程同时被唤醒。</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>对于wait/notify/notifyAll的调用，必须在该对象的同步方法或同步代码块中。当然，一个Thread实例也是一个对象，所以，对于thread自身的同步代码内，可以调用自身的wait。</li><li>wait方法的调用会释放锁，而sleep或yield不会。</li><li>当wait被唤醒或超时时，并不是直接进入运行态或就绪态，而是先进入Blocked态，抢锁成功，才能进入运行态。</li><li>notify和notifyAll的区别在于：<ol><li>notify唤醒的是对象多个锁线程中的一个线程，这个线程进入Blocked状态，开始抢锁，当这个线程执行完释放锁的时候，即使现在没有其它线程占用锁，其它处于wait状态的线程也会继续等待notify而不是主动去抢锁。</li><li>notifyAll要残酷的多，一单notifyAll消息发出，所有wait在这个对象上的线程都会去抢锁，抢到锁的执行，其它线程Blocked在这个锁上，当抢到锁的线程执行完成释放锁之后，其它线程自动抢锁。</li><li>也就是说，线程wait后的唤醒过程必须是：wait-notify-抢锁-执行-释放锁。</li></ol></li><li>notify和wait必须加循环进行保证，这是一个良好的编程习惯，这是因为，没有循环条件保证的话，如果有多个wait线程在等待notify，当notifyAll发出时，两个wait线程同时被唤醒，进入RUNABLE状态，如果此时他们竞争一个非锁资源，则只有一个能抢到，另一个虽然抢不到，但因为是非锁资源，所以会继续执行，就容易造成问题。</li></ol><h3 id="休眠"><a href="#休眠" class="headerlink" title="休眠"></a>休眠</h3><ul><li>sleep方法如其名，是让线程休眠的，而且是那个线程调用，就是哪个线程休眠。可以是调用TimeUtil.sleep(long)、Thread.sleep(long)，或当前线程对象t上的t.sleep(long)，其结果都是当前线程休眠。</li><li>在sleep休眠期间，线程会释放出CPU资源给其它线程，但线上本身仍占有锁，而不会释放锁。</li></ul><h3 id="让步"><a href="#让步" class="headerlink" title="让步"></a>让步</h3><ul><li>Java的让步使用的是Thread.yield()静态方法，功能是暂停当前线程的执行，并让步于其它同优先级线程，让其它线程先执行。</li><li>yield()仅仅是让出CPU资源，但是让给谁，是由系统决定的，是不确定的，当前线程使用yield()让出资源后，线程不会释放锁，而是回到就绪状态，等待调度执行。</li></ul><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>java线程见合并，使用的是join方法。join()方法做的事情是将并行执行的线程合并为串行执行的，例如，如果在线程ta中调用tb.join()，则ta会停止当前执行，并让tb先执行，直到tb执行完毕，ta才会继续执行。</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>如果对一个线程t，调用t. setDaemon(true)，则可以将该线程设置为守护线程，JVM判断程序运行结束的标准是所有用户线程执行完成，当用户线程全部结束，即使守护线程仍在运行，或尚未开始，JVM都会结束。</p><ul><li>不能将正在运行的线程设置为守护线程，因此t.setDaemon(true)方法必须在t.start()之前调用；</li><li>守护线程一般用来做GC、后台监控、内存管理等后台型任务，且这些任务即使随时被结束，也不影响整体程序的运行。</li></ul><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>在Java线程中，中断有且只有一个含义，就是让线程退出阻塞状态，t.interrupt()只是向线程t发出一个中断信号，让该线程退出阻塞状态。</p><ul><li>如果线程t当前是可中断的阻塞状态（如调用了sleep、join等方法导致线程进入WATING / TIMED_WAITING状态），在任意其它线程中调用t.interrupt()，那么线程会立即抛出一个InterruptedException，退出阻塞状态；- 如果是调用wait进入的WAITING / TIMED_WAITING状态，调用了t.interrupt()后，需要先等线程抢到锁，脱离BLOCKED状态，才会抛出InterruptExceptiong；</li><li>如果线程t当前是不可中断的阻塞状态（如不能中断的IO操作、尚未获取锁的BLOCKED状态），调用了t.interrupt()后，则需要等到脱离了阻塞状态之后，才立即抛出InterruptedException；</li><li>如果线程t当前处在运行状态，则调用了t.interrupt()，线程会继续运行，直到发生了sleep、join、wait等方法的调用，才会在进入阻塞之后，随后立即抛出InterruptedException，跳出阻塞状态；</li></ul><h2 id="Runable与Callable"><a href="#Runable与Callable" class="headerlink" title="Runable与Callable"></a>Runable与Callable</h2><ol><li>Runnable是JDK1.1中就出现的，属于包java.lang，而Callable是在JDK1.5才提供的，属于java.util.concurrent；</li><li>Runnable中要实现的是void run()方法，没有返回值，而Callable要实现的是V call()方法，返回一个泛型V的返回值（通过Future.get()方法获取）；</li><li>Runnable中抛出的异常，在线程外是无法捕获的，而Callable是可以抛出Exception；</li><li>Runnable和Callable都可以用于ExecutorService，而Thread类只支持Runnable，当然，可以用FutureTask对Callable进行封装，并用Thread类才能运行；</li><li>运行Callable可以得到一个Future对象，用于表示异步计算的结果，类似于CallBack，而Runable不行；</li></ol><h2 id="Future和FutureTask"><a href="#Future和FutureTask" class="headerlink" title="Future和FutureTask"></a>Future和FutureTask</h2><ul><li>Future是对Runnable或Callable的任务结果进行查询、获取结果、取消等操作的异步管理类；</li><li>Future是一个接口，无法用于直接创建对象，而且Runnable也无法直接用Future，所以就有了FutureTask，FutureTask也位于java.util.concurrent包，FutureTask实际上同时实现了Future接口和Runnable接口，所以它既可以作为Runnable被Thread线程执行，也可以作为Future得到Callable的返回值；</li></ul><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>线程池存在的目的在于：提前创建好需要的线程，减少临时创建线程带来的资源消耗。而且每个ThreadPoolExecutor线程池还维护者一些统计数据，如完成的任务数，可以方便的进行统计，同时该类还提供了很多可调整的参数和扩展的钩子（hook）。</p><ul><li>Executor是顶层接口，其中只有一个execute(Runnable)的声明，返回值是void；</li><li>ExecutorService接口集成了Executor接口，同时提供了submit、invokeAll、invokeAny、shutDown等方法；</li><li>AbstractExecutorService实现了ExecutorService接口，并基本实现其所有方法；</li><li>ThreadPoolExecutor继承了类AbstractExecutorService；并提供了execute()/submit()/shutdown()/shudownNow()等方法的具体实现（execute是提供了具体实现，其它方法用了超类的实现）；</li></ul><h3 id="Java中的ThreadPoolExecutor类"><a href="#Java中的ThreadPoolExecutor类" class="headerlink" title="Java中的ThreadPoolExecutor类"></a>Java中的ThreadPoolExecutor类</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    <span class="keyword">public</span> ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,<span class="keyword">int</span> maximumPoolSize,<span class="keyword">long</span> keepAliveTime,TimeUnit unit,</span><br><span class="line">            BlockingQueue&lt;Runnable&gt; workQueue);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,<span class="keyword">int</span> maximumPoolSize,<span class="keyword">long</span> keepAliveTime,TimeUnit unit,</span><br><span class="line">            BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,<span class="keyword">int</span> maximumPoolSize,<span class="keyword">long</span> keepAliveTime,TimeUnit unit,</span><br><span class="line">            BlockingQueue&lt;Runnable&gt; workQueue,RejectedExecutionHandler <span class="keyword">handler</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,<span class="keyword">int</span> maximumPoolSize,<span class="keyword">long</span> keepAliveTime,TimeUnit unit,</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler <span class="keyword">handler</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</li><li>maximumPoolSize：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</li><li>keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；</li><li>unit：参数keepAliveTime的时间单位</li><li>workQueue：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：ArrayBlockingQueue;<br>LinkedBlockingQueue;SynchronousQueue;</li><li>threadFactory：线程工厂，主要用来创建线程；</li><li>handler：表示当拒绝处理任务时的策略，有以下四种取值<ul><li>ThreadPoolExecutor.AbortPolicy丢弃任务并抛RejectedExecutionException异常。 </li><li>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 </li><li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li><li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 </li></ul></li></ul><h3 id="注：execute和submit的区别在于："><a href="#注：execute和submit的区别在于：" class="headerlink" title="注：execute和submit的区别在于："></a>注：execute和submit的区别在于：</h3><ul><li>execute是定义在Executor中，并在ThreadPoolExecutor中具体实现，没有返回值的，其作用就是向线程池提交一个任务并执行；</li><li>submit是定义在ExecutorService中，并在AbstractExecutorService中具体实现，且在ThreadPoolExecutor中没有对其进行重写，submit能够返回结果，其内部实现，其实还是在调用execute()，不过，它利用Future&amp;FutureTask来获取任务结果。</li></ul><h4 id="线程池的关闭"><a href="#线程池的关闭" class="headerlink" title="线程池的关闭"></a>线程池的关闭</h4><ul><li>shutdown()方法在终止前允许执行以前提交的任务；</li><li>shutdownNow() 方法阻止等待任务的启动并试图停止当前正在执行的任务。在终止后，执行程序没有任务在执行，也没有任务在等待执行，并且无法提交新任务。应该关闭未使用的 ExecutorService以允许回收其资源；</li></ul><h3 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h3><ul><li>volatile int runState;</li><li>static final int RUNNING    = 0;创建线程池后，初始时，线程池处于RUNNING状态；</li><li>static final int SHUTDOWN   = 1;　如果调用了shutdown()方法，则线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；</li><li>static final int STOP       = 2;如果调用了shutdownNow()方法，则线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；</li><li>static final int TERMINATED = 3;　当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.git-github issue</title>
      <link href="/2016/07/06/git-1/"/>
      <url>/2016/07/06/git-1/</url>
      <content type="html"><![CDATA[<h2 id="issue面板介绍"><a href="#issue面板介绍" class="headerlink" title="issue面板介绍"></a>issue面板介绍</h2><p><img src="http://orkt468tj.bkt.clouddn.com/17-7-6/92832058.jpg" alt=""></p><ol><li>表示项目名称</li><li>表示issue面板</li><li>新建issue按钮</li></ol><h2 id="新建issue"><a href="#新建issue" class="headerlink" title="新建issue"></a>新建issue</h2><p>点击<strong>new issue</strong>出现如下界面</p><p><img src="http://orkt468tj.bkt.clouddn.com/17-7-6/97604932.jpg" alt=""></p><p>分别输入title,comment</p><p><img src="http://orkt468tj.bkt.clouddn.com/17-7-6/95775046.jpg" alt=""></p><p>点击<strong>Submit new issue</strong>后出现如下界面</p><p><img src="http://orkt468tj.bkt.clouddn.com/17-7-6/50982917.jpg" alt=""></p><p><strong>其中#2为本次新建issue的编号，这个编号很关键，你应该关注!!!</strong></p><h2 id="使用git-commit-m-‘’-为新建的issue提交代码"><a href="#使用git-commit-m-‘’-为新建的issue提交代码" class="headerlink" title="使用git commit -m ‘’ 为新建的issue提交代码"></a>使用git commit -m ‘’ 为新建的issue提交代码</h2><p>新建的issue也可以理解为新建bug或功能需要修复或开发，此时作为搬砖的你必须清楚你应该去修复那个issue，也就是前面<br>所说的编号<strong>#2</strong></p><p>…此处省略，假设你已经修改好了代码，此时可以提交代码了，此时应该注意了，跟在git commit -m 后的注释该<br>怎么写了，这里就不演示命令行了(文本不好换行)，以idea的git工具来演示</p><p><img src="http://orkt468tj.bkt.clouddn.com/17-7-6/61339354.jpg" alt=""></p><p>其中<strong>Commit Message</strong></p><ul><li>第一行为issue的编号</li><li>后面我想你应该清楚自己些什么</li></ul><p>当你把代码git push之后，去看项目issue页面此时，此时你找到你提交的issue会发现你的提交，如下图所示</p><p><img src="http://orkt468tj.bkt.clouddn.com/17-7-6/5469932.jpg" alt=""></p><h2 id="如何关闭issue"><a href="#如何关闭issue" class="headerlink" title="如何关闭issue"></a>如何关闭issue</h2><p>上面新建后issue的状态一直都是open,也就意思是bug或功能一直没有修改完。当你修改完了，测试通过后，你就应该关闭改issue了。<br>这个只需要在git commit -m 后加上一句<strong>close issue编号</strong>。push之后，你就会发现此时issue就已经是close状态了。</p><p><img src="http://orkt468tj.bkt.clouddn.com/17-7-6/14535653.jpg" alt=""></p><h2 id="git提交node-modules报文件名过长无法提交问题"><a href="#git提交node-modules报文件名过长无法提交问题" class="headerlink" title="git提交node-modules报文件名过长无法提交问题"></a>git提交node-modules报文件名过长无法提交问题</h2><p>当报如下错误时候</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable <span class="keyword">to</span> stat <span class="symbol">'node_modules</span>/gulp-connect/node_modules/gulp-util/node_modules/dateformat/node_modules/meow/node_modules/normalize-<span class="keyword">package</span>-data/node_modules/validate-npm-<span class="keyword">package</span>-license/node_modules/spdx-expression-parse/parser.generated.js': Filename too long</span><br></pre></td></tr></table></figure><p>可以使用以下命令来修复：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--system core.longpaths <span class="literal">true</span></span><br><span class="line">也可以仅设置当前项目：</span><br><span class="line">git<span class="built_in"> config </span>core.longpaths <span class="literal">true</span></span><br><span class="line">查看设置状态：</span><br><span class="line">git<span class="built_in"> config </span>core.longpaths</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.读书笔记《Java并发编程艺术》-Java内存模型</title>
      <link href="/2016/07/05/jmm-3-jmm/"/>
      <url>/2016/07/05/jmm-3-jmm/</url>
      <content type="html"><![CDATA[<h2 id="Java内存模型的抽象结构"><a href="#Java内存模型的抽象结构" class="headerlink" title="Java内存模型的抽象结构"></a>Java内存模型的抽象结构</h2><p>java线程之间的通信由Java内存模型控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。</p><ul><li>线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存，本地内存存储了该线程以读或写共享变量的副本，本地内存是JMM的一个抽象概念，并不真实存在。</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-2/29958085.jpg" alt=""></p><ul><li><p>内存间交互操作</p></li><li><p>lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。</p></li><li>unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。</li><li><p>write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。</p></li><li><p>JMM通过控制主内存与每个线程的本地内存之间的交互，来为java程序员提供内存可见性保障。</p></li></ul><h2 id="从源代码到指令序列的重排序"><a href="#从源代码到指令序列的重排序" class="headerlink" title="从源代码到指令序列的重排序"></a>从源代码到指令序列的重排序</h2><p>在执行程序的时，为了提高性能，编译器和处理器常常会有对指令做重排序。</p><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-2/62583489.jpg" alt=""></p><p>JMM属于语言级别的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器排序，为程序员提供一直的内存可见性保障。</p><h2 id="happens-before简介"><a href="#happens-before简介" class="headerlink" title="happens-before简介"></a>happens-before简介</h2><p>从jdk1.5开始，java使用JSR-133内存模型，使用happens-before的概念来阐述操作之间的内存可见性。一个happens-before的规则对应一个或多个编译器和处理器重排序规则。</p><h3 id="与程序员相关的happens-before的规则"><a href="#与程序员相关的happens-before的规则" class="headerlink" title="与程序员相关的happens-before的规则"></a>与程序员相关的happens-before的规则</h3><ul><li>程序顺序规则：一个线程中每个操作，happens-before于该线程中任意后续动作</li><li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁</li><li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读操作</li><li>传递性规则：如果A happens-before B,且B happens-before C,则你明白的！！</li><li>start()规则，如果线程A执行操作ThreadB.start(),那么线程A的ThreadB.start()操作happens-before于线程B的所有操作</li><li>join()规则，如果线程A执行ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回</li></ul><h2 id="双重检查锁定与延迟初始化"><a href="#双重检查锁定与延迟初始化" class="headerlink" title="双重检查锁定与延迟初始化"></a>双重检查锁定与延迟初始化</h2><p><a href="https://www.zhihu.com/question/35268028" target="_blank" rel="noopener">扩展阅读</a></p><p>在Java多线程程序中，有时候需要采用延迟初始化来降低初始化类和创建对象的开销，双重检查锁定是常见的延迟初始化技术，但是它是一个错误的用法。</p><h3 id="双重检查锁定的由来"><a href="#双重检查锁定的由来" class="headerlink" title="双重检查锁定的由来"></a>双重检查锁定的由来</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123; <span class="comment">//#1</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123; <span class="comment">//#2</span></span><br><span class="line">                <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123; <span class="comment">//#3</span></span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton(); <span class="comment">//#4 </span></span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>原因：是因为指令重排造成的。直接原因也就是 初始化一个对象并使一个引用指向他 这个过程不是原子的。#4</li></ul><h3 id="基于volatile解决措施"><a href="#基于volatile解决措施" class="headerlink" title="基于volatile解决措施"></a>基于volatile解决措施</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123; <span class="comment">//#1</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123; <span class="comment">//#2</span></span><br><span class="line">                <span class="keyword">if</span>(uniqueInstance == <span class="keyword">null</span>)&#123; <span class="comment">//#3</span></span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton(); <span class="comment">//#4 </span></span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于类初始化的解决方案"><a href="#基于类初始化的解决方案" class="headerlink" title="基于类初始化的解决方案"></a>基于类初始化的解决方案</h3><p>jvm在类初始化阶段，jvm会获取一个锁，这个锁可以同步多个线程对同一类的初始化。</p>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.读书笔记《Java并发编程艺术》-并发机制的底层实现原理</title>
      <link href="/2016/07/03/jmm-2-con-impl/"/>
      <url>/2016/07/03/jmm-2-con-impl/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java代码在编译成Class字节码，字节码被类加载器加载到JVM里，JVM执行字节码，最终转换成汇编指令在CPU上运行，Java中使用的并发机制依赖JVM的实现和CPU指令。</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><ul><li>轻量级的synchronized</li><li>可见性, 当一个线程修改的时候一个共享变量的时候，另一个线程能读取这个修改的值。</li><li>不会引起上下文的切换和调度</li></ul><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>java语言提供了volatile,在某些情况下，比锁更加方便，如果一个字段被声明成volatile，java线程内存模型确保所有的线程看到这个变量的值是一致的。</p><h3 id="CPU术语"><a href="#CPU术语" class="headerlink" title="CPU术语"></a>CPU术语</h3><ul><li>内存屏障，处理器指令，实现对内存操作的顺序的限制</li><li>缓冲行，CPU高速缓存中可以分配的最小单位</li><li>原子操作，不可中断的一个操作</li><li>缓存行填充，当处理器识别到从内存中读取的操作数是可缓存的，处理器将读取整个缓存行到适当的缓存</li><li>缓存命中，从高速缓存行填写的操作的内存位置任然是下一次处理器访问的地址的时候</li><li>写命中，当处理器将操作数写回到一个内存缓存的区域的时候，首先会检查这个缓存的内存地址是否在缓存行中，如果存在写会缓存，而不是写会内存。</li><li>写缺失，一个有效的缓存行被写入到不存在的内存区域。</li></ul><h3 id="volatile如何实现可见性"><a href="#volatile如何实现可见性" class="headerlink" title="volatile如何实现可见性"></a>volatile如何实现可见性</h3><ul><li>通过JIT编译器生成汇编指令来查看volatile进行写操作的时候，CPU会执行什么？ </li><li>有volatile的修饰的共享变量进行写操作的时候，会多出lock修饰的第二行汇编代码，通过查询IA-32架构软件开发手册可知Lock指令在多核处理器下：<ul><li>处理器处理缓存行的数据写会系统内存<ul><li>锁住缓存，一般锁总线，锁总线导致不能访问系统内存</li></ul></li><li>这个写内存的操作会使其他CPU里缓存了该内存地址的数据无效。<ul><li>使用MESI(修改独占共享无效)控制协议来维护内部缓存和其他处理器缓存的一致性</li><li>处理器使用嗅探技术保证它的内部缓存，系统内存，和其他处理器的缓存的数据在总线上输保持一致的。</li></ul></li></ul></li></ul><h2 id="synchronized的实现原理和应用"><a href="#synchronized的实现原理和应用" class="headerlink" title="synchronized的实现原理和应用"></a>synchronized的实现原理和应用</h2><ul><li>存在Java对象头里的，java对象头里的mark word默认存储对象的hashcode,分代年龄和锁标记。</li></ul><h3 id="表现形式"><a href="#表现形式" class="headerlink" title="表现形式"></a>表现形式</h3><ul><li>对于普通同步方法，锁是当前实例对象</li><li>对于静态同步方法，锁是当前类的Class对象</li><li>对于同步方法块，锁是synchronized括号里配置的对象</li></ul><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul><li>JVM基于进入和退出，Monitor对象来实现方法同步和代码块同步。</li><li>monitorenter指令是在编译后插入到同步代码块的开始位置</li><li>monitorexit指令插入到方法结束处和异常处</li></ul><h2 id="锁的升级和对比"><a href="#锁的升级和对比" class="headerlink" title="锁的升级和对比"></a>锁的升级和对比</h2><p>java1.6为了减少获得锁和释放锁带来的性能消耗，引入了偏向锁和轻量级锁，在java1.6中锁有4种状态，级别从低到高：</p><ul><li>无锁状态</li><li>偏向锁状态</li><li>轻量级锁状态</li><li>重量级锁状态</li></ul><p>这个状态会随着竞争逐渐升级，但不会降级。</p><h3 id="锁的优缺点对比"><a href="#锁的优缺点对比" class="headerlink" title="锁的优缺点对比"></a>锁的优缺点对比</h3><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><ul><li>优点，加解锁不需要额外的消耗，和执行非同步方法相比仅存纳秒级别的差距</li><li>缺点，如果线程存在锁竞争，会带来额外的撤销锁的消耗</li><li>场景，只有一个线程访问同步块场景</li></ul><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><ul><li>优点，竞争的线程不会阻塞，提高程序的响应性能</li><li>缺点，如果始终得不到锁竞争的线程，使用自旋会消耗CPU</li><li>场景，追求响应时间，同步代码块执行速度非常快</li></ul><h4 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h4><ul><li>优点，线程竞争不使用自旋，不消耗CPU</li><li>缺点，线程阻塞，响应时间很慢</li><li>场景，追求吞吐量，同步块执行时间很长</li></ul><h2 id="原子操作的实现原理"><a href="#原子操作的实现原理" class="headerlink" title="原子操作的实现原理"></a>原子操作的实现原理</h2><p>不可被中断的一个或一系列操作。</p><h3 id="处理器如何实现原子操作"><a href="#处理器如何实现原子操作" class="headerlink" title="处理器如何实现原子操作"></a>处理器如何实现原子操作</h3><ul><li>基于缓存加锁或总线加锁的方式来实现多处理之间的原子操作</li><li>处理器保证从系统内存中读取或写入一个字节是原子的</li></ul><h3 id="java如何实现原子操作"><a href="#java如何实现原子操作" class="headerlink" title="java如何实现原子操作"></a>java如何实现原子操作</h3><h4 id="使用循环CAS实现原子操作"><a href="#使用循环CAS实现原子操作" class="headerlink" title="使用循环CAS实现原子操作"></a>使用循环CAS实现原子操作</h4><p>JVM中的CAS操作正是利用了处理器提供的CMPXCHG指令实现的。自旋CAS实现的基本思路循环进行CAS操作直到成功为止。</p><h4 id="ABA"><a href="#ABA" class="headerlink" title="ABA"></a>ABA</h4><ul><li>描述，如果一个值原来是A,变成了B,又变成了A，那么使用CAS进行检查的时候会发现它的值没有发生变化，但实际上发生了变化。</li><li>解决思路,在变量前面加上版本号，每次变量更新的时候把版本号加1，从JDk1.5提供了AtomicStampedReferenced来解决ABA,首先检查当前引用是否等于预期引用，并且检查当前标志是都等于预期标志，如果全相等，则以原子方式将该引用的值设置为给定的更新值。</li></ul><h4 id="循环时间开销大"><a href="#循环时间开销大" class="headerlink" title="循环时间开销大"></a>循环时间开销大</h4><ul><li>自旋CAS如果长时间不成功的话，会给CPU带来非常大的执行开销。</li></ul><h4 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h4><h3 id="使用锁机制实现原子操作"><a href="#使用锁机制实现原子操作" class="headerlink" title="使用锁机制实现原子操作"></a>使用锁机制实现原子操作</h3><ul><li>锁机制保证了只有获得锁的线程才能够操作锁定的内存区域。JVM内部实现了很多锁的机制。</li><li>JVM实现琐的方式都是用了循环CAS，即当一个线程想进入同步块的时候会使用循环CAS的方式来实现获取锁，当它退出同步代码块的时候使用CAS循环释放锁。</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.读书笔记《Java并发编程艺术》-并发编程的挑战</title>
      <link href="/2016/07/02/jmm-1-introduce/"/>
      <url>/2016/07/02/jmm-1-introduce/</url>
      <content type="html"><![CDATA[<h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><ul><li>CPU通过时间片分配算法来循环执行任务</li></ul><h3 id="多线程一定快吗？"><a href="#多线程一定快吗？" class="headerlink" title="多线程一定快吗？"></a>多线程一定快吗？</h3><ul><li>在一定并发下，线程有创建和上下文切换的开销</li></ul><h3 id="如何减少上下文明切换"><a href="#如何减少上下文明切换" class="headerlink" title="如何减少上下文明切换"></a>如何减少上下文明切换</h3><ul><li>无锁并发编程，多线程竞争锁的时候，会引起上下文的切换，所以多线程处理数据时，可以用一些方法来避免使用锁，如将数据的ID的按照hash算法取模分段，不同线程处理不同段的数据。</li><li>CAS算法</li><li>使用最少线程。不要创建大量线程处于等待状态</li><li>协程，在单线程里实现多任务的调度，并在单线程里位置多个任务之间的切换</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="避免死锁的的几个常见方法："><a href="#避免死锁的的几个常见方法：" class="headerlink" title="避免死锁的的几个常见方法："></a>避免死锁的的几个常见方法：</h3><ul><li>避免一个线程同时获取多个锁</li><li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源</li><li>尝试使用定时锁，使用lock.tryLock(timeout)来代替使用内部锁机制</li><li>对于数据库锁，加锁和解锁必须在一个数据库的连接里，否则会出现解锁失败的情况。</li></ul><h2 id="资源限制的挑战"><a href="#资源限制的挑战" class="headerlink" title="资源限制的挑战"></a>资源限制的挑战</h2><p>资源限制是指在并发编程的时候，程序的执行速度受限于计算机硬件资源或软件资源。例如服务器带宽，硬盘读写速度，CPU处理速度，数据库的连接数，和socket的连接数。</p><h3 id="如何解决资源限制的问题"><a href="#如何解决资源限制的问题" class="headerlink" title="如何解决资源限制的问题"></a>如何解决资源限制的问题</h3><ul><li>硬件资源的限制，可以考虑使用集群并行的执行程序，让程序在多机器上运行</li><li>软件资源的限制，使用资源池将资源复用</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《无怨的青春》—席慕容</title>
      <link href="/2016/06/20/poem-2/"/>
      <url>/2016/06/20/poem-2/</url>
      <content type="html"><![CDATA[<p>彼时曾相与，不问天有涯。<br>我以前并没有完全理解这句话的含义，但自从遇见了你，渐渐的，我好像是懂了。<br>这该是怎样的缘分，让你闯进了我的生活，2015年8月14日，我们算是真正的开始相处吧，你我都是狮子座，本以为你会和我一样，脾气执拗，强势逼人，可你竟温柔至此，对待我更是始终如一的好。<br>以前我听过一句话，“总爱逞强，以至于错过了太多温柔。”<br>可能我上辈子做了很多好事，这辈子才能遇到你，可好事做的不够多，所以没有办法陪你到最后。</p><p>在年轻的时候，<br>如果你爱上了一个人，<br>请你，请你一定要温柔地对他<br>不管你们相爱的时间有多长或多短，<br>若你们能始终温柔地相待，<br>那么，<br>所有的时刻都将是一种无暇的美丽。</p><p>若不得不分离，<br>也要好好地说声再见，<br>也要在心里存着感谢，<br>感谢他给了你一份记忆。<br>长大了以后，<br>你才会知道，<br>在蓦然回首的刹那，<br>没有怨恨的青春才会了无遗憾，<br>如山冈上那轮静静的满月。</p>]]></content>
      
      <categories>
          
          <category> 1房2人3餐4季 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>点着灯的家（节选）</title>
      <link href="/2016/06/16/poem-1/"/>
      <url>/2016/06/16/poem-1/</url>
      <content type="html"><![CDATA[<p>其实 我们<br>所求卑微 不过只是希望<br>孩子都能平安长大<br>在每个温暖的节庆里<br>在每张泛黄的相片里  我们<br>都能紧紧地搂着他</p><p>其实 我们<br>所求卑微 不过只是希望<br>能够有段无怨无惊的岁月<br>有片可以耕种的田野<br>有些知心的友伴  有些<br>可以诉说可以互相交换的期盼</p><p>于是 眼神专注  微笑慢慢绽放<br>我们在镜头之前或是端坐或是拥抱<br>慎重地留下 几张<br>将来也许可以传给子孙的家族合照</p><p>其实  我们<br>所求何其卑微<br>人生一世  辗转天涯<br>想保有的不过就是像这样一小间的<br>点着灯的房子<br>一小间的点着灯的家</p><p>— 选自《席慕蓉诗集：边缘光影》，作家出版</p>]]></content>
      
      <categories>
          
          <category> 1房2人3餐4季 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.git-usage</title>
      <link href="/2016/06/08/git-3/"/>
      <url>/2016/06/08/git-3/</url>
      <content type="html"><![CDATA[<h2 id="GIT介绍"><a href="#GIT介绍" class="headerlink" title="GIT介绍"></a>GIT介绍</h2><ul><li>Git 是一个开源的分布式版本控制软件,用以有效、高速的处理从很小到非常大的项目版本管理。</li><li>Git 最初是由Linus Torvalds设计开发的，用于管理Linux内核开发。</li><li>Git 是根据GNU通用公共许可证版本2的条款分发的自由/免费软件。</li></ul><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><p><a href="https://git-scm.com/" target="_blank" rel="noopener">下载与安装地址</a></p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>GitHub是一个基于Git的远程文件托管平台（同OSChina git,Coding等）</p><p>Git本身完全可以做到版本控制，但其所有内容以及版本记录只能保存在本机，<br>如果想要将文件内容以及版本记录同时保存在远程，则需要结合GitHub来使用。</p><ul><li>无GitHub：在本地 .git 文件夹内维护历时文件</li><li>有GitHub：在本地 .git 文件夹内维护历时文件，同时也将历时文件托管在远程仓库</li></ul><h3 id="集中式与分布式版本控制区别"><a href="#集中式与分布式版本控制区别" class="headerlink" title="集中式与分布式版本控制区别"></a>集中式与分布式版本控制区别</h3><ul><li>集中式：远程服务器保存所有版本，用户客户端有某个版本</li><li>分布式：远程服务器保存所有版本，用户客户端有所有版本</li></ul><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><ul><li>git config –local user.name ‘CHILAM’</li><li>git config –local user.email <a href="mailto:&#39;514644743@qq.com" target="_blank" rel="noopener">&#39;514644743@qq.com</a>‘</li></ul><h3 id="工作区与版本库"><a href="#工作区与版本库" class="headerlink" title="工作区与版本库"></a>工作区与版本库</h3><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/51406836.jpg" alt=""></p><ul><li>工作区</li></ul><p>当前开发程序所在目录称为工作区，即：工作开发都是在该目录，该区域的文件会有状态的变化<br>且状态由git自动检测，如果程序中文件做任何操作（增、删、改），文件状态均会被检测到，<br>可以使用 【git status】命令查看。</p><ul><li>版本库</li></ul><p>工作区检测到有文件发生变化，那么意味着较上一个版本之后对程序进行了修改，<br>修改完成之后，可以当做下一版本进行提交，那么就是执行 【git add .】 将所有文件提交到暂存区，<br>然后再执行【git commit -m ‘又一个版本’】提交到版本库的分支即可，之后可以使用【git log】命令查看版本记录。</p><ol><li>git init，初始化，表示即将对当前文件夹进行版本控制。</li><li>git status，查看Git当前状态，如：那些文件被修改过、那些文件还未提交到版本库等。</li><li>git add 文件名，将指定文件添加到版本库的暂存状态。</li><li>git commit -m ‘提交信息’，将暂存区的文件提交到版本库的分支。</li><li>git log，查看提交记录，即：历史版本记录</li></ol><h3 id="回到过去"><a href="#回到过去" class="headerlink" title="回到过去"></a>回到过去</h3><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/34972493.jpg" alt=""></p><h3 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h3><p>stash用于将工作区发生变化的所有文件获取临时存储在“某个地方”，将工作区还原当前版本未操作前的状态；<br>stash还可以将临时存储在“某个地方”的文件再次拿回到工作区。</p><ol><li>git stash 将当前工作区所有修改过的内容存储到“某个地方”，将工作区还原到当前版本未修改过的状态</li><li>git stash list 查看“某个地方”存储的所有记录</li><li>git stash clear 清空“某个地方”</li><li>git stash pop   将第一个记录从“某个地方”重新拿到工作区（可能有冲突）</li><li>git stash apply 编号, 将指定编号记录从“某个地方”重新拿到工作区（可能有冲突）</li><li>git stash drop  编号，删除指定编号的记录</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">chilam@maxp MINGW64 ~/Desktop/test (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">        modified:   me.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br><span class="line"></span><br><span class="line">chilam@maxp MINGW64 ~/Desktop/<span class="keyword">test</span> (<span class="keyword">master</span>)</span><br><span class="line">$ cat me.txt</span><br><span class="line">hello</span><br><span class="line">hi</span><br><span class="line"></span><br><span class="line">chilam@maxp MINGW64 ~/Desktop/<span class="keyword">test</span> (<span class="keyword">master</span>)</span><br><span class="line">$ git stash</span><br><span class="line"><span class="keyword">warning</span>: LF will be replaced <span class="keyword">by</span> CRLF <span class="keyword">in</span> me.txt.</span><br><span class="line">The <span class="keyword">file</span> will have its original line endings <span class="keyword">in</span> your working directory.</span><br><span class="line">Saved working <span class="keyword">directory</span> <span class="keyword">and</span> <span class="keyword">index</span> state WIP <span class="keyword">on</span> <span class="keyword">master</span>: <span class="number">0</span>b050f7 <span class="keyword">first</span></span><br><span class="line"></span><br><span class="line">chilam@maxp MINGW64 ~/Desktop/<span class="keyword">test</span> (<span class="keyword">master</span>)</span><br><span class="line">$ git stash <span class="keyword">list</span></span><br><span class="line">stash@&#123;<span class="number">0</span>&#125;: WIP <span class="keyword">on</span> <span class="keyword">master</span>: <span class="number">0</span>b050f7 <span class="keyword">first</span></span><br><span class="line"></span><br><span class="line">chilam@maxp MINGW64 ~/Desktop/<span class="keyword">test</span> (<span class="keyword">master</span>)</span><br><span class="line">$ git <span class="keyword">status</span></span><br><span class="line"><span class="keyword">On</span> branch <span class="keyword">master</span></span><br><span class="line"><span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</span><br><span class="line"></span><br><span class="line">chilam@maxp MINGW64 ~/Desktop/<span class="keyword">test</span> (<span class="keyword">master</span>)</span><br><span class="line">$ git stash pop</span><br><span class="line"><span class="keyword">On</span> branch <span class="keyword">master</span></span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">        modified:   me.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br><span class="line">Dropped refs/stash@&#123;<span class="number">0</span>&#125; (<span class="number">47</span>c3b5e30d1127cae52ae2f3647be8e84c91309f)</span><br></pre></td></tr></table></figure><h3 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h3><p>branch称为分支，默认仅有一个名为master的分支。一般开发新功能流程为：<br>开发新功能时会在分支dev上进行，开发完毕后再合并到master分支。</p><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/19240863.jpg" alt=""></p><ol><li>git branch 分支名称:创建分支</li><li>git checkout 分支名称:切换分支</li><li>git branch -m 分支名称:创建并切换到指定分支</li><li>git branch:查看所有分支</li><li>git branch -d 分支名称:删除分支</li><li>git merge 分支名称:将指定分支合并到当前分支</li></ol><h3 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h3><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/2755773.jpg" alt=""></p><ul><li>git remote add [shortname] [url]</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">touch README.md</span><br><span class="line">git init</span><br><span class="line">git <span class="keyword">add</span><span class="bash"> README.md</span></span><br><span class="line"><span class="bash">git commit -m <span class="string">"first commit"</span></span></span><br><span class="line"><span class="bash">git remote add origin gogs@192.168.112.123:maxp/test.git</span></span><br><span class="line"><span class="bash">git push -u origin master</span></span><br></pre></td></tr></table></figure><h4 id="关联多个远程库"><a href="#关联多个远程库" class="headerlink" title="关联多个远程库"></a>关联多个远程库</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> company gogs@<span class="number">192.168</span><span class="meta">.10</span><span class="meta">.145</span>:maxp/<span class="keyword">test</span>.git</span><br><span class="line">git <span class="keyword">push</span> -u company master</span><br></pre></td></tr></table></figure><h4 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">company gogs<span class="variable">@192</span>.<span class="number">168.110</span>.<span class="number">123</span><span class="symbol">:maxp/test1</span>.git (fetch)</span><br><span class="line">company gogs<span class="variable">@192</span>.<span class="number">168.110</span>.<span class="number">123</span><span class="symbol">:maxp/test1</span>.git (push)</span><br></pre></td></tr></table></figure><h4 id="删除远程仓库信息"><a href="#删除远程仓库信息" class="headerlink" title="删除远程仓库信息"></a>删除远程仓库信息</h4><ul><li>git remote rm shortname </li></ul><h3 id="用户凭证"><a href="#用户凭证" class="headerlink" title="用户凭证"></a>用户凭证</h3><p>由于Git和Github交互操作可能会很频繁，那么一定少了用户授权的操作，<br>为了防止每次操作重复输入用户名和密码，Git提供了两种解决方法：</p><h4 id="秘钥"><a href="#秘钥" class="headerlink" title="秘钥"></a>秘钥</h4><p>首先创建一对秘钥  ssh-keygen -t rsa，然后将 id_rsa.pub (公钥)内容拷贝到github中<br>日后操作无需再输入用户名和密码。</p><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/77194169.jpg" alt=""></p><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><ol><li>git tag -a v1.0 -m ‘版本介绍’       本地创建Tag</li><li>git show v1.0                       查看</li><li>git tags -n                         查看本地Tag</li><li>git tag -l ‘v1.4.2.*’               查看本地Tag，模糊匹配</li><li>git tag -d v1.0                     删除Tag</li><li>git push origin :refs/tags/v0.2     更新远程tag</li><li>git checkout v.10                   切换tag</li><li>git fetch origin tag V1.2</li><li>git push origin  –tags</li><li>git pull origin  –tags</li></ol><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><ul><li>以斜杠“/”开头表示目录；</li><li>以星号“*”通配多个字符；</li><li>以问号“?”通配单个字符</li><li>以方括号“[]”包含单个字符的匹配列表；</li><li>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</li></ul><p><a href="https://github.com/github/gitignore" target="_blank" rel="noopener">很有用的gitignore文件</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">*.log</span><br><span class="line">public/</span><br><span class="line">node_modules/</span><br><span class="line">.deploy*/</span><br><span class="line">.idea/</span><br></pre></td></tr></table></figure><h2 id="git在windows上的安装问题"><a href="#git在windows上的安装问题" class="headerlink" title="git在windows上的安装问题"></a>git在windows上的安装问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在我的台式机安装好Git后，邮件打开git gui报Git fatal:open /dev/null or dup failed</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>原因大概是百度了哈， 非即插即用驱动文件null.sys问题。</p><h3 id="解决措施"><a href="#解决措施" class="headerlink" title="解决措施"></a>解决措施</h3><ul><li><p>替换  windows/system32/drivers/null.sys为网盘中的文件即可。</p></li><li><p><a href="https://pan.baidu.com/s/11N_Dtnv5Twn9LFQFoIytjg" target="_blank" rel="noopener">null.sys下载，密码：ctrn</a></p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.git-gogs</title>
      <link href="/2016/06/08/git-2/"/>
      <url>/2016/06/08/git-2/</url>
      <content type="html"><![CDATA[<h2 id="gogs搭建"><a href="#gogs搭建" class="headerlink" title="gogs搭建"></a>gogs搭建</h2><h3 id="环境需求"><a href="#环境需求" class="headerlink" title="环境需求"></a>环境需求</h3><ul><li><p>linux，新建用户gogs/gogs</p></li><li><p>JDK1.8(安装略)</p></li><li><p>Git客户端</p></li><li><p>Gogs安装程序</p></li></ul><h3 id="Git客户端安装"><a href="#Git客户端安装" class="headerlink" title="Git客户端安装"></a>Git客户端安装</h3><ul><li><p><a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">官方安装文档</a></p></li><li><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载源码包</a></p></li></ul><h3 id="Gogs安装"><a href="#Gogs安装" class="headerlink" title="Gogs安装"></a>Gogs安装</h3><ul><li><p><a href="https://github.com/gogits/gogs/releases" target="_blank" rel="noopener">下载</a></p></li><li><p>解压下载文件并修改配置文件/home/gogs/gogs/custom/conf/app.ini</p></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">APP_NAME</span> = YHGIT</span><br><span class="line"><span class="attr">RUN_USER</span> = gogs</span><br><span class="line"><span class="attr">RUN_MODE</span> = prod</span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">DB_TYPE</span>  = sqlite3</span><br><span class="line"><span class="attr">HOST</span>     = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span></span><br><span class="line"><span class="attr">NAME</span>     = gogs</span><br><span class="line"><span class="attr">USER</span>     = root</span><br><span class="line"><span class="attr">PASSWD</span>   =</span><br><span class="line"><span class="attr">SSL_MODE</span> = disable</span><br><span class="line"><span class="attr">PATH</span>     = data/gogs.db</span><br><span class="line"></span><br><span class="line"><span class="section">[repository]</span></span><br><span class="line"><span class="attr">ROOT</span> = /home/gogs/gogs-repositories</span><br><span class="line"></span><br><span class="line"><span class="section">[server]</span></span><br><span class="line"><span class="attr">DOMAIN</span>           = <span class="number">192.168</span>.XX.XX</span><br><span class="line"><span class="attr">HTTP_PORT</span>        = <span class="number">8888</span></span><br><span class="line"><span class="attr">ROOT_URL</span>         = http://<span class="number">192.168</span>.XX.XX:<span class="number">8888</span>/</span><br><span class="line"><span class="attr">DISABLE_SSH</span>      = <span class="literal">false</span></span><br><span class="line"><span class="attr">SSH_PORT</span>         = <span class="number">22</span></span><br><span class="line"><span class="attr">START_SSH_SERVER</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">OFFLINE_MODE</span>     = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mailer]</span></span><br><span class="line"><span class="attr">ENABLED</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[service]</span></span><br><span class="line"><span class="attr">REGISTER_EMAIL_CONFIRM</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ENABLE_NOTIFY_MAIL</span>     = <span class="literal">false</span></span><br><span class="line"><span class="attr">DISABLE_REGISTRATION</span>   = <span class="literal">false</span></span><br><span class="line"><span class="attr">ENABLE_CAPTCHA</span>         = <span class="literal">true</span></span><br><span class="line"><span class="attr">REQUIRE_SIGNIN_VIEW</span>    = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[picture]</span></span><br><span class="line"><span class="attr">DISABLE_GRAVATAR</span>        = <span class="literal">false</span></span><br><span class="line"><span class="attr">ENABLE_FEDERATED_AVATAR</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[session]</span></span><br><span class="line"><span class="attr">PROVIDER</span> = file</span><br><span class="line"></span><br><span class="line"><span class="section">[log]</span></span><br><span class="line"><span class="attr">MODE</span>      = file</span><br><span class="line"><span class="attr">LEVEL</span>     = info</span><br><span class="line"><span class="attr">ROOT_PATH</span> = /home/gogs/gogs/log</span><br><span class="line"></span><br><span class="line"><span class="section">[security]</span></span><br><span class="line"><span class="attr">INSTALL_LOCK</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">SECRET_KEY</span>   = xyU8OysEvjlL0iP</span><br></pre></td></tr></table></figure><ul><li>选择自带数据库sqllite3,解压，进入如下目录，启动即可：</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[gogs<span class="variable">@SKYEYE001</span> gogs]<span class="variable">$ </span>pwd</span><br><span class="line">/home/gogs/gogs</span><br><span class="line">[gogs<span class="variable">@SKYEYE001</span> gogs]<span class="variable">$ </span>/gogs web</span><br></pre></td></tr></table></figure><h2 id="使用私有Git服务器"><a href="#使用私有Git服务器" class="headerlink" title="使用私有Git服务器"></a>使用私有Git服务器</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ul><li><a href="http://192.168.XX.XX:8888/user/login" target="_blank" rel="noopener">http://192.168.XX.XX:8888/user/login</a></li><li>管理员账号gogs/gogs</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/37150781.jpg" alt=""></p><h3 id="管理端"><a href="#管理端" class="headerlink" title="管理端"></a>管理端</h3><ul><li>用户管理</li><li>组织管理</li><li>仓库管理</li><li>服务器配置</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-8/6011945.jpg" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5.读书笔记《深入理解Java虚拟机》-类加载机制</title>
      <link href="/2016/05/16/jvm-5-classload/"/>
      <url>/2016/05/16/jvm-5-classload/</url>
      <content type="html"><![CDATA[<h2 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h2><ul><li><p>虚拟机把类的数据从class文件加载到内存，对数据进行校验，转换解析和初始化，最终形成可以被虚拟机使用的java类型。</p></li><li><p>类型的加载，连接和初始化都是程序运行期间完成</p></li></ul><h2 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h2><h3 id="类初始化时机"><a href="#类初始化时机" class="headerlink" title="类初始化时机"></a>类初始化时机</h3><ol><li><p>new实例化对象，读取或设置类变量，以及调用类方法</p></li><li><p>对类进行反射调用</p></li><li><p>父类优先子类初始化（接口初始化并不要求初始化父接口）</p></li><li><p>虚拟机启动，指定执行的主类</p></li><li><p>使用 jdk1.7动态语言支持…</p></li></ol><h3 id="被动引用"><a href="#被动引用" class="headerlink" title="被动引用"></a>被动引用</h3><ul><li><p>通过子类访问父类静态字段，只会初始化父类</p></li><li><p>通过数组定义引用类不会触发，触发的newarray指令</p></li></ul><h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><ol><li><p>通过一个类的完全限定名来获取此类的二进制字节流</p><ul><li>从jar,war,ear包中读取</li><li>从网络中获取</li><li>运行时计算生成（动态代理sun.misc.ProxyGenerator#generateProxyClass(java.lang.String, java.lang.Class&lt;?&gt;[])）</li><li>其他文件生成jsp-class</li></ul></li><li><p>将这个二进制的字节流所代表的静态存储结构转换为方法区的运行时数据结构</p></li><li><p>在内存中生成一个代表该类的java.lang.Class对象，作为方法区这个类的访问入口</p></li></ol><h4 id="数组类"><a href="#数组类" class="headerlink" title="数组类"></a>数组类</h4><ul><li>数据类本身有虚拟机创建</li><li>数据类元素类型还是有虚拟机类加载器创建</li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>确保Class文件的字节流中包含信息符合当前虚拟机的要求，并且不会危害虚拟机本身</p><ol><li><p>文件格式验证</p><ul><li>魔数格式</li><li>主，次版本号是否在当前虚拟机处理范围内</li><li>常量池中常量是否有不被支持的常量类型</li></ul></li><li><p>元数据验证，对字节码描述的信息进行语义分析，保证不存在不符合java语言规范的元数据信息</p><ul><li>这个类是否有父类</li><li>这个类的父类是否继承了不允许被继承的父类</li><li>继承抽象类是否实现了抽象方法</li></ul></li><li><p>字节码验证，主要通过数据流和控制流分析，确定程序语义的合法性，符合逻辑</p><ul><li>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作</li><li>保证跳转指令不会跳转到方法体外的字节码上去</li><li>保证方法体中的类型转换是有效的</li></ul></li><li><p>符号引用验证，确保解析动作能正常执行</p></li></ol><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul><li>正式为类变量分配内存并设置类变量的默认初始值的阶段</li></ul><h3 id="解析，虚拟机将常量池内的符号引用替换为直接引用的过程"><a href="#解析，虚拟机将常量池内的符号引用替换为直接引用的过程" class="headerlink" title="解析，虚拟机将常量池内的符号引用替换为直接引用的过程"></a>解析，虚拟机将常量池内的符号引用替换为直接引用的过程</h3><ol><li><p>类或接口的解析</p></li><li><p>字段解析</p></li><li><p>类方法解析</p></li><li><p>接口方法解析</p></li></ol><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><p>初始化阶段是执行类构造器<clinent>()方法的过程</clinent></p></li><li><p><client>()方法是编译器自动收集类汇总的所有类变量的赋值动作和静态语句块中的语句合并生成</client></p></li><li><p>父类的<client>()方法会优先被执行</client></p></li><li><p>接口不会优先初始化父接口的<client>()方法，只要当父接口中定义的变量使用时，父接口才会被初始化。</client></p></li></ul><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><ul><li>对于任意一个类，都需要由它的类加载器和类本身一同确立在java虚拟机中的唯一性。</li></ul><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><ul><li><p>启动类加载器，Bootstrap ClassLoader</p></li><li><p>扩展类加载器，Extension ClassLoader</p></li><li><p>应用程序加载器，Application ClassLoader</p></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4.读书笔记《深入理解Java虚拟机》-class结构</title>
      <link href="/2016/05/15/jvm-4-class/"/>
      <url>/2016/05/15/jvm-4-class/</url>
      <content type="html"><![CDATA[<h2 id="语言无关性"><a href="#语言无关性" class="headerlink" title="语言无关性"></a>语言无关性</h2><ul><li><p>虚拟机和字节码。</p></li><li><p>class文件中包含了Java虚拟机的指令集和符号以及若干其他辅助信息。</p></li></ul><h2 id="class类文件的结构"><a href="#class类文件的结构" class="headerlink" title="class类文件的结构"></a>class类文件的结构</h2><h3 id="java8虚拟机规范中class文件格式"><a href="#java8虚拟机规范中class文件格式" class="headerlink" title="java8虚拟机规范中class文件格式"></a><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html" target="_blank" rel="noopener">java8虚拟机规范中class文件格式</a></h3><ol><li><p>magic,魔数，u4,确定该class文件是否被虚拟机接受，默认值CADEBABE</p></li><li><p>minor_version,次版本号，u2</p></li><li><p>major_version,主版本号，u2,jdk1.1(45),jdk1.2(46)…依次加1，jdk1.8(52)</p></li><li><p>constant_pool_count,常量池数量，u2,值是从1开始计算的，所以真实数量值要减1</p></li><li><p>constant_pool,常量池，cp_info，主要存放字面量（utf8,Interger）和符号引用(类和借口，字段，类中方法)</p></li><li><p>access_flags,访问标志，u2，访问标志，识别类和接口的访问信息（是类是接口？public类型？Final?Abstract?）</p></li><li><p>this_class,类索引，u2，类索引，指向CONSTANCT_Class_info类型的常量</p></li><li><p>super_class，父类索引，u2，父类索引，指向CONSTANCT_Class_info类型的常量</p></li><li><p>interfaces_count,接口数量</p></li><li><p>interfaces，接口</p></li><li><p>fields_count，</p></li><li><p>fields，描述接口或类中声明的变量（类和实例），包含访问作用域，static,final,voliate,transient</p></li><li><p>methods_count</p></li><li><p>methods,描述方法相关信息</p></li><li><p>attribute_count,属性</p></li><li><p>attributes</p><ul><li><p>Code,java程序方法的代码经过编译后字节码指令存放地址</p></li><li><p>Exceptions,方法throw的异常信息</p></li><li><p>LineNumberTable,描述Java源代码行号和字节码行号的映射</p></li><li><p>Signature,为擦除泛型设计的，为了反射的时候获取运行的类型</p></li><li><p>Inner Class,内部类列表</p></li></ul></li></ol><h2 id="字节码指令简介"><a href="#字节码指令简介" class="headerlink" title="字节码指令简介"></a>字节码指令简介</h2><ol><li><p>加载和存储指令用于将数据在帧栈中局部变量表和操作数栈之间来回传输</p><ul><li>将一个局部变量加载到操作栈：iload,lload,fload,dload</li><li>将一个数值从操作栈存储到局部变量：istore,lstroe.fstror,dstroe</li><li>将一个常量加载到操作数栈：bipush,sipush,iconst,lconst,fconst</li></ul></li><li><p>运算指令</p><ul><li>加:iadd,fadd,</li><li>减：isub,fsub</li><li>乘：imul,fmul</li><li>除：idiv,fdiv</li><li>求余：irem</li><li>取反：ineg</li><li>位移：ishl,ishr,iushr</li><li>按位或：ior</li><li>按位与：iand</li><li>局部变量自增：iinc</li><li>比较: dcmpg,dcmpl</li></ul></li><li><p>类型转换指令可以将2种不同的数值类型进行相互转换</p><ul><li>无需显示的转换指令，int-&gt;long,long-&gt;float,double</li><li>处理窄化类型转换需要使用显示指令转换，i2b,i2c,i2s</li></ul></li><li><p>对象的创建与访问指令</p><ul><li>创建类实例：new</li><li>创建数组：newarray,anewarray</li><li>访问类字段或实例字段:getfield,putfiled,getstatic,putstatic</li><li>把一个数组元素加载到操作栈:baload,caload,saload</li><li>将一个操作数栈的值存储到数组元数中，bastore,castore</li><li>取数组长度指令：arraylength</li><li>检查类实例指令：instanceof</li></ul></li><li><p>操作数栈管理指令</p><ul><li>将操作数栈的栈顶的一个或2个元素出站：pop,pop2</li><li>复制栈顶一个或2个镇定的数值并重新压入栈顶：dup,dup2</li><li>将栈顶最顶端2个元素互换：swap</li></ul></li><li><p>控制转移指令</p><ul><li>条件分支：ifeq,iflt,ifle</li><li>复合条件分支;tableswitches</li><li>无条件分支： goto</li></ul></li><li><p>方法调用和返回指令</p><ul><li>invokevirtual:调用对象的实例方法</li><li>invokeinterface:调用接口方法，调用实现了该接口方法的方法</li><li>invokespecial:调用一些需要特殊处理的实例方法，包括实例初始化方法，私有方法，和父类方法</li><li>invokestatic:调用类方法</li><li>invokedynamic:用于在运行时动态解析出调用点限定符号引用的方法</li></ul></li><li><p>异常处理指令</p><ul><li>athrow</li></ul></li><li><p>同步指令</p><ul><li>支持方法级别同步，隐式的</li><li>方法内部一段指令序列的同步，通过monitorenter,monitorexit指令来控制</li></ul></li></ol>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.读书笔记《深入理解Java虚拟机》-jvm相关工具</title>
      <link href="/2016/05/14/jvm-3-tools/"/>
      <url>/2016/05/14/jvm-3-tools/</url>
      <content type="html"><![CDATA[<h2 id="JPS-JVM-Process-Status-Tool"><a href="#JPS-JVM-Process-Status-Tool" class="headerlink" title="JPS(JVM Process Status Tool)"></a>JPS(JVM Process Status Tool)</h2><ul><li>虚拟机进程状况工具，显示指定系统内所有的HotSpot的虚拟机进程</li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ jps -help</span><br><span class="line">usage: jps [-help]</span><br><span class="line">       jps [-q] [-mlvV] <span class="meta">[&lt;hostid&gt;]</span></span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">    &lt;hostid&gt;:      &lt;hostname&gt;[:&lt;port&gt;]</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ jps -l</span><br><span class="line"><span class="number">13896</span> org<span class="selector-class">.jetbrains</span><span class="selector-class">.idea</span><span class="selector-class">.maven</span><span class="selector-class">.server</span><span class="selector-class">.RemoteMavenServer</span></span><br><span class="line"><span class="number">1432</span> sun<span class="selector-class">.tools</span><span class="selector-class">.jps</span><span class="selector-class">.Jps</span></span><br><span class="line"><span class="number">4776</span> org<span class="selector-class">.jetbrains</span><span class="selector-class">.jps</span><span class="selector-class">.cmdline</span><span class="selector-class">.Launcher</span></span><br><span class="line"><span class="number">2220</span></span><br></pre></td></tr></table></figure><ul><li>13896进程ID</li><li>org.jetbrains.idea.maven.server.RemoteMavenServer 虚拟机运行的主类</li></ul><h2 id="jstat-JVM-Statistics-Monitoring-Tool"><a href="#jstat-JVM-Statistics-Monitoring-Tool" class="headerlink" title="jstat(JVM Statistics Monitoring Tool)"></a>jstat(JVM Statistics Monitoring Tool)</h2><ul><li>虚拟机统计信息监视工具，收集虚拟机各方面（类装载，内存，垃圾收集，JIT编译）的运行参数</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ jstat -help</span><br><span class="line">Usage: jstat -help|-options</span><br><span class="line">       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;<span class="built_in">count</span>&gt;]]</span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">  &lt;option&gt;      An option reported <span class="keyword">by</span> <span class="keyword">the</span> -options option</span><br><span class="line">  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes <span class="keyword">the</span> following form:</span><br><span class="line">                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]</span><br><span class="line">                Where &lt;lvmid&gt; <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">local</span> vm identifier <span class="keyword">for</span> <span class="keyword">the</span> target</span><br><span class="line">                Java virtual machine, typically a process <span class="built_in">id</span>; &lt;hostname&gt; <span class="keyword">is</span></span><br><span class="line">                <span class="keyword">the</span> <span class="built_in">name</span> <span class="keyword">of</span> <span class="keyword">the</span> host <span class="built_in">running</span> <span class="keyword">the</span> target Java virtual machine;</span><br><span class="line">                <span class="keyword">and</span> &lt;port&gt; <span class="keyword">is</span> <span class="keyword">the</span> port <span class="built_in">number</span> <span class="keyword">for</span> <span class="keyword">the</span> rmiregistry <span class="keyword">on</span> <span class="keyword">the</span></span><br><span class="line">                target host. See <span class="keyword">the</span> jvmstat documentation <span class="keyword">for</span> a more complete</span><br><span class="line">                description <span class="keyword">of</span> <span class="keyword">the</span> Virtual Machine Identifier.</span><br><span class="line">  &lt;lines&gt;       Number <span class="keyword">of</span> samples <span class="keyword">between</span> header lines.</span><br><span class="line">  &lt;interval&gt;    Sampling interval. The following forms are allowed:</span><br><span class="line">                    &lt;n&gt;[<span class="string">"ms"</span>|<span class="string">"s"</span>]</span><br><span class="line">                Where &lt;n&gt; <span class="keyword">is</span> an <span class="built_in">integer</span> <span class="keyword">and</span> <span class="keyword">the</span> suffix specifies <span class="keyword">the</span> units <span class="keyword">as</span></span><br><span class="line">                milliseconds(<span class="string">"ms"</span>) <span class="keyword">or</span> seconds(<span class="string">"s"</span>). The default units are <span class="string">"ms"</span>.</span><br><span class="line">  &lt;<span class="built_in">count</span>&gt;       Number <span class="keyword">of</span> samples <span class="keyword">to</span> take <span class="keyword">before</span> terminating.</span><br><span class="line">  -J&lt;flag&gt;      Pass &lt;flag&gt; directly <span class="keyword">to</span> <span class="keyword">the</span> runtime system.</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ jstat -class <span class="number">4776</span></span><br><span class="line">Loaded  Bytes  Unloaded  Bytes     Time</span><br><span class="line">  <span class="number">3025</span>  <span class="number">5676.8</span>        <span class="number">0</span>     <span class="number">0.0</span>       <span class="number">1.61</span></span><br></pre></td></tr></table></figure><h2 id="jinfo-JVM-Configuration-Info-For-Java"><a href="#jinfo-JVM-Configuration-Info-For-Java" class="headerlink" title="jinfo(JVM Configuration Info For Java)"></a>jinfo(JVM Configuration Info For Java)</h2><ul><li>实时查看和调整虚拟机的各项参数</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ jinfo -flag MaxHeapSize 4776</span><br><span class="line">-XX:<span class="attribute">MaxHeapSize</span>=734003200</span><br></pre></td></tr></table></figure><h2 id="jmap-Memory-Map-For-Java"><a href="#jmap-Memory-Map-For-Java" class="headerlink" title="jmap(Memory Map For Java)"></a>jmap(Memory Map For Java)</h2><ul><li>生成堆转储快照</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -<span class="keyword">dump</span>:format=b,<span class="keyword">file</span>=F:<span class="comment">//idea.bin 4776</span></span><br><span class="line">Dumping heap to F:\idea.bin ...</span><br><span class="line">Heap <span class="keyword">dump</span> <span class="keyword">file</span> created</span><br></pre></td></tr></table></figure><ul><li>查看堆信息</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">$ jmap -heap <span class="number">4776</span></span><br><span class="line">Attaching to process ID <span class="number">4776</span>, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is <span class="number">25.162</span>-b12</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC <span class="keyword">with</span> <span class="number">4</span> thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   <span class="attr">MinHeapFreeRatio</span>         = <span class="number">0</span></span><br><span class="line">   <span class="attr">MaxHeapFreeRatio</span>         = <span class="number">100</span></span><br><span class="line">   <span class="attr">MaxHeapSize</span>              = <span class="number">734003200</span> (<span class="number">700.0</span>MB)</span><br><span class="line">   <span class="attr">NewSize</span>                  = <span class="number">65536000</span> (<span class="number">62.5</span>MB)</span><br><span class="line">   <span class="attr">MaxNewSize</span>               = <span class="number">244318208</span> (<span class="number">233.0</span>MB)</span><br><span class="line">   <span class="attr">OldSize</span>                  = <span class="number">131596288</span> (<span class="number">125.5</span>MB)</span><br><span class="line">   <span class="attr">NewRatio</span>                 = <span class="number">2</span></span><br><span class="line">   <span class="attr">SurvivorRatio</span>            = <span class="number">8</span></span><br><span class="line">   <span class="attr">MetaspaceSize</span>            = <span class="number">21807104</span> (<span class="number">20.796875</span>MB)</span><br><span class="line">   <span class="attr">CompressedClassSpaceSize</span> = <span class="number">1073741824</span> (<span class="number">1024.0</span>MB)</span><br><span class="line">   <span class="attr">MaxMetaspaceSize</span>         = <span class="number">17592186044415</span> MB</span><br><span class="line">   <span class="attr">G1HeapRegionSize</span>         = <span class="number">0</span> (<span class="number">0.0</span>MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space:</span><br><span class="line">   <span class="attr">capacity</span> = <span class="number">49807360</span> (<span class="number">47.5</span>MB)</span><br><span class="line">   <span class="attr">used</span>     = <span class="number">28955440</span> (<span class="number">27.614059448242188</span>MB)</span><br><span class="line">   <span class="attr">free</span>     = <span class="number">20851920</span> (<span class="number">19.885940551757812</span>MB)</span><br><span class="line">   <span class="number">58.13486199629934</span>% used</span><br><span class="line">From Space:</span><br><span class="line">   <span class="attr">capacity</span> = <span class="number">7864320</span> (<span class="number">7.5</span>MB)</span><br><span class="line">   <span class="attr">used</span>     = <span class="number">5118136</span> (<span class="number">4.881034851074219</span>MB)</span><br><span class="line">   <span class="attr">free</span>     = <span class="number">2746184</span> (<span class="number">2.6189651489257812</span>MB)</span><br><span class="line">   <span class="number">65.08046468098958</span>% used</span><br><span class="line">To Space:</span><br><span class="line">   <span class="attr">capacity</span> = <span class="number">7864320</span> (<span class="number">7.5</span>MB)</span><br><span class="line">   <span class="attr">used</span>     = <span class="number">0</span> (<span class="number">0.0</span>MB)</span><br><span class="line">   <span class="attr">free</span>     = <span class="number">7864320</span> (<span class="number">7.5</span>MB)</span><br><span class="line">   <span class="number">0.0</span>% used</span><br><span class="line">PS Old Generation</span><br><span class="line">   <span class="attr">capacity</span> = <span class="number">131596288</span> (<span class="number">125.5</span>MB)</span><br><span class="line">   <span class="attr">used</span>     = <span class="number">81936</span> (<span class="number">0.0781402587890625</span>MB)</span><br><span class="line">   <span class="attr">free</span>     = <span class="number">131514352</span> (<span class="number">125.42185974121094</span>MB)</span><br><span class="line">   <span class="number">0.06226315441359562</span>% used</span><br><span class="line"></span><br><span class="line"><span class="number">5133</span> interned Strings occupying <span class="number">444464</span> bytes.</span><br></pre></td></tr></table></figure><h2 id="jhat（JVM-Heap-Analysis-Tool）"><a href="#jhat（JVM-Heap-Analysis-Tool）" class="headerlink" title="jhat（JVM Heap Analysis Tool）"></a>jhat（JVM Heap Analysis Tool）</h2><ul><li>搭配jmap使用，来分析jmap生成的堆转储文件</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ jhat idea.bin</span><br><span class="line">Reading <span class="keyword">from</span> idea.bin<span class="built_in">..</span>.</span><br><span class="line">Dump file created Tue Jun 19 17:46:12 CST 2018</span><br><span class="line">Snapshot read, resolving<span class="built_in">..</span>.</span><br><span class="line">Resolving 131603 objects<span class="built_in">..</span>.</span><br><span class="line">Chasing references, expect 26 dots<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">Eliminating duplicate references<span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">Snapshot resolved.</span><br><span class="line">Started HTTP<span class="built_in"> server </span>on<span class="built_in"> port </span>7000</span><br><span class="line">Server is ready.</span><br></pre></td></tr></table></figure><h2 id="jstack-Stack-Trace-For-java"><a href="#jstack-Stack-Trace-For-java" class="headerlink" title="jstack(Stack Trace For java)"></a>jstack(Stack Trace For java)</h2><ul><li><p>生成虚拟机当前时刻的线程快照</p></li><li><p>线程快照就是当前虚拟机内每条线程正在执行的方法堆栈集合</p></li></ul><h2 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h2><ul><li>java监视与管理控制台</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/41300682.jpg" alt=""></p><ul><li>选择一个java进程进行分析</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/88285527.jpg" alt=""></p><h2 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a><a href="https://visualvm.github.io/" target="_blank" rel="noopener">jvisualvm</a></h2><ul><li>多合一故障处理工具</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/45468579.jpg" alt=""></p><ul><li>选择一个java进程安装</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/59392183.jpg" alt=""></p><h3 id="整合到IDE中"><a href="#整合到IDE中" class="headerlink" title="整合到IDE中"></a><a href="https://visualvm.github.io/idesupport.html" target="_blank" rel="noopener">整合到IDE中</a></h3><ul><li><p><a href="https://plugins.jetbrains.com/plugin/7115-visualvm-launcher" target="_blank" rel="noopener">IDEA-VisualVm-Lanucher</a></p></li><li><p>Idea安装插件</p></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/21265987.jpg" alt=""></p><ul><li>设置本机的jvisualvm.exe</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/71522232.jpg" alt=""></p><ul><li>运行代码的时候自动回启用该程序的jvisualvm.exe程序</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/2022229.jpg" alt=""></p><h2 id="MemoryAnalyzer"><a href="#MemoryAnalyzer" class="headerlink" title="MemoryAnalyzer"></a>MemoryAnalyzer</h2><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><ul><li><p><a href="http://www.eclipse.org/mat/" target="_blank" rel="noopener">下载地址</a></p></li><li><p>解压目录如下：</p><ul><li>MemoryAnalyzer.exe：运行程序</li><li>MemoryAnalyzer.ini：运行参数文件</li></ul></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/58702473.jpg" alt=""></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>运行参数设置，一般要分析dump文件较大，所以要设置运行程序的内存-Xmx大小(MemoryAnalyzer.ini)</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-startup</span><br><span class="line">plugins/org<span class="selector-class">.eclipse</span><span class="selector-class">.equinox</span><span class="selector-class">.launcher_1</span>.<span class="number">3.100</span><span class="selector-class">.v20150511-1540</span><span class="selector-class">.jar</span></span><br><span class="line">--launcher.library</span><br><span class="line">plugins/org<span class="selector-class">.eclipse</span><span class="selector-class">.equinox</span><span class="selector-class">.launcher</span><span class="selector-class">.win32</span><span class="selector-class">.win32</span><span class="selector-class">.x86_64_1</span>.<span class="number">1.300</span>.v20150602-<span class="number">1417</span></span><br><span class="line">-vmargs</span><br><span class="line">-Xmx1024m</span><br></pre></td></tr></table></figure><ul><li>双击MemoryAnalyzer.exe启动界面如下：</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/29855467.jpg" alt=""></p><ul><li><p>如何获取dump文件</p><ul><li>-XX:+HeapDumpOnOutOfMemoryError writes heap dump on OutOfMemoryError (recommended)</li><li>-XX:+HeapDumpOnCtrlBreak writes heap dump together with thread dump on CTRL+BREAK</li><li>Sun (Linux, Solaris; not on Windows) JMap Java 5: jmap -heap:format=b <pid></pid></li><li>Sun (Linux, Solaris; Windows see link) JMap Java 6: jmap.exe -dump:format=b,file=HeapDump.hprof <pid></pid></li></ul></li><li><p>选择dump文件</p></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/30295703.jpg" alt=""></p><ul><li>打开dump文件如下</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/47927471.jpg" alt=""></p><ul><li>Leak Suspects 内存泄漏的可疑点</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/68978576.jpg" alt=""></p><ul><li><p>Histogram 每个实例的数量以及占用内存大小，释放后内存你大小</p><ul><li>Class Name类名称</li><li>Objects 实例数量</li><li>Shallow Heap 实际内存大小</li><li>Retained Heap 回收后释放的内存大小</li></ul></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/32947417.jpg" alt=""></p><ul><li><p>查看某个对象具体有哪些对象</p><ul><li>list objects – with outgoing references : 查看这个对象持有的外部对象引用。</li><li>list objects – with incoming references : 查看这个对象被哪些外部对象引用。</li><li>show objects by class  –  with outgoing references ：查看这个对象类型持有的外部对象引用</li><li>show objects by class  –  with incoming references ：查看这个对象类型被哪些外部对象引用</li><li>paths to gc root : 显示不同类型引用(上文中提到的Strong ,soft,weak )到跟节点的路径。</li><li>java basics:<ul><li>classloader 该对象对应的classloader信息</li><li>thread details :线程信息</li><li>thread stacks  :线程堆栈</li><li>find String : 在这个对象中查询需要的字符串（还不确定，需要再搞下）</li><li>group by : 根据某个字段统计出现的个数</li></ul></li></ul></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-20/39096900.jpg" alt=""></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>首先看retained size最大的那些数据，一般看内存都是想解决内存泄漏问题，可以通过Top Consumers或者是donimator tree等actions。</p></li><li><p>找到最大的数据后，通过list objects – with outgoing references 查看具体持有了哪些对象。</p></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.读书笔记《深入理解Java虚拟机》-垃圾收集</title>
      <link href="/2016/05/12/jvm-2-gc/"/>
      <url>/2016/05/12/jvm-2-gc/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>当垃圾收集成为系统达到高并发量的瓶颈的时候，我们需要监控和调节。</li></ul><h3 id="引用计数法（Reference-Counting）"><a href="#引用计数法（Reference-Counting）" class="headerlink" title="引用计数法（Reference Counting）"></a>引用计数法（Reference Counting）</h3><ul><li><p>给对象中添加一个引用计数器，每当有一个地方引用，计数器加1，当引用失效的时候就减一。</p></li><li><p>java虚拟机没有采取的原因是很难解决对象之间的相互循环引用的问题</p></li></ul><h3 id="可达性分析算法（Reachability-Analysis）"><a href="#可达性分析算法（Reachability-Analysis）" class="headerlink" title="可达性分析算法（Reachability Analysis）"></a>可达性分析算法（Reachability Analysis）</h3><ul><li><p>通过GC Roots对象作为起点，当一个对象到Gc Roots没有任何的引用链(reference chain)相连的时候，就不可达。</p></li><li><p>java语言中可以作为GC Roots的对象：</p><ul><li><p>虚拟机栈中引用的对象</p></li><li><p>方法区中类静态属性引用的对象</p></li><li><p>方法区中常量引用对象</p></li><li><p>本地方法栈中JNI(Native)引用的对象</p></li></ul></li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li><p>强引用（Strong reference），程序代码中普遍存在。</p></li><li><p>软引用（Soft Reference）,有用但非必须的对象，发生内存溢出异常之前，会把这些对象列入垃圾回收范围。</p></li><li><p>弱引用（Weak Reference）,非必需的对象，只能生存到下一次垃圾收集发生之前。</p></li><li><p>虚引用（Phantom Reference）,为一个对象设置虚引用唯一目的就是能在这个对象被垃圾收集器回收时的一个系统通知。</p></li></ul><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><h3 id="标记-清除算法（Mark-Sweep）"><a href="#标记-清除算法（Mark-Sweep）" class="headerlink" title="标记-清除算法（Mark-Sweep）"></a>标记-清除算法（Mark-Sweep）</h3><ul><li><p>标记：遍历所有的GC Roots,然后将GC roots可达的对象标记为存活</p></li><li><p>清除：清除过程就是遍历所有的对象，将没有标记的对象全部清除掉</p></li><li><p>不足：</p><ul><li><p>效率问题，递归与全堆遍历对象，而且GC的时候要停止应用程序</p></li><li><p>清理出来的空闲内存的不是连续的，空间碎片太多</p></li></ul></li></ul><h3 id="复制算法（Copying）"><a href="#复制算法（Copying）" class="headerlink" title="复制算法（Copying）"></a>复制算法（Copying）</h3><ul><li><p>将可用内存容量划分为大小相等的2块。</p></li><li><p>每次只使用其中的一块，当这一块内存用完了，就将还存活的对象复制到另一块上，然后把已经用过的内存空间一次清理掉。</p></li><li><p>代价就是内存缩小为原来的一半</p></li><li><p>回收新生代</p></li></ul><h3 id="标记整理算法（Mark-Compact）"><a href="#标记整理算法（Mark-Compact）" class="headerlink" title="标记整理算法（Mark-Compact）"></a>标记整理算法（Mark-Compact）</h3><ul><li><p>标记：遍历所有的GC Roots,然后将GC roots可达的对象标记为存活</p></li><li><p>整理：让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存</p></li></ul><h3 id="分代收集算法（generational-collection）"><a href="#分代收集算法（generational-collection）" class="headerlink" title="分代收集算法（generational collection）"></a>分代收集算法（generational collection）</h3><ul><li><p>根据java对象的存活周期的不同划分为几块</p></li><li><p>新生代，每次垃圾回收都会发现有大量对象死去，只有少量存活，可以选择复制算法</p></li><li><p>老年代对象存活较高，没有额外的空间进行担保，使用标记-清理，标记-整理算法</p></li></ul><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/6942426.jpg" alt=""></p><h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><ul><li><p>-XX:+UseSerialGC</p></li><li><p>单线程收集器，进行垃圾收集的时候，必须暂停其他所有工作线程，直到收集完成</p></li><li><p>Client模式下默认的新生代收集器 </p></li></ul><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><ul><li><p>ParNew是Serial的多线程版本，使用多条线程进行垃圾收集。</p></li><li><p>默认的开启的收集线程数与CPU的数量相同</p></li></ul><h3 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h3><ul><li><p>新生代收集器，并发多线程收集器</p></li><li><p>吞吐量，CPU用于运行用户代码时间与CPU总消耗时间的比值</p></li></ul><h3 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h3><ul><li><p>Serial收集器的老年代版本</p></li><li><p>单线程收集器</p></li></ul><h3 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h3><ul><li><p>是Parallel Scavenage收集器的老年代版本</p></li><li><p>使用多线程和标记-整理算法</p></li></ul><h3 id="CMS收集器（Concurrent-Mark-Sweep）"><a href="#CMS收集器（Concurrent-Mark-Sweep）" class="headerlink" title="CMS收集器（Concurrent Mark Sweep）"></a>CMS收集器（Concurrent Mark Sweep）</h3><ul><li>获取最短回收暂停时间为目标的收集器</li></ul><h4 id="CMS基于标记-清除算法实现"><a href="#CMS基于标记-清除算法实现" class="headerlink" title="CMS基于标记-清除算法实现"></a>CMS基于标记-清除算法实现</h4><ul><li><p>初始标记（CMS initial mark）,标记GC Roots能直接关联的到对象，用户线程暂停</p></li><li><p>并发标记（CMS concurrent mark），进行GC roots traceing的过程</p></li><li><p>重新标记（CMS remark），修正并发标记期间因用户程序继续运作而导致产生变动的那一部分对象的标记记录，用户线程暂停</p></li><li><p>并发清除（CMS concurrent sweep），浮动垃圾</p></li></ul><h3 id="G1收集器-Garbage-First"><a href="#G1收集器-Garbage-First" class="headerlink" title="G1收集器(Garbage First)"></a>G1收集器(Garbage First)</h3><ul><li><p>面向服务端应用</p></li><li><p>G1算法将堆划分为如干个区域（Region),它任然属于分代收集器</p></li><li><p>G1跟踪各个Region里面的垃圾堆积的价值大小（回收空间大小好和时间经验值）-优先级的区域回收</p></li><li><p>G1中每个region都有一个与之对应的Rememberd Set,来记录Region之间的对象引用，避免全堆扫描</p></li></ul><h4 id="G1的内存模型"><a href="#G1的内存模型" class="headerlink" title="G1的内存模型"></a>G1的内存模型</h4><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-19/21427512.jpg" alt=""></p><ul><li><p>Region：G1采用了分区(Region)的思路，将整个堆空间分成若干个大小相等的内存区域，每次分配对象空间将逐段地使用内存。</p></li><li><p>Card:在每个分区内部又被分成了若干个大小为512 Byte卡片</p></li><li><p>Remebered Set:记录引用分区内对象的卡片索引</p></li><li><p>Per Region Set:记录分区引用情况</p><ul><li><p>稀少：直接记录引用对象的卡片索引</p></li><li><p>细粒度：直接记录引用对象的分区索引</p></li><li><p>粗粒度：只记录引用情况</p></li></ul></li></ul><h4 id="G1收集器大致步骤："><a href="#G1收集器大致步骤：" class="headerlink" title="G1收集器大致步骤："></a>G1收集器大致步骤：</h4><ul><li><p>初始标记（Initial Marking）:标记GC Roots能直接关联的对象，STW。</p></li><li><p>并发标记（Concurrent Marking）：从GC Roots开始对堆中对象进行可达性分析，找出存活对象。</p></li><li><p>最终标记（Final Marking）：修正并发标记期间，应用程序继续运作而导致标记产生变化。</p></li><li><p>筛选回收（Live Data Counting And Evacuation）:对分区的回收价值和成本进行排序。</p></li></ul><h2 id="GC-日志"><a href="#GC-日志" class="headerlink" title="GC 日志"></a>GC 日志</h2><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">GC</span> (<span class="name">Allocation</span> Failure) [<span class="name">PSYoungGen:</span> <span class="number">5131</span>K-&gt;488K(<span class="name">6144K</span>)] <span class="number">5131</span>K-&gt;2824K(<span class="name">19968K</span>), <span class="number">0.0066449</span> secs] [<span class="name">Times:</span> user=0.03 sys=0.00, real=0.01 secs] </span><br><span class="line">[<span class="name">GC</span> (<span class="name">Allocation</span> Failure) [<span class="name">PSYoungGen:</span> <span class="number">6120</span>K-&gt;504K(<span class="name">6144K</span>)] <span class="number">8456</span>K-&gt;6871K(<span class="name">19968K</span>), <span class="number">0.0080173</span> secs] [<span class="name">Times:</span> user=0.05 sys=0.00, real=0.01 secs] </span><br><span class="line">[<span class="name">GC</span> (<span class="name">Allocation</span> Failure) [<span class="name">PSYoungGen:</span> <span class="number">6136</span>K-&gt;488K(<span class="name">6144K</span>)] <span class="number">12503</span>K-&gt;12533K(<span class="name">19968K</span>), <span class="number">0.0088154</span> secs] [<span class="name">Times:</span> user=0.00 sys=0.00, real=0.01 secs] </span><br><span class="line">[<span class="name">Full</span> GC (<span class="name">Ergonomics</span>) [<span class="name">PSYoungGen:</span> <span class="number">488</span>K-&gt;0K(<span class="name">6144K</span>)] [<span class="name">ParOldGen:</span> <span class="number">12045</span>K-&gt;10625K(<span class="name">13824K</span>)] <span class="number">12533</span>K-&gt;10625K(<span class="name">19968K</span>), [<span class="name">Metaspace:</span> <span class="number">3450</span>K-&gt;3450K(<span class="name">1056768K</span>)], <span class="number">0.2151649</span> secs] [<span class="name">Times:</span> user=0.30 sys=0.00, real=0.22 secs] </span><br><span class="line">[<span class="name">Full</span> GC (<span class="name">Ergonomics</span>) [<span class="name">PSYoungGen:</span> <span class="number">5632</span>K-&gt;511K(<span class="name">6144K</span>)] [<span class="name">ParOldGen:</span> <span class="number">10625</span>K-&gt;13522K(<span class="name">13824K</span>)] <span class="number">16257</span>K-&gt;14034K(<span class="name">19968K</span>), [<span class="name">Metaspace:</span> <span class="number">3450</span>K-&gt;3450K(<span class="name">1056768K</span>)], <span class="number">0.1473456</span> secs] [<span class="name">Times:</span> user=0.25 sys=0.00, real=0.15 secs] </span><br><span class="line">[<span class="name">Full</span> GC (<span class="name">Ergonomics</span>) [<span class="name">PSYoungGen:</span> <span class="number">3047</span>K-&gt;3028K(<span class="name">6144K</span>)] [<span class="name">ParOldGen:</span> <span class="number">13522</span>K-&gt;13522K(<span class="name">13824K</span>)] <span class="number">16569</span>K-&gt;16551K(<span class="name">19968K</span>), [<span class="name">Metaspace:</span> <span class="number">3450</span>K-&gt;3450K(<span class="name">1056768K</span>)], <span class="number">0.1480399</span> secs] [<span class="name">Times:</span> user=0.36 sys=0.00, real=0.15 secs]</span><br></pre></td></tr></table></figure><ul><li>PSYoungGen: Parallel Scavenge</li><li>ParOldGen: Parallel Old</li></ul><h3 id="查看当前JVM的垃圾收集器"><a href="#查看当前JVM的垃圾收集器" class="headerlink" title="查看当前JVM的垃圾收集器"></a>查看当前JVM的垃圾收集器</h3><ul><li>java -XX:+PrintCommandLineFlags -version</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$  java -XX:+PrintCommandLineFlags -version</span><br><span class="line">-XX:<span class="attribute">InitialHeapSize</span>=196028608 -XX:<span class="attribute">MaxHeapSize</span>=3136457728 -XX:+PrintCommandLineFlags </span><br><span class="line">-XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC</span><br><span class="line">java version <span class="string">"1.8.0_162"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_162-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit<span class="built_in"> Server </span>VM (build 25.162-b12, mixed mode)</span><br></pre></td></tr></table></figure><ul><li>代码</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.lang.management.GarbageCollectorMXBean;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.lang.management.ManagementFactory;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.List;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHeap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        List&lt;GarbageCollectorMXBean&gt; l = ManagementFactory.getGarbageCollectorMXBeans();</span><br><span class="line">        <span class="keyword">for</span>(GarbageCollectorMXBean b : l) &#123;</span><br><span class="line">            System.out.println(b.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PS Scavenge</span><br><span class="line">PS MarkSweep</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.读书笔记《深入理解Java虚拟机》-内存区域和OOM</title>
      <link href="/2016/05/11/jvm-1-memory-oom/"/>
      <url>/2016/05/11/jvm-1-memory-oom/</url>
      <content type="html"><![CDATA[<h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-2/40942794.jpg" alt=""></p><p>java虚拟机在执行java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。</p><h3 id="Java7的运行时数据区域"><a href="#Java7的运行时数据区域" class="headerlink" title="Java7的运行时数据区域"></a><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.5" target="_blank" rel="noopener">Java7的运行时数据区域</a></h3><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><ul><li>可以当做当前线程执行所执行的字节码的行号指示器</li></ul><h4 id="java虚拟机栈"><a href="#java虚拟机栈" class="headerlink" title="java虚拟机栈"></a>java虚拟机栈</h4><ul><li>java虚拟机栈描述的是执行java方法的内存模型</li><li>栈帧存储局部变量表，操作数栈，动态链接，方法出口等信息</li><li>局部变量表存储了编译期可知的基本数据类型和引用类型，一个引用指针。</li><li>如果线程请求的栈深度大于虚拟机所允许的深度，java.lang.StackOverflowError</li><li>虚拟机栈动态扩展，无法申请到足够的内存时，java.lang.OutOfMemoryError</li></ul><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><ul><li>执行本地方法的数据结构</li></ul><h4 id="java堆"><a href="#java堆" class="headerlink" title="java堆"></a>java堆</h4><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-2/63832337.jpg" alt=""></p><ul><li>存放对象实例</li><li>垃圾收集器的主要区域</li><li>分代收集算法，新生代和老年代</li></ul><p>java堆是被所有的线程共享的一块内存区域，在虚拟机的启动的时候创建。此区域的唯一目的就是存放对象实例。 根据java虚拟机的规范中的描述的是：所有对象的实例以及数组都要在堆中分配。 java堆是垃圾收集器的主要管理部分，所有也被称为GC堆，从内存回收的角度来看，由于现在收集器基本的都采用分代收集算法，所有java堆可以细分为新生代和旧生代，再细致可以 分为Eden空间，From Survivor空间，To Survivor空间等。</p><h5 id="堆的划分和回收过程"><a href="#堆的划分和回收过程" class="headerlink" title="堆的划分和回收过程"></a>堆的划分和回收过程</h5><ol><li>Eden区最大，对外提供堆内存。当Eden区快要满了，则进行Minor GC，把存活对象放入Survivor A区，清空Eden区； </li><li>Eden区被清空后，继续对外提供堆内存； </li><li>当Eden区再次被填满，此时对Eden区和Survivor A区同时进行Minor GC，把存活对象放入Survivor B区，同时清空Eden 区和Survivor A区； </li><li>Eden区继续对外提供堆内存，并重复上述过程，即在Eden区填满后，把Eden区和某个Survivor区的存活对象放到另一个Survivor区； </li><li>当某个Survivor区被填满，且仍有对象未被复制完毕时或者某些对象在反复Survive 15次左右时，则把这部分剩余对象放到Old区； </li><li>当Old区也被填满时，进行Major GC，对Old区进行垃圾回收。</li></ol><h4 id="方法区（永久代）"><a href="#方法区（永久代）" class="headerlink" title="方法区（永久代）"></a>方法区（永久代）</h4><ul><li><p>存储被虚拟机加载的类，常量，静态变量，即时编译器编译后的代码等数据</p></li><li><p><a href="http://openjdk.java.net/jeps/122" target="_blank" rel="noopener">jdk8去除了永久带</a></p></li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-2/78700206.jpg" alt=""></p><h4 id="运行池常量"><a href="#运行池常量" class="headerlink" title="运行池常量"></a>运行池常量</h4><ul><li>是方法区的一部分</li><li>Class文件中除了有类的版本，字段，方法，接口等描述信息外，还有一项就是常量池</li><li>java语言并不要求常量一定要编译的时候产生，运行期间也可以将常量放入到运行常量池，String(intern()方法)</li></ul><h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><ul><li>并不是虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域</li></ul><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><h3 id="划分空间方式"><a href="#划分空间方式" class="headerlink" title="划分空间方式"></a>划分空间方式</h3><ul><li>指针碰撞</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-17/32329282.jpg" alt=""></p><ul><li>空闲列表来记录未分配的内存</li></ul><h3 id="并发分配内存问题"><a href="#并发分配内存问题" class="headerlink" title="并发分配内存问题"></a>并发分配内存问题</h3><ul><li>实际上虚拟机采用CAS配上失败重试的方式保证更新操作的原子性</li><li>把内存的分配动作按照线程的划分在不同的空间中进行</li></ul><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h3><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-17/46711475.jpg" alt=""></p><h4 id="对象头Header"><a href="#对象头Header" class="headerlink" title="对象头Header"></a>对象头Header</h4><ul><li>存储对象的自身的运行时数据-哈希码，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID,偏向时间戳</li><li>类型指针，即对象指向它的元数据的指针，虚拟机通过这个可以确定对象是哪个类的实例</li></ul><h4 id="实例数据Instance-Data"><a href="#实例数据Instance-Data" class="headerlink" title="实例数据Instance Data"></a>实例数据Instance Data</h4><ul><li>对象真正存储的有效信息，程序代码中定义的各种类型的字段内容。</li><li>存储顺序影响因素<ul><li>虚拟机的分配策略(FiledAllocationStyle)(long/doubles,ints,shorts/chars,bytes/booleans,oops)</li><li>字段在java原码中的定义顺序</li></ul></li></ul><h4 id="对齐填充-Padding"><a href="#对齐填充-Padding" class="headerlink" title="对齐填充 Padding"></a>对齐填充 Padding</h4><ul><li>占位符，没有特别含义</li><li>虚拟机自动内存管理系统要求 对象的大小必须是8字节的整数倍</li></ul><h3 id="对方的访问定位方式"><a href="#对方的访问定位方式" class="headerlink" title="对方的访问定位方式"></a>对方的访问定位方式</h3><h4 id="句柄访问对象"><a href="#句柄访问对象" class="headerlink" title="句柄访问对象"></a>句柄访问对象</h4><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-17/57771956.jpg" alt=""></p><ul><li>栈中reference存储的是句柄池句柄的地址</li><li>句柄包含到实例数据和类型数据的分别指针</li></ul><h4 id="直接指针访问对象"><a href="#直接指针访问对象" class="headerlink" title="直接指针访问对象"></a>直接指针访问对象</h4><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-17/53048580.jpg" alt=""></p><ul><li>reference中直接存放的就是对象实例数据地址</li></ul><h2 id="常见的内存溢出"><a href="#常见的内存溢出" class="headerlink" title="常见的内存溢出"></a>常见的内存溢出</h2><ul><li>java.lang.OutOfMemoryError: PermGen space</li><li>java.lang.OutOfMemoryError: Java heap space</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java源码分析-HashMap</title>
      <link href="/2016/04/18/java-source-hashmap/"/>
      <url>/2016/04/18/java-source-hashmap/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>HashMap 最早出现在 JDK 1.2中，底层基于散列算法实现。</li><li>HashMap 允许 null 键和 null 值，在计算哈键的哈希值时，null 键哈希值为 0。</li><li>HashMap 并不保证键值对的顺序，这意味着在进行某些操作后，键值对的顺序可能会发生变化。</li><li>HashMap 是非线程安全类</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li><p>HashMap 则使用了拉链式的散列算法，并在 JDK 1.8 中引入了红黑树优化过长的链表。</p></li><li><p>拉链式的散列算法，其数据结构是由数组和链表（或树形结构）组成。</p></li><li><p>不同的地方在于 JDK 1.8 中引入了红黑树，底层数据结构由数组+链表变为了数组+链表+红黑树，不过本质并未变。</p></li><li><p>引入红黑树解决过长链表效率低的问题</p></li></ul><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 构造方法 1 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 构造方法 2 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 构造方法 3 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 构造方法 4 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>initialCapacity：HashMap的初始容量</li><li>loadFactor:负载因子</li><li>threshold：当前HashMap所能容纳键值对数量的最大值，超过这个值，则需要扩容。</li><li>默认情况下，HashMap 初始容量是16，负载因子为 0.75。</li><li>当我们调低负载因子时，HashMap 所能容纳的键值对数量变少。扩容时，重新将键值对存储新的桶数组里，键的键之间产生的碰撞会下降，链表长度变短。此时，HashMap 的增删改查等操作的效率将会变高，这里是典型的拿空间换时间。</li><li>，如果增加负载因子（负载因子可以大于1），HashMap 所能容纳的键值对数量变多，空间利用率高，但碰撞率也高。这意味着链表长度变长，效率也随之降低，这种情况是拿时间换空间。</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java源码分析-LinkedList</title>
      <link href="/2016/04/16/java-source-linkedlist/"/>
      <url>/2016/04/16/java-source-linkedlist/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>其底层采用的双向链表结构。</li><li>ArrayList 一样，LinkedList 也支持空值和重复值</li><li>LinkedList 存储元素的节点需要额外的空间存储前驱和后继的引用。</li><li>LinkedList 在链表头部和尾部插入效率比较高，但在指定位置进行插入时，效率一般。原因是，在指定位置插入需要定位到该位置处的节点，此操作的时间复杂度为O(N)。</li><li>LinkedList 是非线程安全的集合类</li></ul><h2 id="LinkedList的继承体系"><a href="#LinkedList的继承体系" class="headerlink" title="LinkedList的继承体系"></a>LinkedList的继承体系</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-28/54595688.jpg" alt=""></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul><li>LinkedList 底层基于链表结构，需要从链表头结点（或尾节点）向后查找，时间复杂度为 O(N)。</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    checkElementIndex(<span class="keyword">index</span>);</span><br><span class="line">    <span class="keyword">return</span> node(<span class="keyword">index</span>).item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node&lt;E&gt; node(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 则从头节点开始查找，否则从尾节点查找</span></span><br><span class="line"><span class="comment">     * 查找位置 index 如果小于节点数量的一半，</span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">index</span> &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="comment">// 循环向后查找，直至 i == index</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">index</span>; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; <span class="keyword">index</span>; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><ul><li><p>通常情况下，我们会使用 foreach 遍历 LinkedList，而 foreach 最终转换成迭代器形式。</p></li><li><p>LinkedList 不擅长随机位置访问，如果大家用随机访问的方式遍历 LinkedList，效率会很差。</p></li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;Integet&gt; <span class="built_in">list</span> = <span class="literal">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="built_in">list</span>.add(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">list</span>.add(<span class="number">2</span>)</span><br><span class="line"><span class="params">...</span><span class="params">...</span></span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.size(); i++) &#123;</span><br><span class="line">    Integet item = <span class="built_in">list</span>.get(i);</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的遍历方式对于效率来说就是灾难。原因在于，通过上面的方式每获取一个元素，LinkedList 都需要从头节点（或尾节点）进行遍历，效率不可谓不低。</li></ul><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 在链表尾部插入元素 */</span></span><br><span class="line"><span class="keyword">public</span> boolean add(E e) &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 在链表指定位置插入元素 */</span></span><br><span class="line"><span class="keyword">public</span> void add(int index, E element) &#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断 index 是不是链表尾部位置，如果是，直接将元素节点插入链表尾部即可</span></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 将元素节点插入到链表尾部 */</span></span><br><span class="line">void linkLast(E e) &#123;</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">// 创建节点，并指定节点前驱为链表尾节点 last，后继引用为空</span></span><br><span class="line">    final Node&lt;E&gt; <span class="keyword">new</span><span class="type">Node</span> = <span class="keyword">new</span> <span class="type">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 将 last 引用指向新节点</span></span><br><span class="line">    last = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">    <span class="comment">// 判断尾节点是否为空，为空表示当前链表还没有节点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">        first = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = <span class="keyword">new</span><span class="type">Node</span>;    <span class="comment">// 让原尾节点后继引用 next 指向新的尾节点</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 将元素节点插入到 succ 之前的位置 */</span></span><br><span class="line">void linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    final Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="comment">// 1. 初始化节点，并指明前驱和后继节点</span></span><br><span class="line">    final Node&lt;E&gt; <span class="keyword">new</span><span class="type">Node</span> = <span class="keyword">new</span> <span class="type">Node</span>&lt;&gt;(pred, e, succ);</span><br><span class="line">    <span class="comment">// 2. 将 succ 节点前驱引用 prev 指向新节点</span></span><br><span class="line">    succ.prev = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">    <span class="comment">// 判断尾节点是否为空，为空表示当前链表还没有节点    </span></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">        first = <span class="keyword">new</span><span class="type">Node</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = <span class="keyword">new</span><span class="type">Node</span>;   <span class="comment">// 3. succ 节点前驱的后继引用指向新节点</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java源码分析-ArrayList</title>
      <link href="/2016/04/15/java-source-arraylist/"/>
      <url>/2016/04/15/java-source-arraylist/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>ArrayList 是一种变长的集合类，基于定长数组实现。</li><li>ArrayList 允许空值和重复元素，当往 ArrayList 中添加的元素数量大于其底层数组容量时，其会通过扩容机制重新生成一个更大的数组。</li><li>ArrayList 底层基于数组实现，所以其可以保证在 O(1) 复杂度下完成随机查找操作。</li><li>ArrayList 是非线程安全类，并发环境下，多个线程同时操作 ArrayList，会引发不可预知的错误。</li><li>ArrayList 是大家最为常用的集合类，作为一个变长集合类，其核心是扩容机制。</li></ul><h2 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-28/75598834.jpg" alt=""></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li>ArrayList 有两个构造方法，一个是无参，另一个需传入初始容量值。大家平时最常用的是无参构造方法，相关代码如下：</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span>[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span>[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">Object</span>[] elementData;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> ArrayList(<span class="built_in">int</span> initialCapacity) &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> <span class="keyword">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList() &#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>无参构造方法会将 elementData 初始化一个空数组，插入元素时，扩容将会按默认值重新初始化数组。</li><li>有参的构造方法则会将 elementData 初始化为参数值大小（&gt;= 0）的数组。</li></ul><h2 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h2><p>对于数组（线性表）结构，插入操作分为两种情况：</p><ul><li><p>一种是在元素序列尾部插入。</p></li><li><p>另一种是在元素序列其他位置插入。</p></li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 在元素序列尾部插入 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;</span><br><span class="line">    <span class="comment">// 1. 检测是否需要扩容</span></span><br><span class="line">    ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 2. 将新元素插入序列尾部</span></span><br><span class="line">    elementData[<span class="built_in">size</span>++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 在元素序列 index 位置处插入 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">add</span>(<span class="built_in">int</span> index, E element) &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 检测是否需要扩容</span></span><br><span class="line">    ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 2. 将 index 及其之后的所有元素都向后移一位</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     <span class="built_in">size</span> - index);</span><br><span class="line">    <span class="comment">// 3. 将新元素插入至 index 处</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="built_in">size</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><ul><li>在 ArrayList 中，当空间用完，其会按照原数组空间的1.5倍进行扩容。相关源码如下：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 计算最小容量 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 扩容的入口方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 扩容的核心方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">// newCapacity = oldCapacity + oldCapacity / 2 = oldCapacity * 1.5</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">      <span class="comment">// 扩容</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="comment">// 如果最小容量超过 MAX_ARRAY_SIZE，则将数组容量扩容至 Integer.MAX_VALUE</span></span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul><li>删除指定位置元素</li><li>删除指定元素</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 删除指定位置的元素 */</span></span><br><span class="line"><span class="keyword">public</span> E remove(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    rangeCheck(<span class="keyword">index</span>);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 返回被删除的元素值</span></span><br><span class="line">    E oldValue = elementData(<span class="keyword">index</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 将 index + 1 及之后的元素向前移动一位，覆盖被删除值</span></span><br><span class="line">        System.arraycopy(elementData, <span class="keyword">index</span>+<span class="number">1</span>, elementData, <span class="keyword">index</span>,</span><br><span class="line">                         numMoved);</span><br><span class="line">    <span class="comment">// 将最后一个元素置空，并将 size 值减1                </span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">E elementData(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[<span class="keyword">index</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 删除指定元素，若元素重复，则只删除下标最小的元素 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[<span class="keyword">index</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(<span class="keyword">index</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历数组，查找要删除元素的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> <span class="keyword">index</span> = <span class="number">0</span>; <span class="keyword">index</span> &lt; size; <span class="keyword">index</span>++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[<span class="keyword">index</span>])) &#123;</span><br><span class="line">                fastRemove(<span class="keyword">index</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 快速删除，不做边界检查，也不返回删除的元素值 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> fastRemove(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, <span class="keyword">index</span>+<span class="number">1</span>, elementData, <span class="keyword">index</span>,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>往 ArrayList 插入大量元素后，又删除很多元素，此时底层数组会空闲处大量的空间。</li><li>因为 ArrayList 没有自动缩容机制，导致底层数组大量的空闲空间不能被释放，造成浪费。对于这种情况，ArrayList 也提供了相应的处理方法，如下：</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 将数组容量缩小至元素数量 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> trimToSize() &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="built_in">if</span> (<span class="built_in">size</span> &lt; elementData.length) &#123;</span><br><span class="line">        elementData = (<span class="built_in">size</span> == <span class="number">0</span>)</span><br><span class="line">          ? EMPTY_ELEMENTDATA</span><br><span class="line">          : Arrays.copyOf(elementData, <span class="built_in">size</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速失败机制"><a href="#快速失败机制" class="headerlink" title="快速失败机制"></a>快速失败机制</h2><ul><li>在 Java 集合框架中，很多类都实现了快速失败机制。</li><li>该机制被触发时，会抛出并发修改异常ConcurrentModificationException</li></ul><h2 id="关于遍历的时候删除"><a href="#关于遍历的时候删除" class="headerlink" title="关于遍历的时候删除"></a>关于遍历的时候删除</h2><ul><li>如下代码只会打印数字1，不会打印2</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">strings.<span class="keyword">add</span>(<span class="string">"1"</span>);</span><br><span class="line">strings.<span class="keyword">add</span>(<span class="string">"2"</span>);</span><br><span class="line"><span class="keyword">for</span> (String <span class="keyword">string</span> : strings) &#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"string = "</span> + <span class="keyword">string</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"1"</span>.<span class="keyword">equals</span>(<span class="keyword">string</span>)) &#123;</span><br><span class="line">        strings.<span class="keyword">remove</span>(<span class="keyword">string</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>foreach是java的语法糖实际会被转换成如下代码：</li></ul><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;<span class="built_in">String</span>&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">strings.add(<span class="string">"1"</span>);</span><br><span class="line">strings.add(<span class="string">"2"</span>);</span><br><span class="line">/*<span class="keyword">for</span> (<span class="built_in">String</span> <span class="built_in">string</span> : strings) &#123;</span><br><span class="line">    System.out.println(<span class="string">"string = "</span> + <span class="built_in">string</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"1"</span>.equals(<span class="built_in">string</span>)) &#123;</span><br><span class="line">        strings.remove(<span class="built_in">string</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;*/</span><br><span class="line">Iterator&lt;<span class="built_in">String</span>&gt; iterator = strings.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="built_in">String</span> <span class="keyword">next</span> = iterator.<span class="keyword">next</span>();</span><br><span class="line">    System.out.println(<span class="string">"next = "</span> + <span class="keyword">next</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"1"</span>.equals(<span class="keyword">next</span>)) &#123;</span><br><span class="line">        strings.remove(<span class="keyword">next</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个时候再去分析迭代器就会找到原因：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 并发修改检测，检测不通过则抛出异常</span></span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>第一次进入 while 循环时，一切正常，元素 1 也被删除了</li><li>但删除元素 1 后，就无法再进入 while 循环，此时 it.hasNext() 为 false。</li><li>原因是删除元素 1 后，元素计数器 size = 1，而迭代器中的 cursor 也等于 1，从而导致 it.hasNext() 返回false</li><li>以上是关于遍历时删除的分析，在日常开发中，我们要避免上面的做法。正确的做法使用迭代器提供的删除方法，而不是直接删除。</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java源码分析-Integer</title>
      <link href="/2016/04/14/java-source-integer/"/>
      <url>/2016/04/14/java-source-integer/</url>
      <content type="html"><![CDATA[<h2 id="Integer的声明"><a href="#Integer的声明" class="headerlink" title="Integer的声明"></a>Integer的声明</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="title">implements</span> <span class="title">Comparable&lt;Integer&gt;</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>Integer 是用 final 声明的常量类，不能被任何类所继承。</li><li>并且 Integer 类继承了 Number 类和实现了 Comparable 接口。 </li><li>Number 类是一个抽象类，8中基本数据类型的包装类除了Character 和 Boolean 没有继承该类外，</li><li>剩下的都继承了 Number 类，该类的方法用于各种数据类型的转换。Comparable 接口就一个  compareTo 方法，用于元素之间的大小比较</li></ul><h2 id="构造方法-Integer-int-Integer-String"><a href="#构造方法-Integer-int-Integer-String" class="headerlink" title="构造方法 Integer(int)Integer(String)"></a>构造方法 Integer(int)Integer(String)</h2>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java源码分析-java.lang.Object</title>
      <link href="/2016/04/13/java-source-object/"/>
      <url>/2016/04/13/java-source-object/</url>
      <content type="html"><![CDATA[<p>Object 类属于 java.lang 包，此包下的所有类在使用时无需手动导入，系统会在程序编译期间自动导入。<br>Object 类是所有类的基类，当一个类没有直接继承某个类时，默认继承Object类。</p><h2 id="类的结构"><a href="#类的结构" class="headerlink" title="类的结构"></a>类的结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                                <span class="string">"nanosecond timeout value out of range"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            timeout++;</span><br><span class="line">        &#125;</span><br><span class="line">        wait(timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul><li>一个类必须要有一个构造器的存在，如果没有显示声明，那么系统会默认创造一个无参构造器。</li><li>在JDK的Object类源码中，是看不到构造器的，系统会自动添加一个无参构造器。</li></ul><h2 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h2><ul><li>Object 类中，== 运算符和 equals 方法是等价的，都是比较两个对象的引用是否相等</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String的重写equals-方法"><a href="#String的重写equals-方法" class="headerlink" title="String的重写equals()方法"></a>String的重写equals()方法</h3><ul><li>String 是引用类型，比较时不能比较引用是否相等，重点是字符串的内容是否相等。所以 String 类定义两个对象相等的标准是字符串内容都相同。</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> equals(<span class="keyword">Object</span> anObject) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> <span class="keyword">String</span>) &#123;</span><br><span class="line">        <span class="keyword">String</span> anotherString = (<span class="keyword">String</span>)anObject;</span><br><span class="line">        <span class="built_in">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="built_in">char</span> v1[] = value;</span><br><span class="line">            <span class="built_in">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在Java规范中对equals方法的使用必须遵循以下几个原则："><a href="#在Java规范中对equals方法的使用必须遵循以下几个原则：" class="headerlink" title="　在Java规范中对equals方法的使用必须遵循以下几个原则："></a>　在Java规范中对equals方法的使用必须遵循以下几个原则：</h3><ul><li><p>自反性：对于任何非空引用值 x，x.equals(x) 都应返回 true。</p></li><li><p>对称性：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应返回 true。 </p></li><li><p>传递性：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应返回 true。</p></li><li><p>一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 true 或始终返回 false，前提是对象上 equals 比较中所用的信息没有被修改</p></li><li><p>对于任何非空引用值 x，x.equals(null) 都应返回 false。</p></li></ul><h3 id="equals-写法建议"><a href="#equals-写法建议" class="headerlink" title="equals()写法建议"></a>equals()写法建议</h3><ol><li><p>显示参数命名为 otherObject，稍后会将它转换成另一个叫做 other 的变量。</p></li><li><p>判断比较的两个对象引用是否相等，如果引用相等那么表示是同一个对象，那么当然相等</p></li><li><p>如果 otherObject 为 null，直接返回false，表示不相等</p></li><li><p>比较 this 和 otherObject 是否是同一个类：如果 equals 的语义在每个子类中有所改变，就使用 getClass 检测；如果所有的子类都有统一的定义，那么使用 instanceof 检测</p></li><li><p>将 otherObject 转换成对应的类类型变量</p></li><li><p>最后对对象的属性进行比较。使用 == 比较基本类型，使用 equals 比较对象。如果都相等则返回true，否则返回false。注意如果是在子类中定义equals，则要包含 super.equals(other)</p></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean equals(Object o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Person person = (Person) o;</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(name, person.name) &amp;&amp;</span><br><span class="line">            Objects.equals(phone, person.phone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getClass-方法"><a href="#getClass-方法" class="headerlink" title="getClass()方法"></a>getClass()方法</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">Class</span>&lt;?&gt; getClass();</span><br></pre></td></tr></table></figure><ul><li><p>上面我们在介绍 equals 方法时，介绍如果 equals 的语义在每个子类中有所改变，那么使用 getClass 检测，为什么这样说呢？</p></li><li><p>getClass()在 Object 类中如下，作用是返回对象的运行时类。</p></li><li><p>Class&lt;? extends String&gt; aClass = “”.getClass();</p></li></ul><h2 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode()方法"></a>hashCode()方法</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="hashCode的推论"><a href="#hashCode的推论" class="headerlink" title="hashCode的推论"></a>hashCode的推论</h3><ul><li><p>两个对象相等，其 hashCode 一定相同;</p></li><li><p>两个对象不相等，其 hashCode 有可能相同;</p></li><li><p>hashCode 相同的两个对象，不一定相等;</p></li><li><p>hashCode 不相同的两个对象，一定不相等;</p></li></ul><h3 id="hashCode编写指导"><a href="#hashCode编写指导" class="headerlink" title="hashCode编写指导"></a>hashCode编写指导</h3><ul><li><p>不同对象的hash码应该尽量不同，避免hash冲突，也就是算法获得的元素要尽量均匀分布。</p></li><li><p>hash 值是一个 int 类型，在Java中占用 4 个字节，也就是 232 次方，要避免溢出。</p></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java源码分析-深拷贝和浅拷贝</title>
      <link href="/2016/04/12/java-source-clone/"/>
      <url>/2016/04/12/java-source-clone/</url>
      <content type="html"><![CDATA[<h2 id="创建对象的5种方式"><a href="#创建对象的5种方式" class="headerlink" title="创建对象的5种方式"></a>创建对象的5种方式</h2><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><ul><li>Object obj = new Object();</li></ul><h3 id="Class类的newInstance"><a href="#Class类的newInstance" class="headerlink" title="Class类的newInstance()"></a>Class类的newInstance()</h3><ul><li>Person p1 = (Person) Class.forName(“me.chilam.Person”).newInstance();</li></ul><h3 id="Constructor类的newInstance-方法"><a href="#Constructor类的newInstance-方法" class="headerlink" title="Constructor类的newInstance 方法"></a>Constructor类的newInstance 方法</h3><ul><li>Person p3 = (Person) Person.class.getConstructors()[0].newInstance();</li></ul><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><ul><li>Person p4 = (Person) p3.clone();</li></ul><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><ul><li>把磁盘文件中的对象数据或者把网络节点上的对象数据，恢复成Java对象模型的过程</li></ul><h2 id="clone-方法"><a href="#clone-方法" class="headerlink" title="clone()方法"></a>clone()方法</h2><ul><li>java.lang.Object</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> <span class="function">Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><ul><li><p>创建一个新对象，然后将当前对象的非静态字段复制到该新对象，如果字段是值类型的，那么对该字段执行复制；</p></li><li><p>如果该字段是引用类型的话，则复制引用但不复制引用的对象。因此，原始对象及其副本引用同一个对象。</p></li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">package me.chilam.algorithms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws CloneNotSupportedException</span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setName(<span class="string">"simon"</span>);</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone(<span class="string">"vivo"</span>,<span class="number">112</span>);</span><br><span class="line">        p.setPhone(phone);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"p = "</span> + p);</span><br><span class="line">        Person clone = ((Person) p.clone());</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"clone = "</span> + clone);</span><br><span class="line">        phone.setNo(<span class="number">119</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"p = "</span> + p);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"clone = "</span> + clone);</span><br><span class="line">        <span class="comment">//p = Person&#123;name='simon', phone=Phone&#123;name='vivo', no=112&#125;&#125;</span></span><br><span class="line">        <span class="comment">//clone = Person&#123;name='simon', phone=Phone&#123;name='vivo', no=112&#125;&#125;</span></span><br><span class="line">        <span class="comment">//p = Person&#123;name='simon', phone=Phone&#123;name='vivo', no=119&#125;&#125;</span></span><br><span class="line">        <span class="comment">//clone = Person&#123;name='simon', phone=Phone&#123;name='vivo', no=119&#125;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Phone phone;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span>(<span class="params"></span>) throws CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> super.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">getPhone</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span>(<span class="params">Phone phone</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phone="</span> + phone +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Phone</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span>(<span class="params">String name, <span class="keyword">int</span> no</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Phone&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", no="</span> + no +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span>(<span class="params"><span class="keyword">int</span> no</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```t</span><br><span class="line"></span><br><span class="line"><span class="meta">## 深拷贝</span></span><br><span class="line"></span><br><span class="line">- 创建一个新对象，然后将当前对象的非静态字段复制到该新对象，无论该字段是值类型的还是引用类型，都复制独立的一份。</span><br><span class="line"></span><br><span class="line">- 当你修改其中一个对象的任何内容时，都不会影响另一个对象的内容。</span><br><span class="line"></span><br><span class="line"><span class="meta">## 如何实现深拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="meta">### 让每个引用类型属性内部都重写clone() 方法</span></span><br><span class="line"></span><br><span class="line">- 关键点在Person中clone方法的重写要调用引用属性的clone()方法</span><br></pre></td></tr></table></figure><p>package me.chilam.algorithms;</p><p>public class Test {<br>    public static void main(String[] args) throws CloneNotSupportedException {<br>        Person p = new Person();<br>        p.setName(“simon”);<br>        Phone phone = new Phone(“vivo”, 112);<br>        p.setPhone(phone);<br>        System.out.println(“p = “ + p);<br>        Person clone = ((Person) p.clone());<br>        System.out.println(“clone = “ + clone);<br>        phone.setNo(119);<br>        System.out.println(“p = “ + p);<br>        System.out.println(“clone = “ + clone);<br>    }<br>}</p><p>class Person implements Cloneable {</p><pre><code>private String name;private Phone phone;@Overrideprotected Object clone() throws CloneNotSupportedException {    Person clone = (Person) super.clone();    clone.setPhone(((Phone) this.phone.clone()));    return clone;}public String getName() {    return name;}public void setName(String name) {    this.name = name;}public Phone getPhone() {    return phone;}public void setPhone(Phone phone) {    this.phone = phone;}@Overridepublic String toString() {    return &quot;Person{&quot; +            &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; +            &quot;, phone=&quot; + phone +            &apos;}&apos;;}</code></pre><p>}</p><p>class Phone implements Cloneable {<br>    private String name;<br>    private int no;</p><pre><code>public Phone(String name, int no) {    this.name = name;    this.no = no;}@Overrideprotected Object clone() throws CloneNotSupportedException {    return super.clone();}@Overridepublic String toString() {    return &quot;Phone{&quot; +            &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; +            &quot;, no=&quot; + no +            &apos;}&apos;;}public String getName() {    return name;}public void setName(String name) {    this.name = name;}public int getNo() {    return no;}public void setNo(int no) {    this.no = no;}</code></pre><p>}<br><code>`</code></p><h3 id="利用序列化"><a href="#利用序列化" class="headerlink" title="利用序列化"></a>利用序列化</h3><ul><li>因为序列化产生的是两个完全独立的对象，所有无论嵌套多少个引用类型，序列化都是能实现深拷贝的。</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java关键字-super</title>
      <link href="/2016/03/23/java-keyword-super/"/>
      <url>/2016/03/23/java-keyword-super/</url>
      <content type="html"><![CDATA[<h2 id="调用父类的构造方法"><a href="#调用父类的构造方法" class="headerlink" title="调用父类的构造方法"></a>调用父类的构造方法</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Parent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"父类默认无参构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Son</span> <span class="title">extends</span> <span class="title">Parent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"子类默认无参构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果声明的类是原始类Object，那么默认的构造函数有一个空的主体。否则，默认构造函数只是简单地调用没有参数的超类构造函数.</li></ul><h2 id="调用父类的成员属性"><a href="#调用父类的成员属性" class="headerlink" title="调用父类的成员属性"></a>调用父类的成员属性</h2><h2 id="调用父类的方法"><a href="#调用父类的方法" class="headerlink" title="调用父类的方法"></a>调用父类的方法</h2><h2 id="this和super能出现在同一个构造器中？"><a href="#this和super能出现在同一个构造器中？" class="headerlink" title="this和super能出现在同一个构造器中？"></a>this和super能出现在同一个构造器中？</h2><ul><li>如果声明的类是原始类Object，那么默认的构造函数有一个空的主体。否则，默认构造函数只是简单地调用没有参数的超类构造函数。</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java关键字-this</title>
      <link href="/2016/03/21/java-keyword-this/"/>
      <url>/2016/03/21/java-keyword-this/</url>
      <content type="html"><![CDATA[<h2 id="调用成员变量"><a href="#调用成员变量" class="headerlink" title="调用成员变量"></a>调用成员变量</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"张三"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        name = name;<span class="comment">//用的是形参name,要赋值给成员变量的话需要使用this代表当前对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.setName(<span class="string">"李四"</span>);</span><br><span class="line">        System.err.println(test.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用构造方法"><a href="#调用构造方法" class="headerlink" title="调用构造方法"></a>调用构造方法</h2><ul><li>通过 this 来调用构造方法，只能将这条代码放在构造函数的第一行</li></ul><h2 id="调用普通方法"><a href="#调用普通方法" class="headerlink" title="调用普通方法"></a>调用普通方法</h2><ul><li>this 表示当前对象，那么肯定能够调用当前类的普通方法。</li></ul><h2 id="返回当前对象"><a href="#返回当前对象" class="headerlink" title="返回当前对象"></a>返回当前对象</h2>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java关键字-final</title>
      <link href="/2016/03/18/java-keyword-final/"/>
      <url>/2016/03/18/java-keyword-final/</url>
      <content type="html"><![CDATA[<h2 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h2><ul><li>被 final 修饰的变量不可更改其引用地址，但是可以更改其内部属性。</li></ul><h2 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h2><ul><li>final 关键字只有明确禁止覆盖方法时，才使用其修饰方法。</li></ul><h2 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h2><ul><li><p>final 修饰类表示该类不可被继承。</p></li><li><p>用 final 修饰的类，其类中所有的方法也被隐式的指为 final 方法。</p></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java关键字-static</title>
      <link href="/2016/03/17/java-keyword-static/"/>
      <url>/2016/03/17/java-keyword-static/</url>
      <content type="html"><![CDATA[<h2 id="修饰成员变量"><a href="#修饰成员变量" class="headerlink" title="修饰成员变量"></a>修饰成员变量</h2><h3 id="普通成员变量"><a href="#普通成员变量" class="headerlink" title="普通成员变量"></a>普通成员变量</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">public</span> Person(<span class="keyword">String</span> name, Integer age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//get和set方法省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p1 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"张三"</span>,<span class="number">21</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"李四"</span>,<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-27/86945118.jpg" alt=""></p><h3 id="static修饰"><a href="#static修饰" class="headerlink" title="static修饰"></a>static修饰</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer age;</span><br><span class="line">    <span class="keyword">public</span> Person(<span class="keyword">String</span> name, Integer age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//get和set方法省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person p1 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"张三"</span>,<span class="number">22</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"李四"</span>,<span class="number">21</span>);</span><br></pre></td></tr></table></figure><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-27/59100565.jpg" alt=""></p><ul><li><p>jvm 的内存构造中，会在堆中开辟一块内存空间，专门用来存储用 static 修饰的成员变量，称为静态存储区。</p></li><li><p>无论我们创建多少个对象，用 static 修饰的成员变量有且只有一份存储在静态存储区中，所以该静态变量的值是以最后创建对象时设置该静态变量的值为准。</p></li><li><p>在 JDK1.8 以前，静态存储区是存放在方法区的，而方法区不属于堆，在 JDK1.8 之后，才将方法区干掉了，方法区中的静态存储区改为到堆中存储。</p></li></ul><h2 id="修饰成员方法"><a href="#修饰成员方法" class="headerlink" title="修饰成员方法"></a>修饰成员方法</h2><ul><li>用 static 关键字修饰成员方法也是一样的道理，我们可以直接通过 类名.静态方法名() 的方式来调用，而不用创建对象。</li></ul><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><ul><li><p>用 static 修饰的代码块称为静态代码块，静态代码块可以置于类的任意一个地方（和成员变量成员方法同等地位，不可放入方法中）</p></li><li><p>一个类可以有多个静态代码块，在类初次载入内存时加载静态代码块，并且按照声明静态代码块的顺序来加载，且仅加载一次</p></li><li><p>优先于各种代码块以及构造函数。</p></li></ul><h2 id="静态导包"><a href="#静态导包" class="headerlink" title="静态导包"></a>静态导包</h2><ul><li>用 static 来修饰成员变量，成员方法，以及静态代码块是最常用的三个功能，静态导包是 JDK1.5以后的新特性，用 import static 包名 来代替传统的 import 包名 方式。</li></ul><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><ul><li><p>定义在一个类的内部的类叫内部类，包含内部类的类叫外部类，内部类用 static 修饰便是我们所说的静态内部类。</p></li><li><p>定义内部类的好处是外部类可以访问内部类的所有方法和属性，包括私有方法和私有属性。</p></li><li><p>访问普通内部类，我们需要先创建外部类的对象，然后通过外部类名.new 创建内部类的实例。</p></li><li><p>访问静态内部类，我们不需要创建外部类的对象，可以直接通过 外部类名.内部类名 来创建实例。</p></li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java关键字-native</title>
      <link href="/2016/03/16/java-keyword-native/"/>
      <url>/2016/03/16/java-keyword-native/</url>
      <content type="html"><![CDATA[<h2 id="Java-Native-Interface"><a href="#Java-Native-Interface" class="headerlink" title="Java Native Interface"></a>Java Native Interface</h2><pre><code>如何用 Java 代码调用不同语言编写的代码.从Java 1.1开始，Java Native Interface (JNI)标准就成为java平台的一部分，</code></pre><p>它允许Java代码和其他语言写的代码进行交互。JNI一开始是为了本地已编译语言，尤其是C和C++而设计 的，但是它并不妨碍你<br>使用其他语言，只要调用约定受支持就可以了。</p><h3 id="JNI-的缺点："><a href="#JNI-的缺点：" class="headerlink" title="JNI 的缺点："></a>JNI 的缺点：</h3><ul><li><p>程序不再跨平台。要想跨平台，必须在不同的系统环境下重新编译本地语言部分。</p></li><li><p>程序不再是绝对安全的，本地代码的不当使用可能导致整个程序崩溃</p></li></ul><h2 id="一个实际的JNI例子"><a href="#一个实际的JNI例子" class="headerlink" title="一个实际的JNI例子"></a>一个实际的JNI例子</h2><h3 id="用C语言编写本地方法"><a href="#用C语言编写本地方法" class="headerlink" title="用C语言编写本地方法"></a>用C语言编写本地方法</h3><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html" target="_blank" rel="noopener">JNI官方文档</a></p><ul><li>编写一个native的java类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNIHello</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">jniHello</span><span class="params">(String text)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"JNIHello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        JNIHello jniHello = <span class="keyword">new</span> JNIHello();</span><br><span class="line">        jniHello.jniHello(<span class="string">"hello jni"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>编译JNIHello.java生成JNIHello.class</p></li><li><p>使用javah -jni JNIHello生成JNIHello.h的头文件</p></li></ul><p>函数声明，固定格式：JNIEXPORT；返回类型：void；JNI调用：JNICALL；Java_完整类名_方法名：Java_JNIHello_jniHello；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class JNIHello */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_JNIHello</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_JNIHello</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     JNIHello</span></span><br><span class="line"><span class="comment"> * Method:    jniHello</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL Java_JNIHello_jniHello</span><br><span class="line">  (JNIEnv *, jobject, jstring);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>使用C语言编写本地代码JNIHello.c</li></ul><p>函数参数：调用jni.h封装好的函数指针：JNIEnv；Java类本身：jobject，Java文件传入参数：jstring。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"JNIHello.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> <span class="title">Java_JNIHello_jniHello</span><span class="params">(JNIEnv *env, jobject obj, jstring <span class="built_in">string</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="built_in">string</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java关键字-instanceOf</title>
      <link href="/2016/03/15/java-keyword-instanceof/"/>
      <url>/2016/03/15/java-keyword-instanceof/</url>
      <content type="html"><![CDATA[<ul><li><a href="https://www.zhihu.com/question/21574535" target="_blank" rel="noopener">参考链接</a></li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>instanceof用来测试一个对象是否为一个类的实例，用法为：</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"aaa"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">boolean </span><span class="keyword">b </span>= s <span class="keyword">instanceof </span>String<span class="comment">;</span></span><br><span class="line">System.out.println(<span class="string">"b = "</span> + <span class="keyword">b);</span></span><br></pre></td></tr></table></figure><pre><code>其中 s 为一个对象，String 表示一个类或者一个接口，当 s 为 String 的对象，或者是其直接或间接子类，或者是其接口的实现类，</code></pre><p>结果result 都返回 true，否则返回false。注意：编译器会检查 obj 是否能转换成右边的class类型，如果不能转换则直接报错，<br>如果不能确定类型，则通过编译，具体看运行时定。</p><h2 id="必须为引用类型，不能是基本类型"><a href="#必须为引用类型，不能是基本类型" class="headerlink" title="必须为引用类型，不能是基本类型"></a>必须为引用类型，不能是基本类型</h2><ul><li>instanceof 运算符只能用作对象的判断。</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int i = <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">boolean </span><span class="keyword">b </span>= i.<span class="keyword">instanceof </span>Integer<span class="comment">;//编译不通过</span></span><br></pre></td></tr></table></figure><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><ul><li>在<a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.20.2" target="_blank" rel="noopener">JavaSE规范</a> 中对 instanceof 运算符的规定就是：如果 obj 为 null，那么将返回 false。</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.err.<span class="built_in">println</span>(<span class="keyword">null</span> <span class="keyword">instanceof</span> <span class="keyword">Object</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="类的实例对象"><a href="#类的实例对象" class="headerlink" title="类的实例对象"></a>类的实例对象</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Long</span> l1 = <span class="keyword">new</span> <span class="keyword">Long</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">boolean</span> b = l1 <span class="keyword">instanceof</span> <span class="keyword">Long</span>;</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"b = "</span> + b);</span><br></pre></td></tr></table></figure><h2 id="接口的实现类"><a href="#接口的实现类" class="headerlink" title="接口的实现类"></a>接口的实现类</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; strings = <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="built_in">boolean</span> b = strings instanceof <span class="built_in">List</span>;</span><br><span class="line">System.out.println(<span class="string">"b = "</span> + b);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="类的直接或间接子类"><a href="#类的直接或间接子类" class="headerlink" title="类的直接或间接子类"></a>类的直接或间接子类</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">Bird</span> bird = <span class="keyword">new</span> <span class="type">Bird</span>();</span><br><span class="line">        boolean b = bird instanceof <span class="type">Animal</span>;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"b = "</span> + b);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ul><li>编译器会检查instanceof左边对象能否转换成右边类，如果不能转换直接报错，如果不能确定，则通过编译具体看运行时定。</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Bird </span><span class="keyword">bird </span>= new <span class="keyword">Bird();</span></span><br><span class="line"><span class="keyword">boolean </span><span class="keyword">b1 </span>= <span class="keyword">bird </span><span class="keyword">instanceof </span>String<span class="comment">;//不能编译</span></span><br><span class="line"><span class="keyword">boolean </span><span class="keyword">b </span>= <span class="keyword">bird </span><span class="keyword">instanceof </span>List<span class="comment">;//false</span></span><br><span class="line"><span class="keyword">boolean </span><span class="keyword">b1 </span>= <span class="keyword">bird </span><span class="keyword">instanceof </span>List&lt;?&gt;<span class="comment">;//false</span></span><br><span class="line"><span class="keyword">boolean </span><span class="keyword">b2 </span>= <span class="keyword">bird </span><span class="keyword">instanceof </span>List&lt;Animal&gt;<span class="comment">;//不能编译</span></span><br></pre></td></tr></table></figure><ol><li><p>Brid的对象bird很明显不能转换为String 对象，那么bird instanceof String不能通过编译</p></li><li><p>但为什么bird instanceof List;却能通过编译呢？而bird instanceof List<animal> 又不能通过编译了？</animal></p></li></ol><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.20.2" target="_blank" rel="noopener">JavaSE8语言规范-InstanceOf</a></p><ul><li>伪代码的描述如下：</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">boolean result;</span><br><span class="line"><span class="keyword">if</span> (<span class="attr">obj</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="attr">result</span> = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">      T <span class="attr">temp</span> = (T) obj; // checkcast</span><br><span class="line">      <span class="attr">result</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125; catch (ClassCastException e) &#123;</span><br><span class="line">      <span class="attr">result</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果 obj 不为 null 并且 (T) obj 不抛 ClassCastException 异常则该表达式值为 true ，否则值为 false 。</li></ul><h3 id="instanceof的实现策略"><a href="#instanceof的实现策略" class="headerlink" title="instanceof的实现策略"></a>instanceof的实现策略</h3><p><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.instanceof" target="_blank" rel="noopener">javainstanceof实现算法描述</a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S <span class="keyword">instanceof</span> T</span><br></pre></td></tr></table></figure><ul><li><p>If S is an ordinary (nonarray) class, then:</p><ul><li><p>If T is a class type, then S must be the same class as T, or S must be a subclass of T;</p></li><li><p>If T is an interface type, then S must implement interface T.</p></li></ul></li><li><p>If S is an interface type, then:</p><ul><li><p>If T is a class type, then T must be Object.</p></li><li><p>If T is an interface type, then T must be the same interface as S or a superinterface of S.</p></li></ul></li><li><p>If S is a class representing the array type SC[], that is, an array of components of type SC, then:</p><ul><li><p>If T is a class type, then T must be Object.</p></li><li><p>If T is an interface type, then T must be one of the interfaces implemented by arrays (JLS §4.10.3).</p></li><li><p>If T is an array type TC[], that is, an array of components of type TC, then one of the following must be true:</p><ul><li><p>TC and SC are the same primitive type.</p></li><li><p>TC and SC are reference types, and type SC can be cast to TC by these run-time rules.</p></li></ul></li></ul></li></ul><ol><li><p>obj如果为null，则返回false；否则设S为obj的类型对象，剩下的问题就是检查S是否为T的子类型；</p></li><li><p>如果S == T，则返回true；</p></li><li><p>接下来分为3种情况，之所以要分情况是因为instanceof要做的是“子类型检查”，而Java语言的类型系统里数组类型、接口类型与普通类类型三者的子类型规定都不一样，必须分开来讨论。</p><ol><li><p>S是数组类型：如果 T 是一个类类型，那么T必须是Object；如果 T 是接口类型，那么 T 必须是由数组实现的接口之一；</p></li><li><p>接口类型：对接口类型的 instanceof 就直接遍历S里记录的它所实现的接口，看有没有跟T一致的；</p></li><li><p>类类型：对类类型的 instanceof 则是遍历S的super链（继承链）一直到Object，看有没有跟T一致的。遍历类的super链意味着这个算法的性能会受类的继承深度的影响。</p></li></ol></li></ol>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.学习笔记-ibatis</title>
      <link href="/2016/01/02/ibatis/"/>
      <url>/2016/01/02/ibatis/</url>
      <content type="html"><![CDATA[<h2 id="ibatis的架构图如下"><a href="#ibatis的架构图如下" class="headerlink" title="ibatis的架构图如下"></a>ibatis的架构图如下</h2><p><a href="http://hi.csdn.net/attachment/201112/2/0_132281574457M5.gif" target="_blank" rel="noopener"></a></p><p>外部Java Application调用SqlMapClient接口，经过SqlMapSession、SqlMapExecutorDelegate等实现类，通过PersistentObject、ParameterMap、ResultMap、MappedStatement、Transaction等，基于JDBC、JTA等事务操作，最后调用SqlExecutor操作类对数据库进行操作</p><ol><li>SqlMapClient类是ibatis的门面,通过ibatis完成的持久化操作都是通过调用SqlMapClient类完成的,SqlMapClient将所有的操作都转给类SqlMapExecutorDelegate类。</li><li>SqlMapExecutorDelegate类存放解析配置文件生成的类,比如数据源,parameterMap,resultMap, MappedStatement(对增删改查语句的封装)等。</li><li>SqlExecutor是最终执行sql语句的地方.MappedStatement类包含对参数数组进行包装的ParameterMapping[]数组,对执行结果进行包装的ResultMapping[]数组,还有对各种不同的sql的包装类Sql</li></ol>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ibatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>13.《疯狂Java讲义第三版》读书笔记-IO</title>
      <link href="/2015/10/24/crazy-java-14-io/"/>
      <url>/2015/10/24/crazy-java-14-io/</url>
      <content type="html"><![CDATA[<h2 id="IO流类图结构"><a href="#IO流类图结构" class="headerlink" title="IO流类图结构"></a>IO流类图结构</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-1/4144321.jpg" alt=""></p><ul><li>根据处理数据类型的不同分为：字符流和字节流</li><li>根据数据流向不同分为：输入流和输出流</li><li>按数据来源（去向）分类：<ul><li>File：FileInputStream, FileOutputStream, FileReader, FileWriter </li><li>byte[]：ByteArrayInputStream, ByteArrayOutputStream </li><li>Char[]: CharArrayReader,CharArrayWriter </li><li>String:StringBufferInputStream, StringReader, StringWriter </li><li>网络数据流：InputStream,OutputStream, Reader, Writer </li></ul></li></ul><ol><li>InputStream是所有的输入字节流的父类，它是一个抽象类。</li><li>ByteArrayInputStream、StringBufferInputStream、FileInputStream是三种基本的介质流，它们分别从Byte数组、StringBuffer、和本地文件中读取数据。</li><li>PipedInputStream同一个JVM进程中的不同线程进行通信</li><li>ObjectInputStream和所有FilterInputStream的子类都是装饰流（装饰器模式的主角）。</li></ol><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-1/98119701.jpg" alt=""></p><h3 id="Java-NIO和IO的主要区别"><a href="#Java-NIO和IO的主要区别" class="headerlink" title="Java NIO和IO的主要区别"></a>Java NIO和IO的主要区别</h3><ul><li>IO是面向流的，NIO是面向缓冲区的</li><li>Java IO的各种流是阻塞的,Java NIO的非阻塞模式。</li></ul><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><h4 id="Java-NIO的通道与流区别"><a href="#Java-NIO的通道与流区别" class="headerlink" title="Java NIO的通道与流区别"></a>Java NIO的通道与流区别</h4><ul><li>既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。</li><li>通道可以异步地读写。</li><li>通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。</li></ul><h4 id="Channel的实现"><a href="#Channel的实现" class="headerlink" title="Channel的实现"></a>Channel的实现</h4><ul><li>FileChannel：从文件中读写数据。</li><li>DatagramChannel：能通过UDP读写网络中的数据。</li><li>SocketChannel：能通过TCP读写网络中的数据。 </li><li>ServerSocketChannel：可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChann</li></ul><h4 id="Channel的使用案例"><a href="#Channel的使用案例" class="headerlink" title="Channel的使用案例"></a>Channel的使用案例</h4><ul><li>打开Channel</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">RandomAccessFile aFile</span> = new RandomAccessFile(<span class="string">"d://nio-data.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line"><span class="attribute">FileChannel inChannel</span> = aFile.getChannel();</span><br></pre></td></tr></table></figure><ul><li>读取数据</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ByteBuffer </span><span class="keyword">buf </span>= <span class="keyword">ByteBuffer.allocate(48);</span></span><br><span class="line"><span class="keyword">int </span><span class="keyword">bytesRead </span>= inChannel.read(<span class="keyword">buf);</span></span><br></pre></td></tr></table></figure><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>缓冲区本质上一块可以写入数据，然后可以从中读取数据的内存。</p><h4 id="Buffer的基本用法，使用Buffer读写数据一般遵循以下4个步骤："><a href="#Buffer的基本用法，使用Buffer读写数据一般遵循以下4个步骤：" class="headerlink" title="Buffer的基本用法，使用Buffer读写数据一般遵循以下4个步骤："></a>Buffer的基本用法，使用Buffer读写数据一般遵循以下4个步骤：</h4><ul><li>写入数据到Buffer</li><li>调用flip()方法，将 Buffer 从写模式切换到读模式，调用flip()方法会将position设回0，并将limit设置成之前position的值。</li><li>从Buffer中读取数据</li><li>调用clear()方法或者compact()方法</li></ul><p>一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。有两种方式能清空缓冲区：调用 clear() 或 compact() 方法。</p><ul><li>clear() 方法会清空整个缓冲区。</li><li>compact() 方法只会清除已经读过的数据。</li></ul><p>任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。 </p><h4 id="Buffer的3个属性"><a href="#Buffer的3个属性" class="headerlink" title="Buffer的3个属性"></a>Buffer的3个属性</h4><p><img src="http://orkt468tj.bkt.clouddn.com/18-7-2/31500663.jpg" alt=""></p><ul><li>容量（capacity）：表示Buffer最大数据容量，缓冲区容量不能为负，并且建立后不能修改。</li><li>限制（limit）：第一个不应该读取或者写入的数据的索引，即位于limit后的数据不可以读写。缓冲区的限制不能为负，并且不能大于其容量（capacity）。</li><li>位置（position）：下一个要读取或写入的数据的索引。缓冲区的位置不能为负，并且不能大于其限制（limit）。</li><li>标记（mark）与重置（reset）：标记是一个索引，通过Buffer中的mark()方法指定Buffer中一个特定的position，之后可以通过调用reset()方法恢复到这个position。</li></ul><h4 id="flip"><a href="#flip" class="headerlink" title="flip()"></a>flip()</h4><p>flip方法将Buffer从写模式切换到读模式。调用flip()方法会将position设回0，并将limit设置成之前position的值。 </p><h4 id="clear-与compact-方法"><a href="#clear-与compact-方法" class="headerlink" title="clear()与compact()方法"></a>clear()与compact()方法</h4><ul><li>如果调用的是 clear() 方法，position将被设回 0，limit被设置成 capacity 的值。换句话说，Buffer 被清空了。</li><li>compact()方法将所有未读的数据拷贝到Buffer起始处。然后将position设到最后一个未读元素正后面。limit 属性依然像 clear() 方法一样，设置成 capacity。现在Buffer准备好写数据了，但是不会覆盖未读的数据。 </li></ul><h3 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h3><ul><li>选择器用于监听多个通道的事件（比如：连接打开，数据到达</li><li>Selector会不断轮询注册在其上的Channel，如果某个Channel上面发生读或者写事件，这个Channel就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey可以获取就绪Channel的集合，进行后续的I/O操作。</li><li>一个Selector可以同时轮询多个Channel，因为JDK使用了epoll()代替传统的select实现，所以没有最大连接句柄1024/2048的限制。所以，只需要一个线程负责Selector的轮询，就可以接入成千上万的客户端。</li></ul><h4 id="Selector的创建"><a href="#Selector的创建" class="headerlink" title="Selector的创建"></a>Selector的创建</h4><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Selector</span> <span class="keyword">selector</span> = <span class="keyword">Selector</span>.open();</span><br></pre></td></tr></table></figure><h4 id="Selector通道注册"><a href="#Selector通道注册" class="headerlink" title="Selector通道注册"></a>Selector通道注册</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">channel.configureBlocking(<span class="literal">false</span>);  </span><br><span class="line">SelectionKey key = channel.<span class="keyword">register</span>(selector,  Selectionkey.OP_READ);</span><br></pre></td></tr></table></figure><ul><li>与 Selector 一起使用时，Channel 必须处于非阻塞模式下,FileChannel 不能切换到非阻塞模式。而套接字通道都可以。</li><li>SelectionKey.OP_CONNECT</li><li>SelectionKey.OP_ACCEPT</li><li>SelectionKey.OP_READ</li><li>SelectionKey.OP_WRITE</li></ul><h3 id="模板代码"><a href="#模板代码" class="headerlink" title="模板代码"></a>模板代码</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ServerSocketChannel</span> ssc = ServerSocketChannel.open()<span class="comment">;</span></span><br><span class="line"><span class="symbol">ssc.socket</span>().<span class="keyword">bind(new </span>InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8080</span>))<span class="comment">;</span></span><br><span class="line"><span class="symbol">ssc.configureBlocking</span>(false)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Selector </span><span class="keyword">selector </span>= <span class="keyword">Selector.open();</span></span><br><span class="line"><span class="keyword">ssc.register(selector, </span><span class="keyword">SelectionKey.OP_ACCEPT);</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">while(true) </span>&#123;</span><br><span class="line">    int readyNum = <span class="keyword">selector.select();</span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">if</span> (readyNum == <span class="number">0</span>) &#123;</span><br><span class="line">        continue<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Set&lt;<span class="keyword">SelectionKey&gt; </span><span class="keyword">selectedKeys </span>= <span class="keyword">selector.selectedKeys();</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">Iterator&lt;SelectionKey&gt; </span><span class="keyword">it </span>= <span class="keyword">selectedKeys.iterator();</span></span><br><span class="line"><span class="keyword"> </span>   </span><br><span class="line">    <span class="meta">while</span>(<span class="keyword">it.hasNext()) </span>&#123;</span><br><span class="line">        <span class="keyword">SelectionKey </span>key = <span class="keyword">it.next();</span></span><br><span class="line"><span class="keyword"> </span>       </span><br><span class="line">        <span class="meta">if</span>(key.isAcceptable()) &#123;</span><br><span class="line">            // 接受连接</span><br><span class="line">        &#125; <span class="meta">else</span> <span class="meta">if</span> (key.isReadable()) &#123;</span><br><span class="line">            // 通道可读</span><br><span class="line">        &#125; <span class="meta">else</span> <span class="meta">if</span> (key.isWritable()) &#123;</span><br><span class="line">            // 通道可写</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">it.remove();</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AIO编程"><a href="#AIO编程" class="headerlink" title="AIO编程"></a>AIO编程</h2><h3 id="AIO的特点"><a href="#AIO的特点" class="headerlink" title="AIO的特点"></a>AIO的特点</h3><ul><li><p>读完了再通知我</p></li><li><p>不会加快IO，只是在读完后进行通知</p></li><li><p>使用回调函数，进行业务处理</p></li></ul><h2 id="select、poll和epoll"><a href="#select、poll和epoll" class="headerlink" title="select、poll和epoll"></a>select、poll和epoll</h2><h3 id="select的缺点："><a href="#select的缺点：" class="headerlink" title="select的缺点："></a>select的缺点：</h3><ul><li><p>单个进程能够监视的文件描述符的数量存在最大限制，通常是1024，当然可以更改数量，但由于select采用轮询的方式扫描文件描述符，文件描述符数量越多，性能越差；(在linux内核头文件中，有这样的定义：#define __FD_SETSIZE    1024)</p></li><li><p>内核/用户空间内存拷贝问题，select需要复制大量的句柄数据结构，产生巨大的开销；</p></li><li><p>select返回的是含有整个句柄的数组，应用程序需要遍历整个数组才能发现哪些句柄发生了事件</p></li><li><p>select的触发方式是水平触发，应用程序如果没有完成对一个已经就绪的文件描述符进行IO操作，那么之后每次select调用还是会将这些文件描述符通知进程。</p></li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>拿select模型为例，假设我们的服务器需要支持100万的并发连接，则在__FD_SETSIZE 为1024的情况下，则我们至少需要开辟1k个进程才能实现100万的并发连接。除了进程间上下文切换的时间消耗外，从内核/用户空间大量的无脑内存拷贝、数组轮询等，是系统难以承受的。因此，基于select模型的服务器程序，要达到10万级别的并发访问，是一个很难完成的任务。</p><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><ul><li>相比select模型，poll使用链表保存文件描述符，因此没有了监视文件数量的限制，但其他三个缺点依然存在。</li></ul><h3 id="epoll-IO多路复用模型实现机制"><a href="#epoll-IO多路复用模型实现机制" class="headerlink" title="epoll IO多路复用模型实现机制"></a>epoll IO多路复用模型实现机制</h3><p>select和poll都只提供了一个函数——select或者poll函数。而epoll提供了三个函数，epoll_create,epoll_ctl和epoll_wait，</p><ul><li>epoll_create是创建一个epoll句柄；</li><li>epoll_ctl是注册要监听的事件类型；</li><li>epoll_wait则是等待事件的产生。</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>13.《疯狂Java讲义第三版》读书笔记-String.intern()</title>
      <link href="/2015/10/22/crazy-java-13-string-intern/"/>
      <url>/2015/10/22/crazy-java-13-string-intern/</url>
      <content type="html"><![CDATA[<h2 id="String-intern"><a href="#String-intern" class="headerlink" title="String.intern()"></a>String.intern()</h2><h3 id="字面量赋值"><a href="#字面量赋值" class="headerlink" title="字面量赋值"></a>字面量赋值</h3><ul><li>通过字面量赋值</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-17/60389137.jpg" alt=""></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"abc"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str2 </span>= <span class="string">"abc"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str3 </span>= <span class="string">"chilam"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="常量字段的-操作"><a href="#常量字段的-操作" class="headerlink" title="常量字段的+操作"></a>常量字段的+操作</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"ab"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str2 </span>= <span class="string">"cd"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str3 </span>= <span class="string">"ab"</span> + <span class="string">"cd"</span><span class="comment">;//编译阶段就会合成abdd字符串</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str4 </span>= <span class="string">"abcd"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str5 </span>= <span class="keyword">str1 </span>+ <span class="keyword">str2;//编译的时候无法确定</span></span><br><span class="line"><span class="keyword">System.out.println("str4 </span>== <span class="keyword">str3 </span>= <span class="string">" + (str4 == str3));//true</span></span><br><span class="line"><span class="string">System.out.println("</span><span class="keyword">str5 </span>== <span class="keyword">str4 </span>= <span class="string">" + (str5 == str4));//false</span></span><br></pre></td></tr></table></figure><h3 id="final修饰的宏变量"><a href="#final修饰的宏变量" class="headerlink" title="final修饰的宏变量"></a>final修饰的宏变量</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">final</span> <span class="keyword">String </span><span class="keyword">str1 </span>= <span class="string">"ab"</span><span class="comment">;</span></span><br><span class="line"><span class="symbol">final</span> <span class="keyword">String </span><span class="keyword">str2 </span>= <span class="string">"cd"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str3 </span>= <span class="string">"ab"</span> + <span class="string">"cd"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str4 </span>= <span class="string">"abcd"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str5 </span>= <span class="keyword">str1 </span>+ <span class="keyword">str2;//宏变量编译的时候就可以替换</span></span><br><span class="line"><span class="keyword">System.out.println("str4 </span>== <span class="keyword">str3 </span>= <span class="string">" + (str4 == str3));//true</span></span><br><span class="line"><span class="string">System.out.println("</span><span class="keyword">str5 </span>== <span class="keyword">str4 </span>= <span class="string">" + (str5 == str4));//true</span></span><br></pre></td></tr></table></figure><h3 id="jdk7后intern-方法"><a href="#jdk7后intern-方法" class="headerlink" title="jdk7后intern()方法"></a>jdk7后intern()方法</h3><ul><li>intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用</li><li>原来在常量池中找不到时，复制一个副本放到常量池</li><li>1.7后则是将在堆上的地址引用复制到常量池。 </li></ul><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> str1 = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"abc"</span>);</span><br><span class="line"><span class="keyword">String</span> intern = str1.intern();<span class="comment">//返回常量池的abc</span></span><br><span class="line">System.out.<span class="built_in">println</span>(str1 == intern);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li>当执行String str1 = new String(“abc”)的内存如下，常量池有一个abc,以及堆里面有abc</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-17/55409658.jpg" alt=""></p><ul><li>当执行str1.intern()的时候发现常量池已经有了，直接返回常量池</li><li>所以此时str1==intern为false</li></ul><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> a = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"abc"</span>);</span><br><span class="line"><span class="keyword">String</span> b = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"def"</span>);</span><br><span class="line"><span class="keyword">String</span> str1 = a + b;</span><br><span class="line"><span class="keyword">String</span> intern = str1.intern();</span><br><span class="line">System.out.<span class="built_in">println</span>(str1 == intern);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-17/44020586.jpg" alt=""></p><ul><li>执行String str1 = a + b;的时候利用的StringBuilder的append()方法并没有生成常量</li><li>执行str1.intern()的时候，生成的常量将是引用指向str1,所有intern==str1为true</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>12.《疯狂Java讲义第三版》读书笔记-反射</title>
      <link href="/2015/10/22/crazy-java-12-reflect/"/>
      <url>/2015/10/22/crazy-java-12-reflect/</url>
      <content type="html"><![CDATA[<h2 id="类的加载，连接和初始化"><a href="#类的加载，连接和初始化" class="headerlink" title="类的加载，连接和初始化"></a>类的加载，连接和初始化</h2><h3 id="JVM进程将被终止"><a href="#JVM进程将被终止" class="headerlink" title="JVM进程将被终止"></a>JVM进程将被终止</h3><ul><li>程序运行到最后正常结束</li><li>程序运行到使用System.exit()或Runtime.getRuntime().exit()代码处结束程序</li><li>程序执行过程中遇到未捕获的异常和错误而结束</li><li>程序所在平台终止了JVM进程</li></ul><h3 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h3><h4 id="类的连接"><a href="#类的连接" class="headerlink" title="类的连接"></a>类的连接</h4><ul><li>验证：验证阶段用于检验被加载的类是否有正确的内部结构，并和其他类协调一致。</li><li>准备：类准备阶段则负责为类的类变量分配内存，并设定默认值。</li><li>解析：将类的二进制数据的中的符号引用替换成直接引用。</li></ul><h4 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h4><p>主要是对类变量做初始化，JVM初始化一个类主要包含以下几个步骤：</p><ul><li>假如这个类还没有被加载和连接，则程序先加载并连接其类</li><li>假如该类的直接父类还没有被初始化，则先初始化其直接父类</li><li>假如类中有初始化语句，则系统依次执行这些初始化语句</li></ul><p>类的初始化时机：</p><ul><li>创建类的实例，new,反射，反序列化</li><li>调用某个类的类方法</li><li>调用某个类或接口的类变量或为该变量赋值</li><li>使用反射方式强制创建某个类的或接口对应的java.lang.Class对象</li><li>初始化某个类的子类，所有父类都会被初始化</li><li>直接使用java.exe命令来运行某个主类</li></ul><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>类加载器负责将.class文件加载到内存中，并生成对应的java.lang.Class对象。</p><h4 id="根类加载器-Bootstrap-ClassLoader"><a href="#根类加载器-Bootstrap-ClassLoader" class="headerlink" title="根类加载器 Bootstrap ClassLoader"></a>根类加载器 Bootstrap ClassLoader</h4><ul><li>负责加载Java的核心类</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import sun.misc.Launcher;</span><br><span class="line">import java.net.URL;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestBootStrapClasssLoader</span> &#123;</span></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        URL[] urLs = Launcher.getBootstrapClassPath().getURLs();</span><br><span class="line">        <span class="keyword">for</span> (URL urL : urLs) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"urL = "</span> + urL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">urL = <span class="symbol">file:</span>/<span class="symbol">C:</span>/Program%<span class="number">20</span>Files/Java/jdk1.<span class="number">8.0_162</span>/jre/<span class="class"><span class="keyword">lib</span>/<span class="title">resources</span>.<span class="title">jar</span></span></span><br><span class="line">urL = <span class="symbol">file:</span>/<span class="symbol">C:</span>/Program%<span class="number">20</span>Files/Java/jdk1.<span class="number">8.0_162</span>/jre/<span class="class"><span class="keyword">lib</span>/<span class="title">rt</span>.<span class="title">jar</span></span></span><br><span class="line">urL = <span class="symbol">file:</span>/<span class="symbol">C:</span>/Program%<span class="number">20</span>Files/Java/jdk1.<span class="number">8.0_162</span>/jre/<span class="class"><span class="keyword">lib</span>/<span class="title">sunrsasign</span>.<span class="title">jar</span></span></span><br><span class="line">urL = <span class="symbol">file:</span>/<span class="symbol">C:</span>/Program%<span class="number">20</span>Files/Java/jdk1.<span class="number">8.0_162</span>/jre/<span class="class"><span class="keyword">lib</span>/<span class="title">jsse</span>.<span class="title">jar</span></span></span><br><span class="line">urL = <span class="symbol">file:</span>/<span class="symbol">C:</span>/Program%<span class="number">20</span>Files/Java/jdk1.<span class="number">8.0_162</span>/jre/<span class="class"><span class="keyword">lib</span>/<span class="title">jce</span>.<span class="title">jar</span></span></span><br><span class="line">urL = <span class="symbol">file:</span>/<span class="symbol">C:</span>/Program%<span class="number">20</span>Files/Java/jdk1.<span class="number">8.0_162</span>/jre/<span class="class"><span class="keyword">lib</span>/<span class="title">charsets</span>.<span class="title">jar</span></span></span><br><span class="line">urL = <span class="symbol">file:</span>/<span class="symbol">C:</span>/Program%<span class="number">20</span>Files/Java/jdk1.<span class="number">8.0_162</span>/jre/<span class="class"><span class="keyword">lib</span>/<span class="title">jfr</span>.<span class="title">jar</span></span></span><br><span class="line">urL = <span class="symbol">file:</span>/<span class="symbol">C:</span>/Program%<span class="number">20</span>Files/Java/jdk1.<span class="number">8.0_162</span>/jre/classes</span><br></pre></td></tr></table></figure><h4 id="扩展加载器-Extention-ClassLoader，"><a href="#扩展加载器-Extention-ClassLoader，" class="headerlink" title="扩展加载器 Extention ClassLoader，"></a>扩展加载器 Extention ClassLoader，</h4><ul><li>负责加载JRE扩展目录JAVA_HOME/jre/lib/ext或java.ext.dirs目录指定的jar包</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ClassLoader systemClassLoader</span> = ClassLoader.getSystemClassLoader();</span><br><span class="line"><span class="attribute">ClassLoader extentionClassLoader</span> = systemClassLoader.getParent();</span><br></pre></td></tr></table></figure><h4 id="系统类加载器-System-ClassLoader"><a href="#系统类加载器-System-ClassLoader" class="headerlink" title="系统类加载器 System ClassLoader"></a>系统类加载器 System ClassLoader</h4><ul><li>加载java命令的classpath选项</li><li>java.class.path系统属性</li><li>CLASSPATH环境变量所指定的jar包和类路径</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ClassLoader systemClassLoader</span> = ClassLoader.getSystemClassLoader();</span><br></pre></td></tr></table></figure><h3 id="类的加载机制"><a href="#类的加载机制" class="headerlink" title="类的加载机制"></a>类的加载机制</h3><h4 id="全盘负责"><a href="#全盘负责" class="headerlink" title="全盘负责"></a>全盘负责</h4><p>当一个类加载器负责加载某个Class的时候，该class所依赖的和引用的其他Class也将由该类加载器负责载入</p><h4 id="父类委托"><a href="#父类委托" class="headerlink" title="父类委托"></a>父类委托</h4><p>先让父类加载器试图加载该class,只有在父类加载器无法加载该类的时候才能尝试从自己的类路径加载该类</p><h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><p>缓存机制将保证所有被加载过的class都会被缓存，当程序需要使用某个class对象的时候，类加载器先从缓存中搜寻该class。</p><h3 id="创建并使用自定义的类加载器"><a href="#创建并使用自定义的类加载器" class="headerlink" title="创建并使用自定义的类加载器"></a>创建并使用自定义的类加载器</h3><h4 id="ClassLoader类有2个关键方法"><a href="#ClassLoader类有2个关键方法" class="headerlink" title="ClassLoader类有2个关键方法"></a>ClassLoader类有2个关键方法</h4><ul><li>loadClass(String name,boolean resolve):该方法为ClassLoader的入口点，根据指定名称来加载类</li><li>findClass(String name)根据指定名称来查找类</li></ul><h3 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h3><p>是系统加载类和扩展类的父类，可以从本地文件系统获取二进制文件来加载类，可以从远程主机获取二进制文件来加载类。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><ul><li>Class.forName(String clazzName)静态方法，全限定类名</li><li>调用某个类的class属性Person.class</li><li>调用对象的getClass()方法</li></ul><h3 id="从Class中获取信息"><a href="#从Class中获取信息" class="headerlink" title="从Class中获取信息"></a>从Class中获取信息</h3><ul><li>构造器</li><li>方法</li><li>成员变量</li><li>注解</li></ul><h3 id="java8新增的方法参数反射"><a href="#java8新增的方法参数反射" class="headerlink" title="java8新增的方法参数反射"></a>java8新增的方法参数反射</h3><p>java.lang.reflect.Executable</p><ul><li>int getParameterCount():获取构造器或方法的形参个数</li><li>Parameter[] getParameter()获取该构造器或方法的所有的形参</li></ul><p>java.lang.reflect.Parameter java8新增的API</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> replace(String name, List&lt;String&gt; stringList) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="keyword">Class</span>&lt;Test&gt; testClass = Test.<span class="keyword">class</span>;</span><br><span class="line">        Method replace = testClass.getMethod(<span class="string">"replace"</span>, String.<span class="keyword">class</span>, List.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">int</span> parameterCount = replace.getParameterCount();</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"parameterCount = "</span> + parameterCount);</span><br><span class="line">        Parameter[] parameters = replace.getParameters();</span><br><span class="line">        <span class="keyword">for</span> (Parameter parameter : parameters) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parameter.isNamePresent()) &#123;</span><br><span class="line">                System.out.<span class="keyword">println</span>(<span class="string">"parameter.getName() = "</span> + parameter.getName());</span><br><span class="line">                System.out.<span class="keyword">println</span>(<span class="string">"parameter.getType() = "</span> + parameter.getType());</span><br><span class="line">                System.out.<span class="keyword">println</span>(<span class="string">"parameter.getParameterizedType() = "</span> + parameter.getParameterizedType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>parameter.isNamePresent()需要javac parameters -d .Test.java编译的时候才会记录形参的名称</li></ul><h3 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h3><ul><li>java.lang.reflect.Array 动态创建数组和操作数组</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="keyword">Array</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//创建一个元素类型String，大小为10的数组</span></span><br><span class="line">        Object o = <span class="keyword">Array</span>.<span class="keyword">new</span><span class="type">Instance</span>(<span class="keyword">String</span>.class, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//为数组设置</span></span><br><span class="line">        <span class="keyword">Array</span>.<span class="keyword">set</span>(o, <span class="number">2</span>, <span class="string">"张三"</span>);</span><br><span class="line">        <span class="keyword">Array</span>.<span class="keyword">set</span>(o, <span class="number">3</span>, <span class="string">"李四"</span>);</span><br><span class="line">        <span class="comment">//取出数组的值</span></span><br><span class="line">        Object o1 = <span class="keyword">Array</span>.<span class="keyword">get</span>(o, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"o1 = "</span> + o1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反射生成JDK的动态代理"><a href="#反射生成JDK的动态代理" class="headerlink" title="反射生成JDK的动态代理"></a>反射生成JDK的动态代理</h3><ul><li>java.lang.reflect.Proxy 提供创建动态代理的类和代理对象的静态方法</li><li>java.lang.reflect.InvocationHandler</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.time.Period;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy  动态代理的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 正在执行的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args   方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method = "</span> + method);</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">                System.out.println(<span class="string">"arg = "</span> + arg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(method.getName() + <span class="string">" 没有参数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InvocationHandler invocationHandler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        Person person = (Person) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> Class[]&#123;Person.class&#125;, invocationHandler);</span><br><span class="line">        person.walk();</span><br><span class="line">        person.sayHello(<span class="string">"张三"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用反射来获取泛型信息"><a href="#使用反射来获取泛型信息" class="headerlink" title="使用反射来获取泛型信息"></a>使用反射来获取泛型信息</h3><ul><li>java.lang.reflect.ParameterizedType</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package me.chilam.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.chilam.classloader.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGeneric</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span>&lt;<span class="type">String</span>, <span class="type">Integer</span>&gt; score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="type">String</span>[] args) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">        <span class="type">Class</span>&lt;<span class="type">TestGeneric</span>&gt; testGenericClass = <span class="type">TestGeneric</span>.<span class="keyword">class</span>;</span><br><span class="line">        <span class="comment">//获取成员字段</span></span><br><span class="line">        <span class="type">Field</span> score = testGenericClass.getDeclaredField(<span class="string">"score"</span>);</span><br><span class="line">        <span class="comment">//获取类型</span></span><br><span class="line">        <span class="type">Class</span>&lt;?&gt; type = score.getType();</span><br><span class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"type = "</span> + type);<span class="comment">//type = interface java.util.Map</span></span><br><span class="line">        <span class="comment">//获取泛型类型</span></span><br><span class="line">        <span class="type">Type</span> genericType = score.getGenericType();</span><br><span class="line">        <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"genericType = "</span> + genericType);<span class="comment">//genericType = java.util.Map&lt;java.lang.String, java.lang.Integer&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (genericType instanceof <span class="type">ParameterizedType</span>) &#123;</span><br><span class="line">            <span class="type">ParameterizedType</span> genericType1 = (<span class="type">ParameterizedType</span>) genericType;<span class="comment">//强制类型转换</span></span><br><span class="line">            <span class="type">Type</span> rawType = genericType1.getRawType();<span class="comment">//获取原始类型</span></span><br><span class="line">            <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"rawType = "</span> + rawType);</span><br><span class="line">            <span class="type">Type</span>[] actualTypeArguments = genericType1.getActualTypeArguments();<span class="comment">//取得泛型的泛型参数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Type</span> actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"actualTypeArgument = "</span> + actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>11.《疯狂Java讲义第三版》读书笔记-注解</title>
      <link href="/2015/10/22/crazy-java-11-annotation/"/>
      <url>/2015/10/22/crazy-java-11-annotation/</url>
      <content type="html"><![CDATA[<h2 id="Annotation"><a href="#Annotation" class="headerlink" title="Annotation"></a>Annotation</h2><p>能被用来为程序元素（类，方法，成员变量）设置元数据。值得指出的是，注解不影响程序代码的执行。</p><h3 id="基本的注解"><a href="#基本的注解" class="headerlink" title="基本的注解"></a>基本的注解</h3><ul><li>限定重写父类方法@Override</li><li>标记已过时@Deprecated</li><li>抑制编译器警告@SupressWarnings</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(<span class="keyword">value</span> = <span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestSuppresWarings</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        List&lt;String&gt; myList = <span class="keyword">new</span> ArrayList();<span class="comment">//编译警告</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>java7的堆污染警告与@SafeVarargs</li></ul><p>当一个不带泛型的对象给一个带泛型的变量时，往往就产生堆污染</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span> <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;<span class="built_in">Integer</span>&gt;();</span><br><span class="line"><span class="built_in">list</span>.add(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; strings = <span class="built_in">list</span>;</span><br><span class="line">System.err.println(strings.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><ul><li>java8函数式接口@FunctionInterface</li></ul><h3 id="JDK的元Annotation"><a href="#JDK的元Annotation" class="headerlink" title="JDK的元Annotation"></a>JDK的元Annotation</h3><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h4><p>用于修饰Annotation定义，用于指定被修饰的Annotation可以保留多长的时间，</p><ul><li>RetentionPolicy.CLASS 编译器将Annotation记录在class文件中。</li><li>RetentionPolicy.RUNTIME 编译器将Annotation记录在Class文件中。当Java程序运行时，JVM可以获取annotation信息。</li><li>RetentionPolicy.SOURCE Annotation只保留在源代码中，编译器直接丢掉这种Annotation.</li></ul><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h4><p>指定被修饰的Annotation能用于修饰那些程序单元</p><ul><li>ElementType.ANNOTATION_TYPE指定只能修饰Annotation</li><li>ElementType.CONSTRUCTOR 指定只能修饰构造器</li><li>ElementType.FIELD 成员变量</li><li>ElementType.VARIABLE 局部变量</li><li>ElementType.METHOD 修饰方法</li><li>ElementType.PACKAGE 只能修饰包定义</li><li>ElementType.PARAMETER 修饰参数</li><li>ElementType.TYPE 修饰类，接口，注解类型或枚举定义</li></ul><h4 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h4><p>指定被该元Anotation修饰的Annotation类将被javadoc工具提取成文档</p><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h4><p>被它修饰的注解将具有继承性，如果某个类使用@Xxx注解（@Xxx注解被@Inherited修饰），则其子类将自动被@Xxx修饰</p><h3 id="自定义Annotation"><a href="#自定义Annotation" class="headerlink" title="自定义Annotation"></a>自定义Annotation</h3><ul><li>使用@interface注解修饰</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.<span class="keyword">annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnno &#123;</span><br><span class="line">    String name() <span class="keyword">default</span> <span class="string">"Simon"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestAnno(name = <span class="meta-string">"John"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提取Annotation信息"><a href="#提取Annotation信息" class="headerlink" title="提取Annotation信息"></a>提取Annotation信息</h3><ul><li>java.lang.reflect.AnnotatedElement 表示可以接收注解的程序元素</li><li>java.lang.Class 类定义</li><li>java.lang.reflect.Constructor 构造器定义</li><li>java.lang.reflect.Field 类的成员变量定义</li><li>java.lang.reflect.Method 类的方法定义</li><li>java.lang.Package 包的定义</li></ul><p>从java5开始，java提供了反射API读取运行时Annotation的能力，只有当定义的Annotation被@Retention(RetentionPolicy.RUNTIME)<br>修饰的时候，该Annotation才会在运行时可见。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.RetentionPolicy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnno &#123;</span><br><span class="line">    String name() <span class="keyword">default</span> <span class="string">"Simon"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestAnno(name = <span class="meta-string">"John"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> static void main(String[] args) &#123;</span><br><span class="line">        TestAnno <span class="keyword">annotation</span> = Test.<span class="keyword">class</span>.getAnnotation(TestAnno.<span class="keyword">class</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"annotation = "</span> + <span class="keyword">annotation</span>);</span><br><span class="line">        <span class="comment">//annotation = @me.chilam.annotation.TestAnno(name=John)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java8新增加的重复注解"><a href="#java8新增加的重复注解" class="headerlink" title="java8新增加的重复注解"></a>java8新增加的重复注解</h3><p>java8允许使用多个相同类型的Annotation来修饰同一个类。</p><ul><li>开发重复注解需要@Repeatble修饰</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.*;</span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="comment">//指明容器</span></span><br><span class="line"><span class="meta">@Repeatable(FkTags.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FkTag &#123;</span><br><span class="line">    String name() <span class="keyword">default</span> <span class="string">"john"</span>;</span><br><span class="line">    int age();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开发容器注解</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">annotation</span>.*;</span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FkTags &#123;</span><br><span class="line">    <span class="comment">//指定value变量，可以接收多个@FkTag注解</span></span><br><span class="line">    FkTag[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试代码</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.annotation;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@FkTag(name = "zhangsan", age = 12)</span></span><br><span class="line"><span class="comment">//@FkTag(name = "lisi", age = 34)</span></span><br><span class="line"><span class="meta">@FkTags</span>(value = &#123;</span><br><span class="line">        <span class="meta">@FkTag</span>(name = <span class="string">"wuda"</span>, age = <span class="number">23</span>),</span><br><span class="line">        <span class="meta">@FkTag</span>(name = <span class="string">"sss"</span>, age = <span class="number">34</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFkTag</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        FkTag[] annotationsByType = TestFkTag.<span class="keyword">class</span>.getAnnotationsByType(FkTag.<span class="keyword">class</span>);</span><br><span class="line">        FkTag[] declaredAnnotationsByType = TestFkTag.<span class="keyword">class</span>.getDeclaredAnnotationsByType(FkTag.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">for</span> (FkTag <span class="string">fkTag :</span> declaredAnnotationsByType) &#123;</span><br><span class="line">            System.out.println(<span class="string">"fkTag = "</span> + fkTag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (FkTag <span class="string">fkTag :</span> annotationsByType) &#123;</span><br><span class="line">            System.out.println(<span class="string">"fkTag = "</span> + fkTag);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java8新增的Type-Annotation"><a href="#java8新增的Type-Annotation" class="headerlink" title="java8新增的Type Annotation"></a>java8新增的Type Annotation</h3><h4 id="java8为ElementType新增了TYPE-PARAMETER-TYPE-USE"><a href="#java8为ElementType新增了TYPE-PARAMETER-TYPE-USE" class="headerlink" title="java8为ElementType新增了TYPE_PARAMETER,TYPE_USE"></a>java8为ElementType新增了TYPE_PARAMETER,TYPE_USE</h4><ul><li>创建对象</li><li>类型转换</li><li>使用implements实现接口</li><li>使用throws声明抛出异常</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">me</span><span class="selector-class">.chilam</span><span class="selector-class">.annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.ElementType</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.Retention</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.RetentionPolicy</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.annotation</span><span class="selector-class">.Target</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">Retention</span>(<span class="keyword">RetentionPolicy</span>.<span class="keyword">RUNTIME</span>)</span><br><span class="line">@<span class="keyword">Target</span>(<span class="keyword">ElementType</span>.<span class="keyword">TYPE_USE</span>)</span><br><span class="line"><span class="keyword">public</span> @interface NotNull &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">me</span><span class="selector-class">.chilam</span><span class="selector-class">.annotation</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.io</span><span class="selector-class">.FileNotFoundException</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">java</span><span class="selector-class">.io</span><span class="selector-class">.Serializable</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">TestNotNull</span> <span class="selector-tag">implements</span> @<span class="keyword">NotNull</span> Serializable &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(@<span class="keyword">NotNull</span> String[] args) throws @NotNull FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>10.《疯狂Java讲义第三版》读书笔记-泛型</title>
      <link href="/2015/10/22/crazy-java-10-generic/"/>
      <url>/2015/10/22/crazy-java-10-generic/</url>
      <content type="html"><![CDATA[<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>所谓泛型就是允许在定义类，接口，方法时使用类型形参，这个类型形参将在声明变量，创建对象，调用方法的时候动态的指定</p><h3 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h3><ul><li>从jdk5之后，java引入了参数化类型parameterized type的概念，允许程序的在创建的集合的时候，指定集合元素的类型。</li><li>从jdk7之后，java7允许在构造器后不需要带完整的泛型信息，只要给出一对尖括号就行。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="定义泛型接口和类"><a href="#定义泛型接口和类" class="headerlink" title="定义泛型接口和类"></a>定义泛型接口和类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;T,R&gt; &#123;</span></span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line">    <span class="keyword">private</span> R r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型通配符？"><a href="#类型通配符？" class="headerlink" title="类型通配符？"></a>类型通配符？</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> test(List&lt;?&gt; c) &#123;</span><br><span class="line">    <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        System.err.<span class="built_in">println</span>(c.<span class="built_in">get</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设定类型通配符的上限"><a href="#设定类型通配符的上限" class="headerlink" title="设定类型通配符的上限"></a>设定类型通配符的上限</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test(List&lt;? extends <span class="keyword">String</span>&gt; c) &#123;</span><br><span class="line">    <span class="built_in">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        System.err.<span class="built_in">println</span>(c.<span class="built_in">get</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设定类型参数的上限"><a href="#设定类型参数的上限" class="headerlink" title="设定类型参数的上限"></a>设定类型参数的上限</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test(List&lt;? <span class="keyword">super</span> <span class="keyword">String</span>&gt; c) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; c.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        System.err.<span class="built_in">println</span>(c.<span class="built_in">get</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>修饰符&lt;T,S&gt; 返回值类型 方法名(形参列表){</p><p>}</p><h3 id="泛型构造器"><a href="#泛型构造器" class="headerlink" title="泛型构造器"></a>泛型构造器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;T, R&gt; &#123;</span></span><br><span class="line">    <span class="keyword">public</span> &lt;S&gt; Test(S s)&#123;</span><br><span class="line">        System.out.println(<span class="string">"s = "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java8改进的类型推断"><a href="#java8改进的类型推断" class="headerlink" title="java8改进的类型推断"></a>java8改进的类型推断</h3><ul><li>可以通过调用方法的上下文来推断类型参数的目标类型</li><li>可以在方法调用链中，将推断得到的类型参数传递到最后一个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.chilam.generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUtil</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Z&gt; <span class="function">MyUtil&lt;Z&gt; <span class="title">nil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;Z&gt; <span class="function">MyUtil&lt;Z&gt; <span class="title">cons</span><span class="params">(Z head, MyUtil&lt;Z&gt; tail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">head</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可以通过方法赋值的目标参数来推断类型参数为String</span></span><br><span class="line">        MyUtil&lt;String&gt; ls = MyUtil.nil();</span><br><span class="line">        <span class="comment">//无需使用下面语句在调用nil()方法时指定类型参数的类型</span></span><br><span class="line">        MyUtil&lt;String&gt; ls1 = MyUtil.&lt;String&gt;nil();</span><br><span class="line">        <span class="comment">//可调用cons()方法所需要的参数类型来推断类型参数为Integer</span></span><br><span class="line">        MyUtil.cons(<span class="number">42</span>, MyUtil.nil());</span><br><span class="line">        <span class="comment">//无需使用nil()方法的时候指定参数类型</span></span><br><span class="line">        MyUtil.cons(<span class="number">42</span>, MyUtil.&lt;Integer&gt;nil());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="擦除和转换"><a href="#擦除和转换" class="headerlink" title="擦除和转换"></a>擦除和转换</h3><ul><li>擦除，当把一个具有泛型信息的对象赋值给没有泛型信息的变量时候，所有尖括号之间的类型信息都将被扔掉。</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>9.《疯狂Java讲义第三版》读书笔记-java8日期类</title>
      <link href="/2015/10/20/crazy-java-9-se8-date/"/>
      <url>/2015/10/20/crazy-java-9-se8-date/</url>
      <content type="html"><![CDATA[<h2 id="java-time-LocalDate"><a href="#java-time-LocalDate" class="headerlink" title="java.time.LocalDate"></a>java.time.LocalDate</h2><ul><li>示例代码</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2017</span>, <span class="number">07</span>, <span class="number">17</span>);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"localDate = "</span> + localDate);</span><br><span class="line"><span class="built_in">int</span> <span class="built_in">year</span> = localDate.getYear();</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"year = "</span> + <span class="built_in">year</span>);</span><br><span class="line">Month <span class="built_in">month</span> = localDate.getMonth();</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"month = "</span> + <span class="built_in">month</span>);</span><br><span class="line"><span class="built_in">int</span> dayOfMonth = localDate.getDayOfMonth();</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"dayOfMonth = "</span> + dayOfMonth);</span><br><span class="line"><span class="built_in">int</span> lengthOfMonth = localDate.lengthOfMonth();</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"lengthOfMonth = "</span> + lengthOfMonth);</span><br><span class="line"><span class="built_in">boolean</span> leapYear = localDate.isLeapYear();</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"leapYear = "</span> + leapYear);</span><br><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"now = "</span> + now);</span><br><span class="line"><span class="built_in">int</span> i = localDate.<span class="built_in">get</span>(ChronoField.YEAR);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"i = "</span> + i);</span><br><span class="line"><span class="built_in">int</span> i1 = localDate.<span class="built_in">get</span>(ChronoField.MONTH_OF_YEAR);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"i1 = "</span> + i1);</span><br><span class="line"><span class="built_in">int</span> i2 = localDate.<span class="built_in">get</span>(ChronoField.DAY_OF_MONTH);</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"i2 = "</span> + i2);</span><br></pre></td></tr></table></figure><ul><li>结果</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">localDate</span> = <span class="number">2017</span>-<span class="number">07</span>-<span class="number">17</span></span><br><span class="line"><span class="attr">year</span> = <span class="number">2017</span></span><br><span class="line"><span class="attr">month</span> = JULY</span><br><span class="line"><span class="attr">dayOfMonth</span> = <span class="number">17</span></span><br><span class="line"><span class="attr">lengthOfMonth</span> = <span class="number">31</span></span><br><span class="line"><span class="attr">leapYear</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">now</span> = <span class="number">2018</span>-<span class="number">06</span>-<span class="number">14</span></span><br><span class="line"><span class="attr">i</span> = <span class="number">2017</span></span><br><span class="line"><span class="attr">i1</span> = <span class="number">7</span></span><br><span class="line"><span class="attr">i2</span> = <span class="number">17</span></span><br></pre></td></tr></table></figure><h2 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h2><ul><li>示例代码</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">LocalTime localTime</span> = LocalTime.of(13, 45, 20);</span><br><span class="line"><span class="attribute">int hour</span> = localTime.getHour();</span><br><span class="line"><span class="attribute">int minute</span> = localTime.getMinute();</span><br><span class="line"><span class="attribute">int second</span> = localTime.getSecond();</span><br></pre></td></tr></table></figure><h3 id="parse字符串解析生成"><a href="#parse字符串解析生成" class="headerlink" title="parse字符串解析生成"></a>parse字符串解析生成</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate <span class="built_in">parse</span> = LocalDate.<span class="built_in">parse</span>(<span class="string">"2016-09-18"</span>);</span><br><span class="line">LocalTime localTime1 = LocalTime.<span class="built_in">parse</span>(<span class="string">"13:45:3"</span>);</span><br></pre></td></tr></table></figure><h2 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h2><p>LocalDateTime是LocalDate和LocalTime的结合体</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime localDateTime = LocalDateTime.<span class="keyword">of</span>(LocalDate.now(), LocalTime.now());</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"localDateTime = "</span> + localDateTime);</span><br></pre></td></tr></table></figure><h2 id="机器的日期和时间格式"><a href="#机器的日期和时间格式" class="headerlink" title="机器的日期和时间格式"></a>机器的日期和时间格式</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Instant </span>now = <span class="keyword">Instant.now();</span></span><br><span class="line"><span class="keyword">System.out.println("now </span>= <span class="string">" + now);//now = 2018-06-14T04:00:09.401Z</span></span><br><span class="line"><span class="string">Instant instant = Instant.ofEpochSecond(2);</span></span><br><span class="line"><span class="string">System.out.println("</span><span class="keyword">instant </span>= <span class="string">" + instant);//instant = 1970-01-01T00:00:02Z</span></span><br></pre></td></tr></table></figure><h2 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h2><ul><li>主要用于秒和纳秒衡量时间的长短</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Duration between = Duration.between(LocalTime.of(<span class="number">12</span>, <span class="number">06</span>, <span class="number">00</span>), LocalTime.of(<span class="number">12</span>, <span class="number">07</span>, <span class="number">17</span>));</span><br><span class="line">System.out.println(<span class="string">"between = "</span> + between.getSeconds());<span class="comment">//between = 77</span></span><br><span class="line">Duration duration = Duration.ofMillis(<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">"duration = "</span> + duration);</span><br></pre></td></tr></table></figure><h2 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h2><ul><li>主要是针对年月日进行衡量</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Period between1 = Period.between(LocalDate.of(<span class="number">1992</span>, <span class="number">06</span>, <span class="number">17</span>),LocalDate.of(<span class="number">2018</span>,<span class="number">6</span>,<span class="number">14</span>));</span><br><span class="line">System.out.println(<span class="string">"between1.getDays() = "</span> + between1.getDays());<span class="comment">//28 计算2个天数差</span></span><br></pre></td></tr></table></figure><h2 id="操作、解析和格式化日期"><a href="#操作、解析和格式化日期" class="headerlink" title="操作、解析和格式化日期"></a>操作、解析和格式化日期</h2><h3 id="with修改属性"><a href="#with修改属性" class="headerlink" title="with修改属性"></a>with修改属性</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2017</span>, <span class="number">02</span>, <span class="number">13</span>)<span class="comment">;</span></span><br><span class="line">LocalDate localDate1 = localDate.withYear(<span class="number">2011</span>)<span class="comment">;</span></span><br><span class="line">System.out.println(<span class="string">"localDate1 = "</span> + localDate1)<span class="comment">;</span></span><br><span class="line">LocalDate localDate2 = localDate.withDayOfMonth(<span class="number">25</span>)<span class="comment">;</span></span><br><span class="line">System.out.println(localDate2)<span class="comment">;</span></span><br><span class="line">LocalDate localDate3 = localDate.with(ChronoField.MONTH_OF_YEAR, <span class="number">9</span>)<span class="comment">;</span></span><br><span class="line">System.out.println(<span class="string">"localDate3 = "</span> + localDate3)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="以相对的方式修改属性"><a href="#以相对的方式修改属性" class="headerlink" title="以相对的方式修改属性"></a>以相对的方式修改属性</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate localDate4 = localDate.plusWeeks(<span class="number">1</span>);</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"localDate4 = "</span> + localDate4);</span><br><span class="line">LocalDate localDate5 = localDate.minusYears(<span class="number">2</span>);</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"localDate5 = "</span> + localDate5);</span><br><span class="line">LocalDate <span class="keyword">plus</span> = localDate.<span class="keyword">plus</span>(<span class="number">6</span>, ChronoUnit.MONTHS);</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"plus = "</span> + <span class="keyword">plus</span>);</span><br></pre></td></tr></table></figure><h3 id="TemporalAdjuster"><a href="#TemporalAdjuster" class="headerlink" title="TemporalAdjuster"></a>TemporalAdjuster</h3><ul><li>更加复杂的日期操作，下个周日，下个工作日或本月最后一天</li></ul><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalDate <span class="keyword">of</span> = LocalDate.<span class="keyword">of</span>(<span class="number">2018</span>, <span class="number">6</span>, <span class="number">14</span>);</span><br><span class="line"><span class="comment">//调整到这周或本周日</span></span><br><span class="line">LocalDate localDate<span class="number">6</span> = <span class="keyword">of</span>.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"localDate6 = "</span> + localDate<span class="number">6</span>);<span class="comment">//localDate6 = 2018-06-17</span></span><br><span class="line"><span class="comment">//调整到这个月底</span></span><br><span class="line">LocalDate localDate<span class="number">7</span> = <span class="keyword">of</span>.with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"localDate7 = "</span> + localDate<span class="number">7</span>);<span class="comment">//localDate7 = 2018-06-30</span></span><br></pre></td></tr></table></figure><h2 id="打印输出及解析日期-时间对象"><a href="#打印输出及解析日期-时间对象" class="headerlink" title="打印输出及解析日期-时间对象"></a>打印输出及解析日期-时间对象</h2><ul><li>java.time.format.DateTimeFormatter</li></ul><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式化</span></span><br><span class="line">LocalDate of = LocalDate.of(<span class="number">2014</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">String</span> <span class="keyword">format</span> = of.<span class="keyword">format</span>(DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line"><span class="keyword">System</span>.out.println(<span class="string">"format = "</span> + <span class="keyword">format</span>);<span class="comment">//format = 20140101</span></span><br><span class="line"><span class="keyword">String</span> format1 = of.<span class="keyword">format</span>(DateTimeFormatter.ISO_LOCAL_DATE);</span><br><span class="line"><span class="keyword">System</span>.out.println(<span class="string">"format1 = "</span> + format1);<span class="comment">//format1 = 2014-01-01</span></span><br><span class="line"><span class="comment">//解析</span></span><br><span class="line">LocalDate <span class="built_in">parse</span> = LocalDate.<span class="built_in">parse</span>(<span class="keyword">format</span>, DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line"><span class="keyword">System</span>.out.println(<span class="string">"parse = "</span> + <span class="built_in">parse</span>);</span><br></pre></td></tr></table></figure><ul><li>按照某个模式创建DateTimeFormatter</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy"</span>)<span class="comment">;</span></span><br><span class="line">LocalDate localDate = LocalDate.of(<span class="number">2108</span>, <span class="number">2</span>, <span class="number">23</span>)<span class="comment">;</span></span><br><span class="line">String format2 = localDate.format(dateTimeFormatter)<span class="comment">;</span></span><br><span class="line">System.out.println(<span class="string">"format2 = "</span> + format2)<span class="comment">;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>8.《疯狂Java讲义第三版》读书笔记-forkandjoin</title>
      <link href="/2015/10/20/crazy-java-8-forkandjoin/"/>
      <url>/2015/10/20/crazy-java-8-forkandjoin/</url>
      <content type="html"><![CDATA[<h2 id="分支合并框架"><a href="#分支合并框架" class="headerlink" title="分支合并框架"></a>分支合并框架</h2><p>分支合并框架的目的是以递归的方式将可以并行的任务拆分成更小的任务，然后将每个子任务的结果合并起来生成整体结果。<br>它是java.util.concurrent.ExecutorService的实现，它把子任务分配给线程池（java.util.concurrent.ForkJoinPool）中的工作<br>线程。</p><h3 id="java-util-concurrent-RecursiveTask"><a href="#java-util-concurrent-RecursiveTask" class="headerlink" title="java.util.concurrent.RecursiveTask"></a>java.util.concurrent.RecursiveTask</h3><p>要把任务提交到ForkJoinPool，必须要创建一个java.util.concurrent.RecursiveTask<r>的子类，其中R是并行化任务产生的<br>结果类型</r></p><ul><li>java.util.concurrent.RecursiveTask#compute</li></ul><p>这个方法同时定义了将任务拆分成子任务的逻辑，以及无法再拆分或不方便拆分时，生成单个子任务的逻辑。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.LongStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinSumCalcator</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//要求和的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span>[] numbers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> THRESHOLD = <span class="number">10</span>_000;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinSumCalcator</span><span class="params">(<span class="keyword">long</span>[] numbers, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numbers = numbers;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinSumCalcator</span><span class="params">(<span class="keyword">long</span>[] numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(numbers, <span class="number">0</span>, numbers.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function">Long <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = end - start;</span><br><span class="line">        <span class="keyword">if</span> (length &lt; THRESHOLD) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">return</span> <span class="title">computeSequentially</span><span class="params">()</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一个子任务来为数组的前一半求和</span></span><br><span class="line">        ForkJoinSumCalcator leftTask = <span class="keyword">new</span> ForkJoinSumCalcator(numbers, start, start + length / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//利用ForkJoinPool线程异步执行新创建的子任务</span></span><br><span class="line">        leftTask.fork();</span><br><span class="line">        <span class="comment">//创建一个线程为数组的后一半求和</span></span><br><span class="line">        ForkJoinSumCalcator rightTask = <span class="keyword">new</span> ForkJoinSumCalcator(numbers, start + length / <span class="number">2</span>, end);</span><br><span class="line">        <span class="comment">//同步执行第二个子任务，有可能允许进一步递归</span></span><br><span class="line">        Long rightResult = rightTask.compute();</span><br><span class="line">        <span class="comment">//读取第一个子任务的结果，如果尚未完成就等待</span></span><br><span class="line">        Long leftResult = leftTask.join();</span><br><span class="line">        <span class="comment">//子任务结果的集合</span></span><br><span class="line">        <span class="keyword">return</span> rightResult + leftResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当子任务不再分的时候，计算结果的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">long</span> <span class="title">computeSequentially</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">            sum += numbers[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span>[] longs = LongStream.rangeClosed(<span class="number">0</span>,<span class="number">100</span>_000_000).toArray();</span><br><span class="line">        ForkJoinSumCalcator forkJoinSumCalcator = <span class="keyword">new</span> ForkJoinSumCalcator(longs);</span><br><span class="line">        Long invoke = <span class="keyword">new</span> ForkJoinPool().invoke(forkJoinSumCalcator);</span><br><span class="line">        System.out.println(<span class="string">"invoke = "</span> + invoke);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>7.《疯狂Java讲义第三版》读书笔记-Stream</title>
      <link href="/2015/10/20/crazy-java-7-stream/"/>
      <url>/2015/10/20/crazy-java-7-stream/</url>
      <content type="html"><![CDATA[<h2 id="流的定义"><a href="#流的定义" class="headerlink" title="流的定义"></a>流的定义</h2><p>从支持数据处理操作的源生成的元素序列</p><ul><li>元素序列，集合是数据结构，它的主要目的是以特定的时间和空间复杂度存储和访问元素，流的主要目的是表达计算。</li><li>源，流会使用一个提供数据的源，比如集合，数组或输入输出资源</li><li>数据处理操作，流的数据处理能力支持类似于数据库的操作</li><li>流水线，很多流操作本身会返回一个流</li><li>内部迭代,不是强制的使用的外部迭代</li></ul><h2 id="从迭代器到Stream操作"><a href="#从迭代器到Stream操作" class="headerlink" title="从迭代器到Stream操作"></a>从迭代器到Stream操作</h2><h3 id="迭代访问"><a href="#迭代访问" class="headerlink" title="迭代访问"></a>迭代访问</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代方式统计文本中长单词</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> iterator() throws IOException &#123;</span><br><span class="line">    <span class="keyword">String</span> content = <span class="keyword">new</span> <span class="keyword">String</span>(Files.readAllBytes(Paths.<span class="built_in">get</span>(<span class="string">"f:"</span>,<span class="string">"images"</span>,<span class="string">"topic.txt"</span>)), StandardCharsets.UTF_8);</span><br><span class="line">    List&lt;<span class="keyword">String</span>&gt; words = Arrays.asList(content.split(<span class="string">"[\\P&#123;L&#125;]+"</span>));</span><br><span class="line">    <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">for</span> (<span class="keyword">String</span> <span class="keyword">word</span> : words) &#123;</span><br><span class="line">        <span class="built_in">if</span> (<span class="keyword">word</span>.length() &gt; <span class="number">7</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream访问操作"><a href="#Stream访问操作" class="headerlink" title="Stream访问操作"></a>Stream访问操作</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stream方式统计文本中长单词</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> stream() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">String</span> content = <span class="keyword">new</span> <span class="keyword">String</span>(Files.readAllBytes(Paths.<span class="built_in">get</span>(<span class="string">"f:"</span>,<span class="string">"images"</span>,<span class="string">"topic.txt"</span>)), StandardCharsets.UTF_8);</span><br><span class="line">    List&lt;<span class="keyword">String</span>&gt; words = Arrays.asList(content.<span class="built_in">split</span>(<span class="string">"[\\P&#123;L&#125;]+"</span>));</span><br><span class="line">    <span class="keyword">return</span> words.stream().<span class="built_in">filter</span>(s -&gt; s.length() &gt; <span class="number">7</span>).count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream与集合的差别"><a href="#Stream与集合的差别" class="headerlink" title="Stream与集合的差别"></a>Stream与集合的差别</h3><ul><li>Stream不会存储元素，元素可能被存储在底层的集合中，或者根据需要产生出来。</li><li>Stream操作符不会改变原对象，会返回一个持有结果的新Stream。</li><li>Stream操作符可能延迟执行，意味着他们会等到需要结果的时候才会执行。</li></ul><h2 id="构建Stream"><a href="#构建Stream" class="headerlink" title="构建Stream"></a>构建Stream</h2><ul><li>Stream.of()，由值创建流</li><li>Stream.empty()，创建一个空流</li><li>Array.stream()，由数组创建流</li><li>Files.lines(),文件创建流</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> createStream() &#123;</span><br><span class="line">    <span class="built_in">Stream</span>&lt;<span class="keyword">String</span>&gt; stringStream = <span class="built_in">Stream</span>.of(<span class="string">"sss"</span>, <span class="string">"xxx"</span>, <span class="string">"cvcv"</span>);</span><br><span class="line">    <span class="built_in">Stream</span>&lt;Object&gt; empty = <span class="built_in">Stream</span>.empty();</span><br><span class="line">    IntStream intStream = Arrays.stream(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">67</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>&#125;);</span><br><span class="line">    <span class="built_in">Stream</span>&lt;Double&gt; doubleStream = <span class="built_in">Stream</span>.generate(Math::<span class="built_in">random</span>);</span><br><span class="line">    <span class="comment">//获取的文件的内容流</span></span><br><span class="line">    <span class="built_in">try</span> (<span class="built_in">Stream</span>&lt;<span class="keyword">String</span>&gt; lines = Files.lines(Paths.<span class="built_in">get</span>(<span class="string">""</span>))) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="built_in">catch</span> (IOException ioe) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建无限流"><a href="#创建无限流" class="headerlink" title="创建无限流"></a>创建无限流</h3><ul><li>迭代</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iterate方法接收一个初始值，还有一个依次应用在每个产生新值的lambda</span></span><br><span class="line"><span class="selector-tag">Stream</span><span class="selector-class">.iterate</span>(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>)<span class="selector-class">.limit</span>(<span class="number">10</span>)<span class="selector-class">.forEach</span>(System.<span class="attribute">out</span>::print);</span><br></pre></td></tr></table></figure><ul><li>生成</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接受一个Lambda的表达式</span></span><br><span class="line"><span class="selector-tag">Stream</span><span class="selector-class">.generate</span>(<span class="attribute">Math</span>::random)<span class="selector-class">.limit</span>(<span class="number">5</span>)<span class="selector-class">.forEach</span>(System.<span class="attribute">err</span>::print);</span><br></pre></td></tr></table></figure><h2 id="使用Stream"><a href="#使用Stream" class="headerlink" title="使用Stream"></a>使用Stream</h2><h3 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">24</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">45</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">112</span>, <span class="number">456</span>);</span><br><span class="line"><span class="comment">//1.filter()方法接受一个谓词（一个boolean的函数）作为参数，返回符合谓词元素的流</span></span><br><span class="line"><span class="function"><span class="title">integerList</span>.stream().filter(i -&gt;</span> i &gt; <span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">//2.distinct()返回一个元素(根据流所生成的元素的hashCode和equals方法实现)各异的流</span></span><br><span class="line"><span class="function"><span class="title">integerList</span>.stream().filter(i -&gt;</span> i &gt; <span class="number">10</span>).distinct().forEach(System.err::println);</span><br><span class="line"><span class="comment">//3.limit()截断流，该方法返回一个不超过给定长度的流</span></span><br><span class="line"><span class="function"><span class="title">integerList</span>.stream().filter(<span class="keyword">integer</span> -&gt;</span> <span class="keyword">integer</span> &gt; <span class="number">10</span>).limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">//4.skip(n)跳过元素,返回一个扔掉前n个元素的流</span></span><br><span class="line"><span class="function"><span class="title">integerList</span>.stream().filter(<span class="keyword">integer</span> -&gt;</span> <span class="keyword">integer</span> &gt; <span class="number">10</span>).skip(<span class="number">3</span>).forEach(System.err::println);</span><br></pre></td></tr></table></figure><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><ul><li>对流中的每一个元素进行处理</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; stringList = Arrays.asList(<span class="string">"xxx"</span>, <span class="string">"simon"</span>, <span class="string">"john"</span>, <span class="string">"ele"</span>, <span class="string">"alala"</span>);</span><br><span class="line">stringList.stream().<span class="built_in">map</span>(s -&gt; s.length()).forEach(System.out<span class="type">::println</span>);</span><br></pre></td></tr></table></figure><ul><li>流的扁平化</li></ul><p>flapMap方法让你把一个流中的每个值都换成了另外一个流，然后把所有的流连接起来成为一个流。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">List</span>&lt;<span class="keyword">String</span>&gt; strings = <span class="keyword">Arrays</span>.asList(<span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line">strings.stream().</span><br><span class="line">        map(s -&gt; s.split(<span class="string">""</span>))</span><br><span class="line">        .flatMap(<span class="keyword">Arrays</span>::stream)//<span class="keyword">List</span>&lt;<span class="keyword">String</span>[]&gt;-&gt;<span class="keyword">List</span>&lt;<span class="keyword">String</span>&gt;</span><br><span class="line">        .distinct()</span><br><span class="line">        .collect(Collectors.toList())</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="查找和匹配"><a href="#查找和匹配" class="headerlink" title="查找和匹配"></a>查找和匹配</h3><ul><li>检查谓词是否至少匹配一个元素anyMatch,返回boolean值是个终端方法</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">List</span>&lt;<span class="keyword">String&gt; </span><span class="keyword">stringList </span>= Arrays.asList(<span class="string">"john"</span>, <span class="string">"simon"</span>, <span class="string">"david"</span>, <span class="string">"ziuoluo"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">boolean </span>anyMatch = <span class="keyword">stringList.stream().anyMatch(s </span>-&gt; s.equals(<span class="string">"john"</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>检查谓词是否匹配所有元素allMatch</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">List</span>&lt;<span class="keyword">String&gt; </span><span class="keyword">stringList </span>= Arrays.asList(<span class="string">"john"</span>, <span class="string">"simon"</span>, <span class="string">"david"</span>, <span class="string">"ziuoluo"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">boolean </span><span class="keyword">b </span>= <span class="keyword">stringList.stream().allMatch(s </span>-&gt; s.length() &gt; <span class="number">4</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>确保流中没有任何元素与给定的谓词匹配noneMatch</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">List</span>&lt;<span class="keyword">String&gt; </span><span class="keyword">stringList </span>= Arrays.asList(<span class="string">"john"</span>, <span class="string">"simon"</span>, <span class="string">"david"</span>, <span class="string">"ziuoluo"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">boolean </span><span class="keyword">b1 </span>= <span class="keyword">stringList.stream().noneMatch(s </span>-&gt; s.length() &gt; <span class="number">4</span>)<span class="comment">;</span></span><br><span class="line"><span class="symbol">System.out.println</span>(<span class="string">"b1 = "</span> + <span class="keyword">b1);</span></span><br></pre></td></tr></table></figure><ul><li>查找元素findAny,返回当前流的中任意元素</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">List</span>&lt;<span class="keyword">String</span>&gt; stringList = <span class="keyword">Arrays</span>.asList(<span class="string">"john"</span>, <span class="string">"simon"</span>, <span class="string">"david"</span>, <span class="string">"ziuoluo"</span>);</span><br><span class="line"><span class="keyword">Optional</span>&lt;<span class="keyword">String</span>&gt; any = stringList.stream().filter(s -&gt; s.length() &gt; <span class="number">4</span>).findAny();</span><br><span class="line">System.out.println(<span class="string">"any.get() = "</span> + any.get());</span><br></pre></td></tr></table></figure><ul><li>查找第一个元素findFirst</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Optional</span>&lt;<span class="keyword">String&gt; </span>first = <span class="keyword">stringList.stream().filter(s </span>-&gt; s.length() &gt; <span class="number">4</span>).findFirst()<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h3><ul><li><p>元素求和reduce</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">Optional&lt;Integer&gt; reduce = integerList.stream<span class="function"><span class="params">()</span>.<span class="title">reduce</span><span class="params">((a, b) -&gt; a + b)</span>;//求和 1+2+3+4+5+6</span></span><br><span class="line"><span class="function"><span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">"reduce.get() = "</span> + reduce.get())</span>;</span></span><br><span class="line"><span class="function"><span class="title">Optional</span>&lt;<span class="title">Integer</span>&gt; <span class="title">reduce4</span> = <span class="title">integerList</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">reduce</span><span class="params">(Integer::sum)</span>;</span></span><br><span class="line"><span class="function"><span class="title">Optional</span>&lt;<span class="title">Integer</span>&gt; <span class="title">reduce1</span> = <span class="title">integerList</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">reduce</span><span class="params">((a, b) -&gt; a * b)</span>;</span></span><br><span class="line"><span class="function"><span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">"reduce1 = "</span> + reduce1.get())</span>;//1*2*3*4*5*6</span></span><br></pre></td></tr></table></figure></li><li><p>最大值</p></li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Optional</span>&lt;<span class="keyword">Integer</span>&gt; reduce2 = integerList.stream().reduce(<span class="keyword">Integer</span>::<span class="built_in">max</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"reduce2.get() = "</span> + reduce2.get());</span><br></pre></td></tr></table></figure><ul><li>最小值</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Optional</span>&lt;<span class="keyword">Integer</span>&gt; reduce3 = integerList.stream().reduce(<span class="keyword">Integer</span>::<span class="built_in">min</span>);</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">"reduce3.get() = "</span> + reduce3.get())</span><br></pre></td></tr></table></figure><h3 id="数值流"><a href="#数值流" class="headerlink" title="数值流"></a>数值流</h3><p>java8引入了3个原始类型特化流来处理数值流问题。</p><ul><li>java.util.stream.IntStream</li><li>java.util.stream.DoubleStream</li><li>java.util.stream.LongStream</li></ul><p>分别将流中的包装类型元素转换成int,double,long，从而避免暗含的装箱操作</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">Integer</span>&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">45</span>, <span class="number">355</span>, <span class="number">67</span>, <span class="number">45</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">44</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">Integer</span> reduce = integers.stream().reduce(<span class="number">0</span>, <span class="keyword">Integer</span>::<span class="keyword">sum</span>);<span class="comment">//有暗含的装箱成本</span></span><br><span class="line"><span class="keyword">System</span>.out.println(<span class="string">"reduce = "</span> + reduce);</span><br><span class="line"><span class="comment">//mapToInt转换成数值流</span></span><br><span class="line">int <span class="keyword">sum</span> = integers.stream().mapToInt(<span class="keyword">Integer</span>::intValue).<span class="keyword">sum</span>();</span><br><span class="line"><span class="keyword">System</span>.out.println(<span class="string">"sum = "</span> + <span class="keyword">sum</span>);</span><br></pre></td></tr></table></figure><h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream.rangeClosed(1, 100).<span class="keyword">forEach</span>(System.<span class="keyword">out</span>::<span class="keyword">print</span>);<span class="comment">//包含结束值</span></span><br><span class="line">IntStream.<span class="keyword">range</span>(1, 100).<span class="keyword">forEach</span>(System.<span class="keyword">err</span>::<span class="keyword">print</span>);<span class="comment">//不包含结束值</span></span><br></pre></td></tr></table></figure><h2 id="使用流收集数据"><a href="#使用流收集数据" class="headerlink" title="使用流收集数据"></a>使用流收集数据</h2><h3 id="预定义的收集器"><a href="#预定义的收集器" class="headerlink" title="预定义的收集器"></a>预定义的收集器</h3><ul><li>将流元素规约和汇总为一个值</li><li>元素分组</li><li>元素分区</li></ul><h3 id="规约和汇总"><a href="#规约和汇总" class="headerlink" title="规约和汇总"></a>规约和汇总</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; integers = Arrays.<span class="keyword">asList</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">67</span>, <span class="number">8</span>, <span class="number">909</span>);</span><br><span class="line"><span class="keyword">Long</span> <span class="keyword">collect</span> = integers.stream().<span class="keyword">collect</span>(Collectors.counting());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">count</span> = integers.stream().<span class="keyword">count</span>();</span><br><span class="line">Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> compare(Integer o1, Integer o2) &#123;</span><br><span class="line">        <span class="keyword">return</span> o1 &gt; o2 ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Optional&lt;Integer&gt; collect1 = integers.stream().<span class="keyword">collect</span>(Collectors.maxBy(comparator));</span><br><span class="line">System.out.<span class="keyword">println</span>(<span class="string">"collect1.get() = "</span> + collect1.get());</span><br></pre></td></tr></table></figure><ul><li>连接字符串</li></ul><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">List</span>&lt;<span class="keyword">String</span>&gt; strings = <span class="keyword">Arrays</span>.asList(<span class="string">"xxx"</span>, <span class="string">"ttt"</span>, <span class="string">"zzz"</span>);</span><br><span class="line"><span class="keyword">String</span> collect2 = strings.stream().collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">System.out.println(<span class="string">"collect2 = "</span> + collect2);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>6.《疯狂Java讲义第三版》读书笔记-lambda</title>
      <link href="/2015/10/18/crazy-java-6-lambda/"/>
      <url>/2015/10/18/crazy-java-6-lambda/</url>
      <content type="html"><![CDATA[<h2 id="lambda定义"><a href="#lambda定义" class="headerlink" title="lambda定义"></a>lambda定义</h2><p>lambda表达式支持将<em>代码块作为方法参数</em>，因此可以被执行一次或多次,lambda允许使用更简单的方式来创建一个抽象方法的接口的实例</p><ul><li>匿名,不像普通方法那样有一个具体的名称</li><li>函数，参数列表，函数主体，返回类型，还有可能抛出异常</li><li>传递，lambda可以作为参数传递给方法或存储在变量中</li><li>简洁，无需要像匿名函数那样写很多模板代码</li></ul><h3 id="lambda组成部分"><a href="#lambda组成部分" class="headerlink" title="lambda组成部分"></a>lambda组成部分</h3><ul><li>形参列表，允许使用省略，如果只有一个参数，甚至连圆形括号都可以去除掉</li><li>箭头</li><li>代码块，如果只有一行代码，可以省略花括号</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">()</span>-&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><ul><li>Java8允许在接口中定义默认方法，默认方法必须由default修饰，该方法不能由static修饰。</li></ul><h3 id="如果一个接口定义了一个方法，而另外一个父类或接口中又定义了一个同名的方法，该选择哪个？"><a href="#如果一个接口定义了一个方法，而另外一个父类或接口中又定义了一个同名的方法，该选择哪个？" class="headerlink" title="如果一个接口定义了一个方法，而另外一个父类或接口中又定义了一个同名的方法，该选择哪个？"></a>如果一个接口定义了一个方法，而另外一个父类或接口中又定义了一个同名的方法，该选择哪个？</h3><ul><li>选择父类中的方法（类优先）。如果一个父类提供了具体的实现的方法，那么接口中具有相同名称和参数的默认方法会被忽略。</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">String</span> getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"A"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"C"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">C</span></span> <span class="keyword"><span class="keyword">implements</span> <span class="type">A</span></span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        D d = <span class="keyword">new</span> <span class="type">D</span>();</span><br><span class="line">        A a = <span class="keyword">new</span> <span class="type">D</span>();<span class="comment">//多态，运行期实际还是D</span></span><br><span class="line">        System.err.println(a.getName());<span class="comment">//c</span></span><br><span class="line">        System.err.println(d.getName());<span class="comment">//c</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口冲突。如果一个借口和另外一个接口提供了2个相同的方法，必须通过覆盖解决冲突。"><a href="#接口冲突。如果一个借口和另外一个接口提供了2个相同的方法，必须通过覆盖解决冲突。" class="headerlink" title="接口冲突。如果一个借口和另外一个接口提供了2个相同的方法，必须通过覆盖解决冲突。"></a>接口冲突。如果一个借口和另外一个接口提供了2个相同的方法，必须通过覆盖解决冲突。</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>A &#123;</span><br><span class="line">   <span class="built_in"> default </span>String getName()&#123;</span><br><span class="line">        return <span class="string">"A"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public<span class="built_in"> interface </span>B &#123;</span><br><span class="line">   <span class="built_in"> default </span>String getName()&#123;</span><br><span class="line">        return <span class="string">"B"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class E implements A,B &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>E.java编辑器报出来的错误</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-12/94211925.jpg" alt=""></p><ul><li>覆盖重写接口方法解决接口冲突</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A.<span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口中静态方法"><a href="#接口中静态方法" class="headerlink" title="接口中静态方法"></a>接口中静态方法</h2><ul><li>Java8允许在接口中定义类方法，类方法必须使用static修饰，该方法不能用default修饰。</li></ul><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口代表只包含一个抽象方法的接口，可以包含多个默认方法，类方法，但只能声明一个抽象方法。</p><ul><li>Java8专门为函数式接口提供了@FunctionInterface注解（java.lang.FunctionalInterface）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object's</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用函数式接口"><a href="#常用函数式接口" class="headerlink" title="常用函数式接口"></a>常用函数式接口</h3><p>Java8在java.util.function包下预定义了大量的函数式接口</p><ul><li>java.util.function.Function#apply</li></ul><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul><li>通常希望在lambda表达式的闭合方法或类中访问其他的变量</li></ul><h3 id="lambda表达式中不能更改被引用的变量值"><a href="#lambda表达式中不能更改被引用的变量值" class="headerlink" title="lambda表达式中不能更改被引用的变量值"></a>lambda表达式中不能更改被引用的变量值</h3><ul><li>如下代码，lambda表达式中并没有定义count,message,而在表达式中引用了方法参数</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> repeatMessage(<span class="keyword">int</span> <span class="keyword">count</span>,String message)&#123;</span><br><span class="line">    Runnable r = ()-&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">count</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">//count--;//lambda表达式中不能更改被引用的变量值</span></span><br><span class="line">            System.err.<span class="keyword">println</span>(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lambda表达式的方法体与嵌套代码有相同的作用域"><a href="#lambda表达式的方法体与嵌套代码有相同的作用域" class="headerlink" title="lambda表达式的方法体与嵌套代码有相同的作用域"></a>lambda表达式的方法体与嵌套代码有相同的作用域</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void testScope() &#123;</span><br><span class="line">    <span class="keyword">Path</span> <span class="built_in">first</span> = <span class="keyword">Paths</span>.get(<span class="string">"user/bin"</span>);</span><br><span class="line">    //<span class="built_in">first</span>变量已经定义了</span><br><span class="line">    Comparable&lt;String&gt; comparable = (<span class="built_in">first</span>, second) -&gt; Integer.<span class="built_in">compare</span>(<span class="built_in">first</span>, second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><h3 id="类方法引用"><a href="#类方法引用" class="headerlink" title="类方法引用"></a>类方法引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法引用：类方法</span></span><br><span class="line">        Converter converter = Integer::parseInt;</span><br><span class="line">        System.err.println(converter.convert(<span class="string">"1234"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">convert</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例方法引用"><a href="#实例方法引用" class="headerlink" title="实例方法引用"></a>实例方法引用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//方法引用：类方法</span></span><br><span class="line">        Converter converter = <span class="built_in">String</span>::substring;</span><br><span class="line">        System.err.println(converter.subString(<span class="string">"abcdef"</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span> </span>&#123;</span><br><span class="line">    <span class="built_in">String</span> subString(<span class="built_in">String</span> s, <span class="built_in">int</span> a, <span class="built_in">int</span> b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//构造器引用</span></span><br><span class="line">        TestConstructor testConstructor = <span class="keyword">String</span>:<span class="type"></span>:<span class="keyword">new</span><span class="type"></span>;</span><br><span class="line">        System.err.println(testConstructor.init(<span class="string">"ssss"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@FunctionalInterface</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestConstructor</span></span>&#123;</span><br><span class="line">    <span class="keyword">String</span> init(<span class="keyword">String</span> s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4.《疯狂Java讲义第三版》读书笔记-包装类</title>
      <link href="/2015/10/18/crazy-java-4-wrapper-class/"/>
      <url>/2015/10/18/crazy-java-4-wrapper-class/</url>
      <content type="html"><![CDATA[<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h3 id="包装类型的实例可以与数值进行比较"><a href="#包装类型的实例可以与数值进行比较" class="headerlink" title="包装类型的实例可以与数值进行比较"></a>包装类型的实例可以与数值进行比较</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Integer</span> <span class="keyword">integer</span> = new <span class="keyword">Integer</span>(<span class="string">"5"</span>);</span><br><span class="line"><span class="keyword">System</span>.err.println(<span class="keyword">integer</span> &gt; <span class="number">3</span>);<span class="comment">//true,直接取出包装类实例的数值来进行比较</span></span><br></pre></td></tr></table></figure><h3 id="包装类的比较"><a href="#包装类的比较" class="headerlink" title="包装类的比较"></a>包装类的比较</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Integer</span> integer1 = <span class="literal">new</span> <span class="built_in">Integer</span>(<span class="string">"3"</span>);</span><br><span class="line"><span class="built_in">Integer</span> integer2 = <span class="literal">new</span> <span class="built_in">Integer</span>(<span class="number">3</span>);</span><br><span class="line">System.err.println(integer1 == integer2);<span class="comment">//false 其实就是引用类型比较</span></span><br><span class="line">System.err.println(integer1.<span class="keyword">equals</span>(integer2));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h3><p>jdk1.5之后支持自动装箱，自动装箱可以把一个基本类型赋值给包装类型实例.</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Integer</span> i1 = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">Integer</span> i2 = <span class="number">23</span>;</span><br><span class="line"><span class="keyword">System</span>.err.println(i1 == i2);<span class="comment">//true</span></span><br><span class="line"><span class="keyword">Integer</span> i3 = <span class="number">129</span>;</span><br><span class="line"><span class="keyword">Integer</span> i4 = <span class="number">129</span>;</span><br><span class="line"><span class="keyword">System</span>.err.println(i3 == i4);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><ul><li>自动装箱实际上是调用的包装类的valueOf()方法,代码如下：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- java.lang.Integer#valueOf(<span class="keyword">int</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>java.lang.Integer.IntegerCache原码如下</li></ul><p>可以看出都是-128-127之间缓存的好的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> low = -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">        String integerCacheHighPropValue =</span><br><span class="line">            sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">        <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">                i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        high = h;</span><br><span class="line"></span><br><span class="line">        cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> j = low;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">            cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">        <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">IntegerCache</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>java7增加了包装类比较方法java.lang.Integer#compare</li></ul><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int <span class="keyword">compare</span> = <span class="built_in">Integer</span>.<span class="keyword">compare</span>(i3, i4);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5.《疯狂Java讲义第三版》读书笔记-final</title>
      <link href="/2015/10/18/crazy-java-5-final/"/>
      <url>/2015/10/18/crazy-java-5-final/</url>
      <content type="html"><![CDATA[<h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><ul><li>JVM常量池保证相同的字符串直接量只有一个，不会产生多个副本</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String <span class="built_in">s1</span> = <span class="string">"hello"</span><span class="comment">;//直接引用常量池中hello</span></span><br><span class="line">String <span class="built_in">s2</span> = <span class="string">"he"</span><span class="comment">;</span></span><br><span class="line">String <span class="built_in">s3</span> = <span class="string">"llo"</span><span class="comment">;</span></span><br><span class="line">String <span class="built_in">s4</span> = <span class="string">"he"</span> + <span class="string">"llo"</span><span class="comment">;//编译的时候，能确定下来，引用常量池中hello</span></span><br><span class="line">String <span class="built_in">s5</span> = <span class="built_in">s2</span> + <span class="built_in">s3</span><span class="comment">;//编译的时候，不能确定下来</span></span><br><span class="line">String <span class="built_in">s6</span> = new String(<span class="string">"hello"</span>)<span class="comment">;//运行时创建的，保存在堆内存中</span></span><br><span class="line">System<span class="meta">.err</span>.println(<span class="built_in">s1</span> == <span class="built_in">s4</span>)<span class="comment">;//true</span></span><br><span class="line">System<span class="meta">.err</span>.println(<span class="built_in">s1</span> == <span class="built_in">s5</span>)<span class="comment">;//false</span></span><br><span class="line">System<span class="meta">.err</span>.println(<span class="built_in">s1</span> == <span class="built_in">s6</span>)<span class="comment">;//false</span></span><br></pre></td></tr></table></figure><h2 id="类成员变量访问方式"><a href="#类成员变量访问方式" class="headerlink" title="类成员变量访问方式"></a>类成员变量访问方式</h2><ul><li>通过实例对象去访问类变量，实质是委托类去访问类变量</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class TestClassVariable &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> name = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        System.err.<span class="built_in">println</span>(TestClassVariable.name);<span class="comment">//hello,正确的访问方式</span></span><br><span class="line">        TestClassVariable testClassVariable = <span class="keyword">null</span>;</span><br><span class="line">        System.err.<span class="built_in">println</span>(testClassVariable.name);<span class="comment">//hello,null实例去访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final修饰符"><a href="#final修饰符" class="headerlink" title="final修饰符"></a>final修饰符</h2><h3 id="final修饰的宏变量"><a href="#final修饰的宏变量" class="headerlink" title="final修饰的宏变量"></a>final修饰的宏变量</h3><p>使用final修饰符修饰，在定义该final变量时指定了初始值，该初始值在编译的时候可以被确定下来。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public static void <span class="keyword">display() </span>&#123;</span><br><span class="line">    String <span class="built_in">s1</span> = <span class="string">"hello2"</span><span class="comment">;</span></span><br><span class="line">    final String <span class="built_in">s2</span> = <span class="string">"hello"</span><span class="comment">;</span></span><br><span class="line">    String <span class="built_in">s3</span> = <span class="string">"hello"</span><span class="comment">;</span></span><br><span class="line">    String <span class="built_in">s4</span> = <span class="built_in">s2</span> + <span class="number">2</span><span class="comment">;//编译的时候能确定下来，因为s2是被final修饰的宏变量</span></span><br><span class="line">    String <span class="built_in">s5</span> = <span class="built_in">s3</span> + <span class="number">2</span><span class="comment">;//编译的时候无法确定下来</span></span><br><span class="line">    System<span class="meta">.err</span>.println(<span class="built_in">s1</span> == <span class="built_in">s4</span>)<span class="comment">;//true</span></span><br><span class="line">    System<span class="meta">.err</span>.println(<span class="built_in">s1</span> == <span class="built_in">s5</span>)<span class="comment">;//false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="final修饰基本类型和引用类型变量"><a href="#final修饰基本类型和引用类型变量" class="headerlink" title="final修饰基本类型和引用类型变量"></a>final修饰基本类型和引用类型变量</h3><ul><li>当final修饰基本类型变量的时候，不能对基本类型变量重新赋值，因此基本类型变量不能被改变。</li><li>但对于引用类型变量而言，它保存的仅仅是一个引用，final只保证这个引用类型变量所引用的地址不会改变。</li></ul><h3 id="effectively-final"><a href="#effectively-final" class="headerlink" title="effectively final"></a>effectively final</h3><p>java8之后对于匿名访问的内部类可以用final修饰，也可以不用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFinal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;<span class="comment">//可以不加final修饰，编译的时候加上了final修饰符</span></span><br><span class="line">        A a = <span class="keyword">new</span> A() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">                System.err.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.《疯狂Java讲义第三版》读书笔记-面向对象</title>
      <link href="/2015/10/17/crazy-java-3-oo/"/>
      <url>/2015/10/17/crazy-java-3-oo/</url>
      <content type="html"><![CDATA[<h2 id="面向对象的3个基本特征"><a href="#面向对象的3个基本特征" class="headerlink" title="面向对象的3个基本特征"></a>面向对象的3个基本特征</h2><ul><li>封装是指将对象的实现细节隐藏起来，然后通过一些公用办法来暴露该对象的功能。</li><li>继承是面向对象的实现软件复用的一种手段，当子类继承父类后，子类将直接获得父类的属性和方法。</li><li>多态指的是子类对象可以直接赋值给父类变量，但运行的时候表现出子类的行为特征。</li></ul><h2 id="方法的传递参数的机制"><a href="#方法的传递参数的机制" class="headerlink" title="方法的传递参数的机制"></a>方法的传递参数的机制</h2><p>值传递，就是将实际参数的复制品传入方法内，而参数本身不受任何影响。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>当系统加载类或创建类的实例的时，系统会自动的为成员变量分配内存空间，并在分配内存空间后，自动为成员变量指定初始值。</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>局部变量定义后，必须经过显示的初始化后才能使用，系统不会为局部变量执行初始化。</p><h2 id="方法重写-2同2小1大"><a href="#方法重写-2同2小1大" class="headerlink" title="方法重写-2同2小1大"></a>方法重写-2同2小1大</h2><ul><li>2同，方法名，形参列表</li><li>2小，子类的方法的返回值类型，子类方法声明抛出的异常类</li><li>1大，子类的方法的访问权限</li></ul><h2 id="初始化块和构造器"><a href="#初始化块和构造器" class="headerlink" title="初始化块和构造器"></a>初始化块和构造器</h2><p>初始化块总是在构造器执行之前执行，java系统加载并初始化某个类时，总是保证该类的所有的父类先被初始化加载。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TestInit</span> </span>&#123;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">Leaf</span> leaf = <span class="keyword">new</span> <span class="type">Leaf</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        <span class="type">System</span>.err.println(<span class="string">"Root static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">System</span>.err.println(<span class="string">"Root代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">Root</span>() &#123;</span><br><span class="line">        <span class="type">System</span>.err.println(<span class="string">"Root构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mid</span> <span class="keyword">extends</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        <span class="type">System</span>.err.println(<span class="string">"Mid static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">System</span>.err.println(<span class="string">"Mid代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">Mid</span>() &#123;</span><br><span class="line">        <span class="type">System</span>.err.println(<span class="string">"Mid构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Mid</span> </span>&#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        <span class="type">System</span>.err.println(<span class="string">"Leaf static"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">System</span>.err.println(<span class="string">"Leaf代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="type">Leaf</span>() &#123;</span><br><span class="line">        <span class="type">System</span>.err.println(<span class="string">"Leaf 构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Root <span class="keyword">static</span></span><br><span class="line"><span class="keyword">Mid</span> <span class="keyword">static</span></span><br><span class="line">Leaf <span class="keyword">static</span></span><br><span class="line">Root代码块</span><br><span class="line">Root构造器</span><br><span class="line"><span class="keyword">Mid</span>代码块</span><br><span class="line"><span class="keyword">Mid</span>构造器</span><br><span class="line">Leaf代码块</span><br><span class="line">Leaf 构造器</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.《疯狂Java讲义第三版》读书笔记-类型转换</title>
      <link href="/2015/10/17/crazy-java-2-typetransfer/"/>
      <url>/2015/10/17/crazy-java-2-typetransfer/</url>
      <content type="html"><![CDATA[<h2 id="基本类型的转换"><a href="#基本类型的转换" class="headerlink" title="基本类型的转换"></a>基本类型的转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-11/56542113.jpg" alt=""></p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestForceTrsansfer</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">233</span>;</span><br><span class="line">        System.err.println(((<span class="keyword">byte</span>) i));<span class="comment">//-23</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上述代码在计算机内部转换情况</li></ul><p><img src="http://orkt468tj.bkt.clouddn.com/18-6-11/39843519.jpg" alt=""></p><h3 id="表达式类型的自动提升"><a href="#表达式类型的自动提升" class="headerlink" title="表达式类型的自动提升"></a>表达式类型的自动提升</h3><p>当一个算术表达式中包含多个基本类型的值的时候，整个算术表达式的数据类型将会发生自动提升，所有的byte,short,char类型被<br>提升到int类型。整个算术表达式数据类型被提升到表达式最高等级操作数的同样的类型。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">short a = <span class="number">5</span><span class="comment">;</span></span><br><span class="line"><span class="attribute">a</span> = a -<span class="number">2</span><span class="comment">;表达式a-2运算后类型被提升的到int，int类型是无法直接赋值给short类型</span></span><br></pre></td></tr></table></figure><ul><li>注意表达式与运算顺序</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.err.<span class="built_in">println</span>(<span class="string">"hello"</span> + <span class="string">'a'</span> + <span class="number">7</span>);<span class="comment">//helloa7</span></span><br><span class="line">System.err.<span class="built_in">println</span>(<span class="string">'a'</span> + <span class="number">7</span> + <span class="string">"hello"</span>);<span class="comment">//104hello</span></span><br></pre></td></tr></table></figure><h3 id="符号"><a href="#符号" class="headerlink" title="+=符号"></a>+=符号</h3><ul><li>+=运算符实质，并不会带来类型提升</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int <span class="built_in">a1</span> = <span class="number">8</span><span class="comment">;</span></span><br><span class="line">System<span class="meta">.err</span>.println(<span class="built_in">a1</span> += <span class="number">3</span>.<span class="number">2</span>)<span class="comment">;//11 (int)（8+3.2）</span></span><br></pre></td></tr></table></figure><h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><ul><li>java会确保每一个字符串常量只有一个</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"hello"</span><span class="comment">;</span></span><br><span class="line">String <span class="built_in">s1</span> = <span class="string">"hello"</span><span class="comment">;</span></span><br><span class="line">String <span class="built_in">s2</span> = <span class="string">"he"</span> + <span class="string">"llo"</span><span class="comment">;//编译的时候，能确定下来</span></span><br><span class="line">System<span class="meta">.err</span>.println(s == <span class="built_in">s1</span>)<span class="comment">;//true</span></span><br><span class="line">System<span class="meta">.err</span>.println(s == <span class="built_in">s2</span>)<span class="comment">;//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.《疯狂Java讲义第三版》读书笔记-消失的异常</title>
      <link href="/2015/10/17/crazy-java-1-exception/"/>
      <url>/2015/10/17/crazy-java-1-exception/</url>
      <content type="html"><![CDATA[<h2 id="消失的异常"><a href="#消失的异常" class="headerlink" title="消失的异常"></a>消失的异常</h2><pre><code>处理异常的时候容易出现的问题</code></pre><h3 id="错误例子"><a href="#错误例子" class="headerlink" title="错误例子"></a>错误例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt(<span class="string">"123h"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> o = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打印出来的异常信息如下，屏蔽了原始的NumberFormatException异常</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"C:\Program Files\Java\jdk1.8.0_162\bin\java"</span> </span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.Exception</span>: java<span class="selector-class">.lang</span><span class="selector-class">.ArithmeticException</span>: / by zero</span><br><span class="line">at me<span class="selector-class">.chilam</span><span class="selector-class">.exception</span><span class="selector-class">.TestException</span><span class="selector-class">.display</span>(TestException<span class="selector-class">.java</span>:<span class="number">17</span>)</span><br><span class="line">at me<span class="selector-class">.chilam</span><span class="selector-class">.exception</span><span class="selector-class">.TestException</span><span class="selector-class">.main</span>(TestException<span class="selector-class">.java</span>:<span class="number">5</span>)</span><br><span class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.ArithmeticException</span>: / by zero</span><br><span class="line">at me<span class="selector-class">.chilam</span><span class="selector-class">.exception</span><span class="selector-class">.TestException</span><span class="selector-class">.display</span>(TestException<span class="selector-class">.java</span>:<span class="number">15</span>)</span><br><span class="line">... <span class="number">1</span> more</span><br></pre></td></tr></table></figure><h3 id="正确例子"><a href="#正确例子" class="headerlink" title="正确例子"></a>正确例子</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(String[] args) throws <span class="keyword">Exception</span>&#123;</span><br><span class="line">    display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void display() throws <span class="keyword">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">Exception</span> <span class="keyword">exception</span> = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i = Integer.parseInt(<span class="string">"123h"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        <span class="keyword">exception</span> = e;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="keyword">exception</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> o = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">exception</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">exception</span>.addSuppressed(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="keyword">exception</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打印出来的异常信息如下所示</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.lang</span><span class="selector-class">.Exception</span>: java<span class="selector-class">.lang</span><span class="selector-class">.NumberFormatException</span>: For <span class="selector-tag">input</span> string: <span class="string">"123h"</span></span><br><span class="line">at me<span class="selector-class">.chilam</span><span class="selector-class">.exception</span><span class="selector-class">.TestException</span><span class="selector-class">.display</span>(TestException<span class="selector-class">.java</span>:<span class="number">22</span>)</span><br><span class="line">at me<span class="selector-class">.chilam</span><span class="selector-class">.exception</span><span class="selector-class">.TestException</span><span class="selector-class">.main</span>(TestException<span class="selector-class">.java</span>:<span class="number">5</span>)</span><br><span class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.NumberFormatException</span>: For <span class="selector-tag">input</span> string: <span class="string">"123h"</span></span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.NumberFormatException</span><span class="selector-class">.forInputString</span>(NumberFormatException<span class="selector-class">.java</span>:<span class="number">65</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Integer</span><span class="selector-class">.parseInt</span>(Integer<span class="selector-class">.java</span>:<span class="number">580</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Integer</span><span class="selector-class">.parseInt</span>(Integer<span class="selector-class">.java</span>:<span class="number">615</span>)</span><br><span class="line">at me<span class="selector-class">.chilam</span><span class="selector-class">.exception</span><span class="selector-class">.TestException</span><span class="selector-class">.display</span>(TestException<span class="selector-class">.java</span>:<span class="number">11</span>)</span><br><span class="line">... <span class="number">1</span> more</span><br><span class="line">Suppressed: java<span class="selector-class">.lang</span><span class="selector-class">.ArithmeticException</span>: / by zero</span><br><span class="line">at me<span class="selector-class">.chilam</span><span class="selector-class">.exception</span><span class="selector-class">.TestException</span><span class="selector-class">.display</span>(TestException<span class="selector-class">.java</span>:<span class="number">17</span>)</span><br><span class="line">... <span class="number">1</span> more</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.javaweb基础知识</title>
      <link href="/2015/07/02/javaweb/"/>
      <url>/2015/07/02/javaweb/</url>
      <content type="html"><![CDATA[<h2 id="Servlet是什么？JSP是什么？它们的联系与区别是什么？"><a href="#Servlet是什么？JSP是什么？它们的联系与区别是什么？" class="headerlink" title="Servlet是什么？JSP是什么？它们的联系与区别是什么？"></a>Servlet是什么？JSP是什么？它们的联系与区别是什么？</h2><ul><li>Servlet是Java编写的运行在Servlet容器的服务端程序，狭义的Servlet是指Servlet接口，广义的Servlet是指任何实现Servlet接口的类，我们一般理解的为后者。Servlet的作用是接收浏览器发给服务器的请求Request，经过处理后，将返回响应Response给浏览器。</li><li>JSP是一种后端脚本语言，是为了解决Html是静态的，而Servlet输出动态页面又太复杂的问题而出现的，通过JSP标签、动作、内置对象提供方便的生成动态网页功能，是一种后端渲染技术。</li></ul><h3 id="联系和区别："><a href="#联系和区别：" class="headerlink" title="联系和区别："></a>联系和区别：</h3><ol><li>JSP其实就是基于Servlet实现的，JSP生命周期：<ul><li>解析阶段：Servlet容器解析JSP代码，如果有错则报错；</li><li>翻译阶段：Servlet容器翻译JSP代码为Servlet源文件；</li><li>编译阶段：Servlet容器编译Servlet源代码，生成Servlet字节码类文件；</li><li>……剩下就是Servlet的生命周期，会在下面介绍。</li></ul></li><li>JSP注重视图显示、Servlet注重控制，在传统的MVC架构中，JSP是View，Servlet是Controller。</li><li>JSP在修改静态内容时不需要重新编译。</li></ol><h2 id="Servlet-API"><a href="#Servlet-API" class="headerlink" title="Servlet API"></a>Servlet API</h2><ul><li>javax.servlet.Servlet：Servlet核心接口，定义了init()、service()、destroy()有关Servlet 生命周期的方法。</li><li>javax.servlet.ServletConfig：Servlet配置接口，定义了getServletContext()，主要用于获取ServletContext实例。</li><li>javax.servlet.ServletContex：Servlet上下文接口，相当于Web应用的总管家。定义了getAtrribute(String name)、setAttribute(String name, Object object)、getInitParameter(String name)、getContextPath()、getRequestDispatcher(String path)等方法，主要用于应用间通信，获取web应用资源、访问服务器文件资源、输出日志等功能。</li><li>javax.servlet.GenericServlet：该包下唯一抽象类，实现了ServletConfig、Servlet接口，为两个接口方法提供默认的实现方式。</li></ul><h2 id="如何使用Servlet"><a href="#如何使用Servlet" class="headerlink" title="如何使用Servlet"></a>如何使用Servlet</h2><ol><li><p>继承GenericServlet类（通用）</p><ul><li>GenericServlet类有一个关键的设计，定义了一个私有的ServletConfig成员变量，在init()方法中，由Servlet容器传入ServletConfig对象与之匹配。</li><li>GenericServlet类中唯一一个抽象方法是Service方法，子类必须实现Service方法，以为用户提供特定的服务。</li></ul></li><li><p>继承HttpServlet类，是GenericServlet的子类，重写了Service方法，提供了HTTP的相关服务实现。用户需要做的事，根据实际情况，重写doPost()、doGet()等方法。</p></li></ol><h2 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h2><ol><li>初始化阶段<ul><li>将编译后的servlet字节码文件读入内存</li><li>Servlet容器创建ServletConfig，并与ServletContext对象建立关联关系，即调用ServletConfig的getServletContext()方法会获取到ServletContext对象。</li><li>创建Servlet对象。</li><li>调用GenericServlet的init(ServletConfig config)方法，建立Servlet对象与ServletConfig对象的关联</li><li>初始化时机<ul><li>未配置<load-on-startup>属性的Servlet被客户端首次访问时才会被初始化。</load-on-startup></li><li>配置<load-on-startup>属性的Servlet在web容器启动时就会按配置的数值按顺序被初始化。</load-on-startup></li></ul></li></ul></li><li>运行阶段<ul><li>调用Servlet类的Service()方法。当Servlet将响应返回后，Servlet容器会销毁HttpServletRequest对象与HttpServletResponse对象。</li></ul></li><li>销毁阶段 <ul><li>在web容器终止时，会先调用所有Servlet的destroy()方法。</li></ul></li></ol><h2 id="ServletContextListener监视器"><a href="#ServletContextListener监视器" class="headerlink" title="ServletContextListener监视器"></a>ServletContextListener监视器</h2><p>通过实现ServletContextListener接口，实现contextInitialized(ServletContextEvent sce)与contextDestroyed(ServletContextEvent sce)方法，其中可以通过参数的getServletCotext()方法获取ServletContext对象以完成监听工作。</p><p>注意：Servlet、Listener、Filter三者的加载顺序为：Listener&gt;Filter&gt;Servlet</p><h2 id="请求转发与重定向特点以及它们的区别"><a href="#请求转发与重定向特点以及它们的区别" class="headerlink" title="请求转发与重定向特点以及它们的区别"></a>请求转发与重定向特点以及它们的区别</h2><h3 id="请求转发：HttpServletRequest-getRequestDispatcher-String-path-forward-request-response"><a href="#请求转发：HttpServletRequest-getRequestDispatcher-String-path-forward-request-response" class="headerlink" title="请求转发：HttpServletRequest.getRequestDispatcher(String path).forward(request, response);"></a>请求转发：HttpServletRequest.getRequestDispatcher(String path).forward(request, response);</h3><ul><li>服务器内部转发，浏览器URL不会改变，对用户透明。整体体现的是一个请求与一个响应。</li><li>请求转发前，会清空响应缓冲区。</li><li>如果转发的为Servlet或JSP（JSP也是Servlet），就会直接将当前HttpServletRequest对象与HttpServletResponse对象转交给目标Servlet或JSP的Service方法，处理后将响应结果返回给前端。</li><li>如果转发的为Html静态文档，则就读取文档中数据发送到前端。</li><li>请求转发不会执行转发方法之后的代码</li></ul><h3 id="重定向：HttpServletResponse-sendRedirect-String-path"><a href="#重定向：HttpServletResponse-sendRedirect-String-path" class="headerlink" title="重定向：HttpServletResponse.sendRedirect(String path);"></a>重定向：HttpServletResponse.sendRedirect(String path);</h3><ul><li>客户端外部转发，浏览器URL会发生改变。在Servlet调用重定向后，会返回302临时重定向状态码，响应内容为待重定向路径。然后，浏览器就会再次发出请求，请求路径为刚刚相应内容中的路径。整体体现的是两个请求与两个响应。</li><li>重定向前，也会清空响应缓冲区。</li><li>而重定向会执行重定向方法后的代码</li></ul><h3 id="区别汇总："><a href="#区别汇总：" class="headerlink" title="区别汇总："></a>区别汇总：</h3><ul><li>请求转发在服务端完成，重定向在客户端完成。</li><li>请求转发速度快，重定向速度慢。</li><li>请求转发是一次请求，一次响应；而重定向是两次请求，两次响应。</li><li>请求转发不会执行转发方法之后的代码；而重定向会执行重定向方法后的代码。</li><li>请求转发URL不会发生改变；而重定向URL会发生改变</li><li>请求转发必须在同一台服务器下完成；而重定向可以在不同服务器下完成</li></ul><h3 id="注意：请求转发与重定向的资源路径表示是有区别的"><a href="#注意：请求转发与重定向的资源路径表示是有区别的" class="headerlink" title="注意：请求转发与重定向的资源路径表示是有区别的"></a>注意：请求转发与重定向的资源路径表示是有区别的</h3><ul><li>请求转发的path一般使用”/资源名”，这里的 ‘/‘ 就代表了项目根路径 “<a href="http://localhost:8080/项目名/&quot;；" target="_blank" rel="noopener">http://localhost:8080/项目名/&quot;；</a></li><li>而重定向的path一般使用context.getContextPath() + “/资源名”，不能直接使用”/资源名”，因为在重定向中”/“代表了Web站点的根路径”<a href="http://localhost:8080&quot;。" target="_blank" rel="noopener">http://localhost:8080&quot;。</a></li></ul><h2 id="如何保证Servlet的线程安全"><a href="#如何保证Servlet的线程安全" class="headerlink" title="如何保证Servlet的线程安全"></a>如何保证Servlet的线程安全</h2><ul><li>保证变量作用域合理，线程私有的变量要定义在方法中。</li><li>共享变量要用保证线程安全，可以使用加锁、atomic类、volatile关键字实现。</li></ul><h2 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h2><ol><li>request对象——代表javax.servlet.http.HttpServletRequest对象</li><li>response对象——代表javax.servlet.http.HttpServletResponse对象</li><li>session对象——代表javax.servlet.http.HttpSession对象</li><li>application对象——代表javax.servlet.ServletContext对象</li><li>pageContext对象——代表javax.servlet.jsp.pageContext对象</li><li>page对象——代表this</li><li>config对象——代表javax.servlet.ServletConfig对象</li><li>out对象——代表javax.servlet.jsp.jspWriter对象</li><li>exception对象——代表java.lang.Exception对象</li></ol><p><a href="https://blog.csdn.net/zhangliangzi/article/details/49965209" target="_blank" rel="noopener">详细的参考信息</a></p><h2 id="Session和Cookie"><a href="#Session和Cookie" class="headerlink" title="Session和Cookie"></a>Session和Cookie</h2><p>Web应用一般使用HTTP协议传输数据，HTTP是一种无状态协议，完成数据交换后客户端与服务端的连接就会关闭。所以服务端无法根据HTTP请求区分请求者。但区分请求者身份是是非常有意义的。</p><h3 id="Cookie与Session的区别"><a href="#Cookie与Session的区别" class="headerlink" title="Cookie与Session的区别"></a>Cookie与Session的区别</h3><ul><li>Cookie存在于客户端，Session存在于服务端。</li><li>Cookie的存储数量是有限制的，安全性也更差。</li><li>Session是基于Cookie实现的，但服务端为了获得较高的存取速度，会把Session放到内存中，在高并发环境下会增大服务器压力。</li></ul><h3 id="Cookie机制"><a href="#Cookie机制" class="headerlink" title="Cookie机制"></a>Cookie机制</h3><p>Cookie基于浏览器的支持，具有“不可跨域名性”，浏览器只能访问当前域名网站的Cookie。</p><h4 id="Cookie的常见属性"><a href="#Cookie的常见属性" class="headerlink" title="Cookie的常见属性"></a>Cookie的常见属性</h4><ul><li>String name——Cookie的名称，一旦创建便不能更改；</li><li>Object value——Cookie的值；</li><li>int maxAge——Cookie失效时间，单位为秒；</li><li>boolean secure——Cookie是否使用HTTPS或SSL的安全数据，传输前要加密，默认为false</li><li>String domain——Cookie的作用域名，比如设置为”.google.com”，第一个字符必须为点，代表着以google.com为结尾的域名才可以访问该Cookie。</li><li>String path——Cookie的作用项目名，比如设置为”/webApp/“，最后一个字符必须为斜线，代表着contextPath为”/webApp”的程序才可以访问该Cookie。</li></ul><h4 id="Cookie使用"><a href="#Cookie使用" class="headerlink" title="Cookie使用"></a>Cookie使用</h4><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Cookie</span> cookie = <span class="function"><span class="keyword">new</span> <span class="title">Cookie</span>("name","<span class="type">StringValue</span>"); <span class="comment">// 新建Cookie</span></span></span><br><span class="line"><span class="function"><span class="title">Cookie</span>[] <span class="title">cookies</span> = <span class="title">request</span>.<span class="title">getCookie</span>(); <span class="comment">//获取客户端提交的所有cookie</span></span></span><br><span class="line"><span class="function"><span class="title">cookie</span>.<span class="title">setDomain</span>(".leeon.top"); <span class="comment">//设置作用域名</span></span></span><br><span class="line"><span class="function"><span class="title">cookie</span>.<span class="title">setPath</span>("/testApp/"); <span class="comment">//设置作用项目路径</span></span></span><br><span class="line"><span class="function"><span class="title">cookie</span>.<span class="title">setSecure</span>(true); <span class="comment">//设置安全属性</span></span></span><br><span class="line"><span class="function"><span class="title">cookie</span>.<span class="title">setMaxAge</span>(<span class="type">Integer</span>.<span class="type">MAX_VALUE</span>); <span class="comment">// 设置生命周期为永久；</span></span></span><br><span class="line"><span class="function"><span class="title">response</span>.<span class="title">addCookie</span>(cookie); <span class="comment">// 输出到客户端</span></span></span><br></pre></td></tr></table></figure><p>Coookie不能修改与删除，修改可通过创建同名Cookie后覆盖原Coolkie；删除可通过设置setMaxAge方法中的参数为0。</p><p>setMaxAge方法中的参如果设置为负值，则为存放在内存中的临时Cookie，关闭浏览器即失效；如果设置为0，则代表使Cookie。</p><h3 id="Session会话机制"><a href="#Session会话机制" class="headerlink" title="Session会话机制"></a>Session会话机制</h3><ul><li>当用户通过浏览器进程第一次请求一个支持会话的资源时，Servlet容器会为这个会话创建一个HttpSession对象，并为其分配一个唯一的ID，当前会话就此开始。</li><li>把这个唯一的ID以name为JSESSIONID的Cookie形式添加到响应中，返回给客户端保存。（当Cookie被禁用时，使用URL重写机制，在URL后添加;jsessionid=XXX以传输HttpSession对象标识）</li><li>当浏览器进程再次请求这个支持会话的资源时，会在请求头中加上一直保持着的JSESSIONID，Servlet容器会在HTTP请求头中自动查找这个Cookie（也可以通过HttpSession.getId()方法主动获取），如果找到，就取出对应HttpSession对象（其实用户第一次访问，也会进行相同的查询，因为查询不到，才会执行创建操作）。</li></ul><h4 id="Session的使用"><a href="#Session的使用" class="headerlink" title="Session的使用"></a>Session的使用</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session = request.getSession(); <span class="comment">//获取Session对象</span></span><br><span class="line">session.setAtrribute(<span class="string">"name"</span>, <span class="string">"StringValue"</span>);<span class="comment">//加入session</span></span><br><span class="line">session.getAttribute(<span class="string">"name"</span>);<span class="comment">//获取session</span></span><br><span class="line">session.removeAtrribute(<span class="string">"name"</span>);<span class="comment">//删除session</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="built_in">int</span> <span class="built_in">second</span>);<span class="comment">//设置超时时间，单位为秒，默认20分钟</span></span><br><span class="line">session.getLastAccessedTime();<span class="comment">//返回Session的最后活跃时间</span></span><br></pre></td></tr></table></figure><h4 id="Session持久化"><a href="#Session持久化" class="headerlink" title="Session持久化"></a>Session持久化</h4><ul><li>StandarManager是默认的Session Manager（用来管理Session）。它的实现机制是：当Tomcat服务器关闭或重启，或Web应用被重新加载时，会将内存中所有的HttpSession对象保存到文件系统中，默认的文件路径是：%CATALINA_HOME%\work\Catalina\<applicaton-name>\SESSIONS.ser</applicaton-name></li><li>PersistentManager能够把HttpSession对象保存到Session Store中，它提供了比较StandarManager更灵活的管理功能，具有容错能力，控制内存中HttpSession对象的数目等。<br>重启Tomcat后，Tomcat服务器把SESSIONS.ser中的持久化HttpSession对象加载到内存中。</li><li>Tomcat实现Session Store的接口为org.apache.catalina.session.Store，目前提供了两个实现这一接口的类：org.apache.catalina.session.FileStore和org.apache.catalina.session.JDBCStore。FileStore会将HttpSession对象保存到文件系统中；而JDBCStore则将HttpSession对象保存到数据库表中。</li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sublime的使用</title>
      <link href="/2015/06/30/sublime/"/>
      <url>/2015/06/30/sublime/</url>
      <content type="html"><![CDATA[<h2 id="下载与安装与破解码"><a href="#下载与安装与破解码" class="headerlink" title="下载与安装与破解码"></a>下载与安装与破解码</h2><ul><li><p><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">官网下载地址</a></p></li><li><p>安装略</p></li><li><p><a href="https://blog.csdn.net/qq_29819449/article/details/80130327" target="_blank" rel="noopener">注册码</a></p></li></ul><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><ul><li><p><a href="https://packagecontrol.io/" target="_blank" rel="noopener">官网插件库</a></p></li><li><p><a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">插件安装方式</a></p></li></ul><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><h4 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a><a href="https://packagecontrol.io/packages/Git" target="_blank" rel="noopener">GIT</a></h4><ul><li><a href="https://github.com/kemayo/sublime-text-git/wiki" target="_blank" rel="noopener">官网wiki</a></li><li>使用快捷键打开命令行 ctrl+shift+P</li><li>接下来就可以输入git的命令了，git init,git add,git commit[^1]</li></ul><h4 id="MarkdownEditing"><a href="#MarkdownEditing" class="headerlink" title="MarkdownEditing"></a><a href="https://packagecontrol.io/packages/MarkdownEditing" target="_blank" rel="noopener">MarkdownEditing</a></h4><ul><li><a href="https://github.com/SublimeText-Markdown/MarkdownEditing" target="_blank" rel="noopener">官网文档</a></li></ul><h4 id="MarkdownPreview"><a href="#MarkdownPreview" class="headerlink" title="MarkdownPreview"></a><a href="https://packagecontrol.io/packages/MarkdownPreview" target="_blank" rel="noopener">MarkdownPreview</a></h4><ul><li><p><a href="https://facelessuser.github.io/MarkdownPreview/usage/" target="_blank" rel="noopener">官方文档</a></p></li><li><p>Markdown Preview: Preview in Browser</p></li><li>Markdown Preview: Export HTML in Sublime Text</li><li>Markdown Preview: Copy to Clipboard</li><li>Markdown Preview: Open Markdown Cheat sheet</li></ul><h2 id="自定义代码片段"><a href="#自定义代码片段" class="headerlink" title="自定义代码片段"></a>自定义代码片段</h2><ul><li>鼠标点击【Tools-&gt;Developer-&gt;New Snippet】会出现如下代码</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">snippet</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">content</span>&gt;</span>&lt;![CDATA[</span></span><br><span class="line"><span class="xml">Hello, $</span><span class="template-variable">&#123;1:this&#125;</span><span class="xml"> is a $</span><span class="template-variable">&#123;2:snippet&#125;</span><span class="xml">.</span></span><br><span class="line"><span class="xml">]]&gt;<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">snippet</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><content>&lt;![CDATA[ 放你的代码片段 ]]&gt;</content></li><li><tabtrigger>快捷键</tabtrigger></li><li>保存文件，文件的后缀名称必须为sublime-snippet</li><li>我的文件保存位置C:\Users\Administrator\AppData\Roaming\Sublime Text 3\Packages\User</li><li>如何使用？在编辑的时候输入tabTrigger中定义的字母，然后按tab键即可</li></ul><h2 id="如何分屏和关闭分屏"><a href="#如何分屏和关闭分屏" class="headerlink" title="如何分屏和关闭分屏"></a>如何分屏和关闭分屏</h2><ul><li>单屏【View-&gt;Layout-&gt;Single】-&gt;【alt+shift+1】</li><li>2列【View-&gt;Layout-&gt;Columns2】-&gt;【alt+shift+2】</li><li>3列【View-&gt;Layout-&gt;Columns3】-&gt;【alt+shift+3】</li></ul><h2 id="同时快速编辑多行文本"><a href="#同时快速编辑多行文本" class="headerlink" title="同时快速编辑多行文本"></a>同时快速编辑多行文本</h2><ul><li>鼠标选中多行，按下Ctrl+Shift+L,就会出现光标即可同时编辑这些行；</li></ul><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul><li>Ctrl+Shift+P：打开命令面板</li><li>Ctrl+P：搜索项目中的文件</li><li>Ctrl+G：跳转到第几行</li><li>Ctrl+W：关闭当前打开文件</li><li>Ctrl+Shift+W：关闭所有打开文件</li><li>Ctrl+Shift+V：粘贴并格式化</li><li>Ctrl+D：选择单词，重复可增加选择下一个相同的单词</li><li>Ctrl+shift+D：复制上一行的文本</li><li>Ctrl+L：选择行，重复可依次增加选择下一行</li><li>Ctrl+Shift+L：选择多行</li><li>Ctrl+Shift+Enter：在当前行前插入新行</li><li>Ctrl+X：删除当前行</li><li>Ctrl+M：跳转到对应括号</li><li>Ctrl+U：软撤销，撤销光标位置</li><li>Ctrl+J：选择标签内容</li><li>Ctrl+F：查找内容</li><li>Ctrl+Shift+F：查找并替换</li><li>Ctrl+H：替换</li><li>Ctrl+R：前往 method</li><li>Ctrl+N：新建窗口</li><li>Ctrl+K+B：开关侧栏</li><li>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身</li><li>Ctrl+F2：设置/删除标记</li><li>Ctrl+/：注释当前行</li><li>Ctrl+Shift+/：当前位置插入注释</li><li>Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的</li><li>Ctrl+Shift+A：选择当前标签前后，修改标签用的</li><li>F11：全屏</li><li>Shift+F11：全屏免打扰模式，只编辑当前文件</li><li>Alt+F3：选择所有相同的词</li><li>Alt+.：闭合标签</li><li>Alt+Shift+数字：分屏显示</li><li>Alt+数字：切换打开第N个文件</li><li>Shift+右键拖动：光标多不，用来更改或插入列内容</li><li>鼠标的前进后退键可切换Tab文件</li><li>按Ctrl，依次点击或选取，可需要编辑的多个位置</li><li>按Ctrl+Shift+上下键，可替换行- </li></ul>]]></content>
      
      <categories>
          
          <category> 搬砖 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown语法</title>
      <link href="/2015/06/22/markdown/"/>
      <url>/2015/06/22/markdown/</url>
      <content type="html"><![CDATA[<h2 id="官网参考文档"><a href="#官网参考文档" class="headerlink" title="官网参考文档"></a><a href="http://www.markdown.cn/#miscellaneous" target="_blank" rel="noopener">官网参考文档</a></h2><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">| 依赖范围  |</span> compile <span class="params">| test |</span> provided <span class="params">| runtime |</span></span><br><span class="line"><span class="params">|:-----:|</span><span class="symbol">:-----</span><span class="symbol">:|</span><span class="symbol">:-----</span><span class="symbol">:|</span><span class="symbol">:-----</span><span class="symbol">:|</span><span class="symbol">:-----</span><span class="symbol">:|</span></span><br><span class="line"><span class="params">| compile  |</span> compile <span class="params">| - |</span> - <span class="params">| runtime |</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># |:-----:| 表示居中对齐</span></span><br><span class="line"><span class="comment"># |:----- | 表示左对齐</span></span><br><span class="line"><span class="comment"># | -----:| 表示右对齐</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
